<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>深入理解java虚拟机-ch1-修改class文件</title>
    <link href="/2022/12/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-ch1-%E4%BF%AE%E6%94%B9class%E6%96%87%E4%BB%B6/"/>
    <url>/2022/12/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-ch1-%E4%BF%AE%E6%94%B9class%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装asmtools-jar"><a href="#1-安装asmtools-jar" class="headerlink" title="1.安装asmtools.jar"></a>1.安装asmtools.jar</h2><h2 id="2-创建一个java文件并编译"><a href="#2-创建一个java文件并编译" class="headerlink" title="2.创建一个java文件并编译"></a>2.创建一个java文件并编译</h2><h3 id="2-1创建-Foo-java"><a href="#2-1创建-Foo-java" class="headerlink" title="2.1创建 Foo.java"></a>2.1创建 Foo.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Hello Java!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-keyword">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Hello Jvm!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-2编译并运行"><a href="#2-2编译并运行" class="headerlink" title="2.2编译并运行"></a>2.2编译并运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@LAPTOP:/usr/local/geek-jvm-study/ch1# javac Foo.java<br>root@LAPTOP:/usr/local/geek-jvm-study/ch1# java Foo<br>Hello Java!<br>Hello Jvm!<br></code></pre></td></tr></table></figure><p>此时可以看出  输出了两条语句 <code>Hello Java!</code> 和 <code>Hello Jvm!</code></p><h2 id="3查看编译后的java文件-class文件"><a href="#3查看编译后的java文件-class文件" class="headerlink" title="3查看编译后的java文件 class文件"></a>3查看编译后的java文件 class文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@LAPTOP:/usr/local/geek-jvm-study/ch1# javap -verbose Foo<br>Classfile /usr/local/geek-jvm-study/ch1/Foo.class<br>  Last modified Dec 10, 2022; size 491 bytes<br>  MD5 checksum fdecd3da68c7736cfaa7cd44f19b3857<br>  Compiled from &quot;Foo.java&quot;<br>public class Foo<br>  minor version: 0<br>  major version: 55<br>  flags: (0x0021) ACC_PUBLIC, ACC_SUPER<br>  this_class: #6                          // Foo<br>  super_class: #7                         // java/lang/Object<br>  interfaces: 0, fields: 0, methods: 2, attributes: 1<br>Constant pool:<br><span class="hljs-meta">   #</span><span class="bash">1 = Methodref          <span class="hljs-comment">#7.#17         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-meta">   #</span><span class="bash">2 = Fieldref           <span class="hljs-comment">#18.#19        // java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="hljs-meta">   #</span><span class="bash">3 = String             <span class="hljs-comment">#20            // Hello Java!</span></span><br><span class="hljs-meta">   #</span><span class="bash">4 = Methodref          <span class="hljs-comment">#21.#22        // java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="hljs-meta">   #</span><span class="bash">5 = String             <span class="hljs-comment">#23            // Hello Jvm!</span></span><br><span class="hljs-meta">   #</span><span class="bash">6 = Class              <span class="hljs-comment">#24            // Foo</span></span><br><span class="hljs-meta">   #</span><span class="bash">7 = Class              <span class="hljs-comment">#25            // java/lang/Object</span></span><br><span class="hljs-meta">   #</span><span class="bash">8 = Utf8               &lt;init&gt;</span><br><span class="hljs-meta">   #</span><span class="bash">9 = Utf8               ()V</span><br><span class="hljs-meta">  #</span><span class="bash">10 = Utf8               Code</span><br><span class="hljs-meta">  #</span><span class="bash">11 = Utf8               LineNumberTable</span><br><span class="hljs-meta">  #</span><span class="bash">12 = Utf8               main</span><br><span class="hljs-meta">  #</span><span class="bash">13 = Utf8               ([Ljava/lang/String;)V</span><br><span class="hljs-meta">  #</span><span class="bash">14 = Utf8               StackMapTable</span><br><span class="hljs-meta">  #</span><span class="bash">15 = Utf8               SourceFile</span><br><span class="hljs-meta">  #</span><span class="bash">16 = Utf8               Foo.java</span><br><span class="hljs-meta">  #</span><span class="bash">17 = NameAndType        <span class="hljs-comment">#8:#9          // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-meta">  #</span><span class="bash">18 = Class              <span class="hljs-comment">#26            // java/lang/System</span></span><br><span class="hljs-meta">  #</span><span class="bash">19 = NameAndType        <span class="hljs-comment">#27:#28        // out:Ljava/io/PrintStream;</span></span><br><span class="hljs-meta">  #</span><span class="bash">20 = Utf8               Hello Java!</span><br><span class="hljs-meta">  #</span><span class="bash">21 = Class              <span class="hljs-comment">#29            // java/io/PrintStream</span></span><br><span class="hljs-meta">  #</span><span class="bash">22 = NameAndType        <span class="hljs-comment">#30:#31        // println:(Ljava/lang/String;)V</span></span><br><span class="hljs-meta">  #</span><span class="bash">23 = Utf8               Hello Jvm!</span><br><span class="hljs-meta">  #</span><span class="bash">24 = Utf8               Foo</span><br><span class="hljs-meta">  #</span><span class="bash">25 = Utf8               java/lang/Object</span><br><span class="hljs-meta">  #</span><span class="bash">26 = Utf8               java/lang/System</span><br><span class="hljs-meta">  #</span><span class="bash">27 = Utf8               out</span><br><span class="hljs-meta">  #</span><span class="bash">28 = Utf8               Ljava/io/PrintStream;</span><br><span class="hljs-meta">  #</span><span class="bash">29 = Utf8               java/io/PrintStream</span><br><span class="hljs-meta">  #</span><span class="bash">30 = Utf8               println</span><br><span class="hljs-meta">  #</span><span class="bash">31 = Utf8               (Ljava/lang/String;)V</span><br>&#123;<br>  public Foo();<br>    descriptor: ()V<br>    flags: (0x0001) ACC_PUBLIC<br>    Code:<br>      stack=1, locals=1, args_size=1<br>         0: aload_0<br>         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V<br>         4: return<br>      LineNumberTable:<br>        line 1: 0<br><br>  public static void main(java.lang.String[]);<br>    descriptor: ([Ljava/lang/String;)V<br>    flags: (0x0009) ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=2, locals=2, args_size=1<br>         0: iconst_1<br>         1: istore_1<br>         2: iload_1<br>         3: ifeq          14<br>         6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>         9: ldc           #3                  // String Hello Java!<br>        11: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>        14: iload_1<br>        15: iconst_1<br>        16: if_icmpne     27<br>        19: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>        22: ldc           #5                  // String Hello Jvm!<br>        24: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>        27: return<br>      LineNumberTable:<br>        line 3: 0<br>        line 4: 2<br>        line 5: 6<br>        line 7: 14<br>        line 8: 19<br>        line 10: 27<br>      StackMapTable: number_of_entries = 2<br>        frame_type = 252 /* append */<br>          offset_delta = 14<br>          locals = [ int ]<br>        frame_type = 12 /* same */<br>&#125;<br>SourceFile: &quot;Foo.java&quot;<br></code></pre></td></tr></table></figure><h2 id="4-利用asmtools修改class文件"><a href="#4-利用asmtools修改class文件" class="headerlink" title="4.利用asmtools修改class文件"></a>4.利用asmtools修改class文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@LAPTOP:/usr/local/geek-jvm-study/ch1# java -cp ../asmtool/asmtools.jar org.openjdk.asmtools.jdis.Main Foo.class &gt; Foo.jasm.1<br>root@LAPTOP:/usr/local/geek-jvm-study/ch1# awk &#x27;NR==1,/iconst_1/&#123;sub(/iconst_1/,&quot;iconst_2&quot;)&#125; 1&#x27; Foo.jasm.1 &gt; Foo.jasm<br>root@LAPTOP:/usr/local/geek-jvm-study/ch1# java Foo<br>Hello Java!<br>Hello Jvm!<br>root@LAPTOP:/usr/local/geek-jvm-study/ch1# java -cp ../asmtool/asmtools.jar org.openjdk.asmtools.jasm.M<br>ain Foo.jasm<br>root@LAPTOP-0GUCAKHK:/usr/local/geek-jvm-study/ch1# java Foo<br>Hello Java!<br></code></pre></td></tr></table></figure><p>此时 只输出了 <code>Hello Java!</code> 没有输出<code>Hello Jvm!</code></p><blockquote><p>这里 awk ‘NR==1,/iconst_1/{sub(/iconst_1/,”iconst_2”)} 1’ Foo.jasm.1 是 将 boolean 变量 flag 的值从 1 变成了 2 </p></blockquote><h2 id="5-再次查看编译后的文件"><a href="#5-再次查看编译后的文件" class="headerlink" title="5.再次查看编译后的文件"></a>5.再次查看编译后的文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@LAPTOP:/usr/local/geek-jvm-study/ch1# javap -verbose Foo<br>Classfile /usr/local/geek-jvm-study/ch1/Foo.class<br>  Last modified Dec 10, 2022; size 429 bytes<br>  MD5 checksum 97d020b83c40549a0440ebfa5597a1cd<br>  Compiled from &quot;Foo.jasm&quot;<br>public class Foo<br>  minor version: 0<br>  major version: 55<br>  flags: (0x0021) ACC_PUBLIC, ACC_SUPER<br>  this_class: #25                         // Foo<br>  super_class: #8                         // java/lang/Object<br>  interfaces: 0, fields: 0, methods: 2, attributes: 1<br>Constant pool:<br><span class="hljs-meta">   #</span><span class="bash">1 = String             <span class="hljs-comment">#10            // Hello Jvm!</span></span><br><span class="hljs-meta">   #</span><span class="bash">2 = String             <span class="hljs-comment">#15            // Hello Java!</span></span><br><span class="hljs-meta">   #</span><span class="bash">3 = Fieldref           <span class="hljs-comment">#27.#11        // java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="hljs-meta">   #</span><span class="bash">4 = Methodref          <span class="hljs-comment">#8.#17         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-meta">   #</span><span class="bash">5 = Methodref          <span class="hljs-comment">#12.#30        // java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="hljs-meta">   #</span><span class="bash">6 = Utf8               (Ljava/lang/String;)V</span><br><span class="hljs-meta">   #</span><span class="bash">7 = Utf8               out</span><br><span class="hljs-meta">   #</span><span class="bash">8 = Class              <span class="hljs-comment">#9             // java/lang/Object</span></span><br><span class="hljs-meta">   #</span><span class="bash">9 = Utf8               java/lang/Object</span><br><span class="hljs-meta">  #</span><span class="bash">10 = Utf8               Hello Jvm!</span><br><span class="hljs-meta">  #</span><span class="bash">11 = NameAndType        <span class="hljs-comment">#7:#23         // out:Ljava/io/PrintStream;</span></span><br><span class="hljs-meta">  #</span><span class="bash">12 = Class              <span class="hljs-comment">#14            // java/io/PrintStream</span></span><br><span class="hljs-meta">  #</span><span class="bash">13 = Utf8               ([Ljava/lang/String;)V</span><br><span class="hljs-meta">  #</span><span class="bash">14 = Utf8               java/io/PrintStream</span><br><span class="hljs-meta">  #</span><span class="bash">15 = Utf8               Hello Java!</span><br><span class="hljs-meta">  #</span><span class="bash">16 = Utf8               main</span><br><span class="hljs-meta">  #</span><span class="bash">17 = NameAndType        <span class="hljs-comment">#29:#20        // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-meta">  #</span><span class="bash">18 = Utf8               SourceFile</span><br><span class="hljs-meta">  #</span><span class="bash">19 = Utf8               println</span><br><span class="hljs-meta">  #</span><span class="bash">20 = Utf8               ()V</span><br><span class="hljs-meta">  #</span><span class="bash">21 = Utf8               StackMapTable</span><br><span class="hljs-meta">  #</span><span class="bash">22 = Utf8               Foo.jasm</span><br><span class="hljs-meta">  #</span><span class="bash">23 = Utf8               Ljava/io/PrintStream;</span><br><span class="hljs-meta">  #</span><span class="bash">24 = Utf8               Code</span><br><span class="hljs-meta">  #</span><span class="bash">25 = Class              <span class="hljs-comment">#26            // Foo</span></span><br><span class="hljs-meta">  #</span><span class="bash">26 = Utf8               Foo</span><br><span class="hljs-meta">  #</span><span class="bash">27 = Class              <span class="hljs-comment">#28            // java/lang/System</span></span><br><span class="hljs-meta">  #</span><span class="bash">28 = Utf8               java/lang/System</span><br><span class="hljs-meta">  #</span><span class="bash">29 = Utf8               &lt;init&gt;</span><br><span class="hljs-meta">  #</span><span class="bash">30 = NameAndType        <span class="hljs-comment">#19:#6         // println:(Ljava/lang/String;)V</span></span><br>&#123;<br>  public Foo();<br>    descriptor: ()V<br>    flags: (0x0001) ACC_PUBLIC<br>    Code:<br>      stack=1, locals=1, args_size=1<br>         0: aload_0<br>         1: invokespecial #4                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V<br>         4: return<br><br>  public static void main(java.lang.String[]);<br>    descriptor: ([Ljava/lang/String;)V<br>    flags: (0x0009) ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=2, locals=2, args_size=1<br>         0: iconst_2<br>         1: istore_1<br>         2: iload_1<br>         3: ifeq          14<br>         6: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>         9: ldc           #2                  // String Hello Java!<br>        11: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>        14: iload_1<br>        15: iconst_1<br>        16: if_icmpne     27<br>        19: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>        22: ldc           #1                  // String Hello Jvm!<br>        24: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>        27: return<br>      StackMapTable: number_of_entries = 2<br>        frame_type = 252 /* append */<br>          offset_delta = 14<br>          locals = [ int ]<br>        frame_type = 12 /* same */<br>&#125;<br>SourceFile: &quot;Foo.jasm&quot;<br></code></pre></td></tr></table></figure><p>两次 主要不同的地方在这里</p><p>原始的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">public static void main(java.lang.String[]);<br>   descriptor: ([Ljava/lang/String;)V<br>   flags: (0x0009) ACC_PUBLIC, ACC_STATIC<br>   Code:<br>     stack=2, locals=2, args_size=1<br>        0: iconst_1<br>        1: istore_1<br>        2: iload_1<br>        3: ifeq          14<br>        6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>        9: ldc           #3                  // String Hello Java!<br>       11: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>       14: iload_1<br>       15: iconst_1<br>       16: if_icmpne     27<br>       19: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>       22: ldc           #5                  // String Hello Jvm!<br>       24: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>       27: return<br>     LineNumberTable:<br>       line 3: 0<br>       line 4: 2<br>       line 5: 6<br>       line 7: 14<br>       line 8: 19<br>       line 10: 27<br>     StackMapTable: number_of_entries = 2<br>       frame_type = 252 /* append */<br>         offset_delta = 14<br>         locals = [ int ]<br>       frame_type = 12 /* same */<br></code></pre></td></tr></table></figure><p>修改后的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">public static void main(java.lang.String[]);<br>   descriptor: ([Ljava/lang/String;)V<br>   flags: (0x0009) ACC_PUBLIC, ACC_STATIC<br>   Code:<br>     stack=2, locals=2, args_size=1<br>        0: iconst_2                       //  我们使用 asmtools 修改了这里<br>        1: istore_1<br>        2: iload_1<br>        3: ifeq          14<br>        6: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>        9: ldc           #2                  // String Hello Java!<br>       11: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>       14: iload_1<br>       15: iconst_1<br>       16: if_icmpne     27<br>       19: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>       22: ldc           #1                  // String Hello Jvm!<br>       24: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>       27: return<br>     StackMapTable: number_of_entries = 2<br>       frame_type = 252 /* append */<br>         offset_delta = 14<br>         locals = [ int ]<br>       frame_type = 12 /* same */<br></code></pre></td></tr></table></figure><p>对于 java虚拟机来说 ，boolean类型被映射成了 整数类型</p><blockquote><p>if(flag == true){} 就是 判断 flag是否等于1</p><p>if(flag){} 就是判断 flag是否不为0</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flume启动脚本</title>
    <link href="/2022/12/08/flume%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
    <url>/2022/12/08/flume%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义flume启停脚本"><a href="#自定义flume启停脚本" class="headerlink" title="自定义flume启停脚本"></a>自定义flume启停脚本</h2><p>使用 shell 编写一个 flume 启动、停止、重启脚本</p><p>执行 方式 ：</p><p>sh 脚本 (start|stop|restart)</p><p><strong>注意： 需要将该 脚本 放在 flume 的 bin目录下，即 apache-flume-1.9.0-bin/bin/启动脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>function start() &#123;<br>    basepath=$(cd $(dirname $0);cd ..; pwd)<br>    echo $basepath<br>    f_cnt=`ps -ef |grep java|grep flume |grep -v grep| wc -l`<br>    if [ $f_cnt -le 0 ]; then<br>    # 进程不存在<br>        echo &quot;start flume!&quot;<br>    # 注意： 此处命令 需要根据具体配置做出修改, 尤其是  --name    --conf    --conf-file  等参数, 以及输出的 日志<br>        nohup $basepath/bin/flume-ng agent --name a1 --conf $basepath/conf/ --conf-file  $basepath/conf/flume-conf-test.properties &gt; $basepath/logs/flume-start.log 2&gt;&amp;1 &amp;<br>    else<br>    # 进程存在<br>        echo &quot;flume already exists!&quot;<br>    fi<br>&#125;<br> <br>function stop() &#123;<br>    f_cnt=`ps -ef |grep java|grep flume |grep -v grep| wc -l`<br>    if [ $f_cnt -le 0 ]; then<br>    # 进程不存在<br>    echo &quot;no flume running!&quot;<br>    else<br>    # 进程存在<br>        ps -ef|grep java|grep flume|awk &#x27;&#123;print $2;&#125;&#x27;|xargs kill<br>    fi<br>&#125;<br> <br> <br>case &quot;$1&quot; in<br>    start)<br>    echo &quot;Starting flume Now......&quot;<br>    start<br>    echo &quot;Starting flume Finished&quot;<br>    ;;<br>    stop)<br>    echo &quot;Stopping flume Now......&quot;<br>    stop<br>    echo &quot;Stopping flume Finished&quot;<br>    ;;<br>    restart)<br>    echo &quot;Restart flume Now......&quot;<br>    stop<br>    sleep 1<br>    start<br>    echo &quot;Restart flume Finished&quot;<br>    ;;<br>    *)<br>    echo $&quot;usage: $0 &#123;start | stop | restart&#125;&quot;<br>    exit 1<br>esac<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>flume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flume自定义拦截器(Interceptor)</title>
    <link href="/2022/12/08/flume%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8-Interceptor/"/>
    <url>/2022/12/08/flume%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8-Interceptor/</url>
    
    <content type="html"><![CDATA[<p>自定义Interceptor是Flume中一个非常有用的功能，它允许用户在Flume中添加自己的拦截器，以实现自定义的日志处理逻辑。</p><p>要创建一个自定义的Interceptor，需要实现Flume的<code>Interceptor</code>接口，并实现接口中定义的所有方法。然后，可以在Flume的配置文件中添加该拦截器，并指定它的位置。</p><p>拦截器将在Flume中的数据流中执行，并可以对数据进行处理、修改、过滤或转换。拦截器的处理逻辑取决于实现。</p><p>比如 拦截 超过100K 的消息</p><p>新建一个 maven 项目 在 <code>pom.xml</code> 中添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flume<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flume-ng-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后 实现 Interceptor 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_MESSAGE_SIZE = <span class="hljs-number">100</span> * <span class="hljs-number">1024</span>; <span class="hljs-comment">// 100KB</span><br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化拦截器</span><br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Event <span class="hljs-title">intercept</span><span class="hljs-params">(Event event)</span> </span>&#123;<br>    <span class="hljs-comment">// 拦截事件，并处理</span><br>    <span class="hljs-keyword">if</span> (event.getBody().length &gt; MAX_MESSAGE_SIZE) &#123;<br>      <span class="hljs-comment">// 如果日志消息过大，则丢弃该事件</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> event;<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Event&gt; <span class="hljs-title">intercept</span><span class="hljs-params">(List&lt;Event&gt; events)</span> </span>&#123;<br>    <span class="hljs-comment">// 拦截一组事件，并处理</span><br>    List&lt;Event&gt; intercepted = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Event event : events) &#123;<br>      Event interceptedEvent = intercept(event);<br>      <span class="hljs-keyword">if</span> (interceptedEvent != <span class="hljs-keyword">null</span>) &#123;<br>        intercepted.add(interceptedEvent);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> intercepted;<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 关闭拦截器</span><br>  &#125;<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span>.<span class="hljs-title">Builder</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Interceptor <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyInterceptor();<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>      <span class="hljs-comment">// 从配置文件读取配置参数</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将 项目打成 jar 包以后 上传到 flume 的 lib 目录下</p><p>如果想使用自定义的 拦截器 ，只需要在配置中设置即可</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 设置拦截器</span><br><span class="hljs-meta">a1.sources.r1.interceptors</span> = <span class="hljs-string">i1</span><br><span class="hljs-meta">a1.sources.r1.interceptors.i1.type</span> = <span class="hljs-string">com.example.MyInterceptor$Builder</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>flume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop使用distcp数据迁移</title>
    <link href="/2022/12/02/hadoop%E4%BD%BF%E7%94%A8distcp%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"/>
    <url>/2022/12/02/hadoop%E4%BD%BF%E7%94%A8distcp%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><blockquote><p>命令 hadoop distcp:</p><p>hadoop distcp -log ~/distcp_stage.log   hdfs://192.168.1.1:9000/user/hive/warehouse/ods hdfs://192.168.1.2:8020/user/hive/warehouse/</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>这里的 source hdfs 和 target hdfs 必须得是 <strong>namenode</strong> 所在节点</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="1-数据迁移后-hive表-count-0"><a href="#1-数据迁移后-hive表-count-0" class="headerlink" title="1.数据迁移后 hive表 count(*) = 0"></a>1.数据迁移后 hive表 count(*) = 0</h3><p>可能是同步过来的数据在hive的 <strong>metastore</strong> 里没有行数信息,执行一次 <strong>insert overwirte</strong> 后就有数据了</p><p>也有可能是应用程序权限问题</p><h3 id="2-分区表无数据"><a href="#2-分区表无数据" class="headerlink" title="2.分区表无数据"></a>2.分区表无数据</h3><p>分区表还需要手动添加分区，<code>alter table xxx add if not exists partition(key1=&quot;value1&quot;, key2=&quot;value2&quot;) partition(key1=&quot;value3&quot;, key2=&quot;value4&quot;)</code></p><p>hive shell 通过 <code>msck repair table xxx</code> 可以自动去读取hdfs下文件信息，来添加元数据中不存在的分区信息，但是存在jdbc连接时不识别 msck 指令的情况</p><h3 id="3-客户端工具无法执行insert-overwrite"><a href="#3-客户端工具无法执行insert-overwrite" class="headerlink" title="3.客户端工具无法执行insert overwrite"></a>3.客户端工具无法执行insert overwrite</h3><p>datagrip执行insertoverwrite 报 return code 2 from <a href="http://org.apache.hadoop.hive.ql.exec.mr/">org.apache.hadoop.hive.ql.exec.mr</a>.MapRedTask</p><p>查询yarn日志发现: 找不到或无法加载主类 org.apache.hadoop.mapreduce.v2.app.MRAppMaster</p><p>但是在hive命令行中可以执行</p><p>有可能是hadoop目录权限问题</p>]]></content>
    
    
    
    <tags>
      
      <tag>hdfs</tag>
      
      <tag>数据迁移</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jetbrains-ide使用的vmoptions文件位置</title>
    <link href="/2022/12/02/jetbrains-ide%E4%BD%BF%E7%94%A8%E7%9A%84vmoptions%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/"/>
    <url>/2022/12/02/jetbrains-ide%E4%BD%BF%E7%94%A8%E7%9A%84vmoptions%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="IDE使用了哪个vmoptions文件"><a href="#IDE使用了哪个vmoptions文件" class="headerlink" title="IDE使用了哪个vmoptions文件?"></a>IDE使用了哪个vmoptions文件?</h1><p>IDE依次检查下面各项,若满足,则使用相应的文件</p><h2 id="1-环境变量指向的vmoptions文件"><a href="#1-环境变量指向的vmoptions文件" class="headerlink" title="1.环境变量指向的vmoptions文件"></a>1.环境变量指向的vmoptions文件</h2><p>如果<code>&lt;IDE&gt;_VM_OPTIONS</code>环境变量存在且指向的vmoptions文件也存在, 则使用该文件.其中<IDE>是jetbrains IDE的代号,比如 IDEA / PYCHARM 等</p><p>环境变量里找到 以 _VM_OPTIONS 结尾的环境变量, 如下, 对应的值就是相应IDE使用的vmoptions文件了</p><p><img src="https://raw.githubusercontent.com/xxzuo/pic_host/main/image2022-12-1_11-12-53.png" alt=""></p><h2 id="2-配置目录"><a href="#2-配置目录" class="headerlink" title="2.配置目录"></a>2.配置目录</h2><h3 id="2-1-如果当前IDE是Toolbox安装的-则使用IDE安装目录下的-vmoptions-文件-其中是IDE的版本号"><a href="#2-1-如果当前IDE是Toolbox安装的-则使用IDE安装目录下的-vmoptions-文件-其中是IDE的版本号" class="headerlink" title="2.1 如果当前IDE是Toolbox安装的,则使用IDE安装目录下的 .vmoptions 文件,其中是IDE的版本号"></a>2.1 如果当前IDE是Toolbox安装的,则使用IDE安装目录下的 <version>.vmoptions 文件,其中<version>是IDE的版本号</h3><h3 id="2-2-如果不是通过toolbox安装-而是独立安装的IDE-则使用配置目录下的文件"><a href="#2-2-如果不是通过toolbox安装-而是独立安装的IDE-则使用配置目录下的文件" class="headerlink" title="2.2 如果不是通过toolbox安装,而是独立安装的IDE, 则使用配置目录下的文件"></a>2.2 如果不是通过toolbox安装,而是独立安装的IDE, 则使用配置目录下的文件</h3><p><strong>常见的配置目录</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">操作系统</th><th style="text-align:left">配置目录</th></tr></thead><tbody><tr><td style="text-align:left">操作系统</td><td style="text-align:left">配置目录</td></tr><tr><td style="text-align:left">Windows</td><td style="text-align:left">%APPDATA%\JetBrains\<product><version></td></tr><tr><td style="text-align:left">示例:</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">C:\Users\JohnS\AppData\Roaming\JetBrains\IntelliJIdea2022.1</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">MacOS</td><td style="text-align:left">~/Library/Application Support/JetBrains/<product><version></td></tr><tr><td style="text-align:left">示例:</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">~/Library/Application Support/JetBrains/IntelliJIdea2022.1</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Linux</td><td style="text-align:left">~/.config/JetBrains/<product><version></td></tr><tr><td style="text-align:left">示例:</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">~/.config/JetBrains/IntelliJIdea2022.1</td></tr></tbody></table></div><h2 id="3-默认位置下-即bin目录"><a href="#3-默认位置下-即bin目录" class="headerlink" title="3. 默认位置下 [即bin目录]"></a>3. 默认位置下 [即bin目录]</h2><p>如果以上位置都没有vmoptions文件, 则使用默认位置下 [即bin目录]的文件</p><p>以 idea为例</p><div class="table-container"><table><thead><tr><th style="text-align:left">操作系统</th><th style="text-align:left">默认位置</th></tr></thead><tbody><tr><td style="text-align:left">Windows</td><td style="text-align:left"><IDE_HOME>\bin\idea64.exe.vmoptions</td></tr><tr><td style="text-align:left">macOS</td><td style="text-align:left">IntelliJ IDEA.app/Contents/bin/idea.vmoptions</td></tr><tr><td style="text-align:left">Linux</td><td style="text-align:left"><IDE_HOME>/bin/idea64.vmoptions</td></tr></tbody></table></div>]]></content>
    
    
    
    <tags>
      
      <tag>jetbrains</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flume-sink-kafka多分区</title>
    <link href="/2022/11/17/flume-sink-kafka%E5%A4%9A%E5%88%86%E5%8C%BA/"/>
    <url>/2022/11/17/flume-sink-kafka%E5%A4%9A%E5%88%86%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>如果不做任何设置，flume 在写 kafka时只会写到一个分区，由于kafka 的一个分区 对于一个 消费者组来说只能有一个消费者</p><p>这样会影响消费速度，所以想flume 在 写 kafka 时就写到多个分区中</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>官方文档中说明 flume 写 kafka的分区 是根据 FlumeEvent 的 headers 的key 来判断写入哪个分区的，如果 key 为 null 会随机分区</p><p>所以 我们需要 添加拦截器，给headers 中添加一个 key</p><p>设置 flume 配置文件如下</p><blockquote><p>a1.sources.r1.interceptors = i1</p><p>a1.sources.r1.interceptors.i1.type = org.apache.flume.sink.solr.morphline.UUIDInterceptor$Builder<br>a1.sources.r1.interceptors.i1.headerName=key<br>a1.sources.r1.interceptors.i1.preserveExisting=false</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>kafka</tag>
      
      <tag>flume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>anaconda配置国内镜像</title>
    <link href="/2022/11/15/anaconda%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
    <url>/2022/11/15/anaconda%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Anaconda配置国内镜像"><a href="#Anaconda配置国内镜像" class="headerlink" title="Anaconda配置国内镜像"></a>Anaconda配置国内镜像</h1><ul><li>查看已有镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --show channels<br><br>channels:<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br>  - defaults<br><br></code></pre></td></tr></table></figure><ul><li>删除配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除所有镜像</span><br>conda config --remove-key channels<br><br><span class="hljs-comment"># 删除指定镜像</span><br>conda config --remove channels [urls]<br></code></pre></td></tr></table></figure><ul><li>配置国内镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --add channels http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/<br><br>conda config --<span class="hljs-built_in">set</span> show_channel_urls yes<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>List&lt;Integer&gt;添加一个String</title>
    <link href="/2022/08/30/List-Integer-%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAString/"/>
    <url>/2022/08/30/List-Integer-%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAString/</url>
    
    <content type="html"><![CDATA[<p>利用反射魔法 就可以在 ArrayList<Integer> 中添加一个 String类型的元素了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            List&lt;Integer&gt; test = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            test.add(<span class="hljs-number">1</span>);<br>            Method method = test.getClass().getMethod(<span class="hljs-string">&quot;add&quot;</span>, Object.class);<br>            method.invoke(test, <span class="hljs-string">&quot;t&quot;</span>);<br>            <span class="hljs-keyword">for</span> (Object num : test) &#123;<br>                System.out.println(num);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span><br><span class="hljs-built_in">t</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>picgo上传图片到github</title>
    <link href="/2022/08/09/picgo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0github/"/>
    <url>/2022/08/09/picgo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0github/</url>
    
    <content type="html"><![CDATA[<p>写博客的时候有很多图片需要插入，这些博客在本地的时候，可以预览到图片，但是因为图片在本地没有上传，所以一发布就看不到图片了。因为博客是部署在 <strong>github</strong> 上的，所以同样也用 <strong>github</strong> 来做图床。</p><p><strong>PicGo</strong> 是一个用于快速上传图片并获取图片 URL 链接的工具，支持多个图床进行使用</p><h3 id="下载picgo"><a href="#下载picgo" class="headerlink" title="下载picgo"></a>下载picgo</h3><p>下载picgo 2.3.0版本</p><p><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0">Release 2.3.0 · Molunerfinn/PicGo (github.com)</a></p><p>windows 选择如下版本：</p><p><img src="https://raw.githubusercontent.com/xxzuo/pic_host/main/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220809225734.png" alt=""></p><h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><p>在 <strong>github</strong> 主页点击自己头像后，依次选择【Settings】-&gt;【Developer settings】-&gt;【Personal access tokens】-&gt;【Generate new token】</p><p><img src="https://raw.githubusercontent.com/xxzuo/pic_host/main/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220809230614.png" alt=""></p><p><img src="https://raw.githubusercontent.com/xxzuo/pic_host/main/5136655b521491ac2bce1a586f08ac5.png" alt=""></p><p><img src="https://raw.githubusercontent.com/xxzuo/pic_host/main/0cb3b7117972d880a65957e2d976622.png" alt=""></p><h3 id="设置图床"><a href="#设置图床" class="headerlink" title="设置图床"></a>设置图床</h3><p>选择 【GitHub图床】</p><p><img src="https://raw.githubusercontent.com/xxzuo/pic_host/main/61f59a429ad79346f5224f045ba22c7.png" alt=""></p><p>仓库是 你自己 github 上的 仓库</p><p>token就是刚才获取的token</p>]]></content>
    
    
    
    <tags>
      
      <tag>picgo</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>合并flink写入hive产生的小文件</title>
    <link href="/2022/08/04/%E5%90%88%E5%B9%B6flink%E5%86%99%E5%85%A5hive%E4%BA%A7%E7%94%9F%E7%9A%84%E5%B0%8F%E6%96%87%E4%BB%B6/"/>
    <url>/2022/08/04/%E5%90%88%E5%B9%B6flink%E5%86%99%E5%85%A5hive%E4%BA%A7%E7%94%9F%E7%9A%84%E5%B0%8F%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>flink 写入数据到 hdfs 时，会产生很多的小文件，因为每个文件均按块存储,每个块的元数据存储在NameNode的内存中,因此<em>HDFS</em>存储<em>小文件</em>会非常低效。因为大量的<em>小文件</em>会耗尽NameNode中的大部分内存。</p><p>因为我们需要将 小文件合并。</p><p>只需要利用 HIVE 的 MR 即可，也就是执行 这条SQL </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> hive_table<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hive_table <span class="hljs-keyword">where</span> partition_col <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>其中 <strong>partition_col</strong>是表的分区字段，这样，该分区内的小文件会自动合并</p>]]></content>
    
    
    
    <tags>
      
      <tag>hive</tag>
      
      <tag>flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flink读kafka数据写入hive</title>
    <link href="/2022/08/04/flink%E8%AF%BBkafka%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5hive/"/>
    <url>/2022/08/04/flink%E8%AF%BBkafka%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5hive/</url>
    
    <content type="html"><![CDATA[<h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xxzuo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scala.binary.version</span>&gt;</span>2.11<span class="hljs-tag">&lt;/<span class="hljs-name">scala.binary.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hadoop.version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">hadoop.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hive.version</span>&gt;</span>3.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">hive.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">flink.version</span>&gt;</span>1.14.4<span class="hljs-tag">&lt;/<span class="hljs-name">flink.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.20<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-clients_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ververica<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-mysql-cdc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-csv<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-base<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-jdbc_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-table-planner_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-kafka_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-table-api-java-bridge_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-sql-connector-kafka_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-hive_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-math3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hive<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hive-exec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.thrift<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>libfb303<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.antlr<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>antlr-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.58<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 编译插件 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 打jar包插件(会包含所有依赖) --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 可以设置jar包的入口类(可选) --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="kafka-source"><a href="#kafka-source" class="headerlink" title="kafka source"></a>kafka source</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">String bootstrapServers = <span class="hljs-string">&quot;192.168.1.1:9092,192.168.1.2:9092&quot;</span>;<br>KafkaSource&lt;String&gt; source = KafkaSource.&lt;String&gt;builder()<br>        .setBootstrapServers(bootstrapServers)<br>        .setTopics(<span class="hljs-string">&quot;kafka_topic&quot;</span>)<br>        .setGroupId(<span class="hljs-string">&quot;consumer_group&quot;</span>)<br>        .setStartingOffsets(OffsetsInitializer.committedOffsets(OffsetResetStrategy.EARLIEST))<br>        .setValueOnlyDeserializer(<span class="hljs-keyword">new</span> SimpleStringSchema())<br>        .build();<br>DataStreamSource&lt;String&gt; stream = env.fromSource(source, WatermarkStrategy.forMonotonousTimestamps(), <span class="hljs-string">&quot;kafka_source&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="hive-sink"><a href="#hive-sink" class="headerlink" title="hive sink"></a>hive sink</h3><h4 id="设置hiveCatalog"><a href="#设置hiveCatalog" class="headerlink" title="设置hiveCatalog"></a>设置hiveCatalog</h4><p>hiveCatalog作用是：使用 hive 的 metastore去管理 flink元数据 ，持久化元数据，避免每次使用时都要重新注册<br>代码中使用 hive catalog<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置 catalog</span><br>String catalogName = <span class="hljs-string">&quot;flinkHive&quot;</span>;<br><span class="hljs-comment">// 路径为 hive 配置文件路径</span><br>HiveCatalog catalog = <span class="hljs-keyword">new</span> HiveCatalog(<br>        catalogName,<br>        <span class="hljs-string">&quot;flink&quot;</span>,<br>        <span class="hljs-string">&quot;/usr/local/hive/apache-hive-3.1.2-bin/conf/&quot;</span><br>);<br>tableEnv.registerCatalog(catalogName, catalog);<br><span class="hljs-comment">// 使用注册的catalog</span><br>tableEnv.useCatalog(catalogName);<br></code></pre></td></tr></table></figure></p><h4 id="将-kafka-stream-映射为临时表"><a href="#将-kafka-stream-映射为临时表" class="headerlink" title="将 kafka stream 映射为临时表"></a>将 kafka stream 映射为临时表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 建立临时视图 映射 kafka source</span><br>tableEnv.createTemporaryView(<span class="hljs-string">&quot;flink.kafka_table&quot;</span>, stream);<br></code></pre></td></tr></table></figure><h4 id="创建-hive-表"><a href="#创建-hive-表" class="headerlink" title="创建 hive 表"></a>创建 hive 表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// hive 建表时 需要切换 方言为 HIVE</span><br>tableEnv.getConfig().setSqlDialect(SqlDialect.HIVE);<br>tableEnv.executeSql(<span class="hljs-string">&quot; CREATE TABLE if not exists flink.hive_table (\n&quot;</span> +<br>                        <span class="hljs-string">&quot;hive_col1 STRING,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;hive_col2 STRING,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;           ) &quot;</span> +<br>                        <span class="hljs-string">&quot;PARTITIONED BY (\n&quot;</span> +<br>                        <span class="hljs-string">&quot;                     day STRING\n&quot;</span> +<br>                        <span class="hljs-string">&quot;           ) &quot;</span> +<br>                        <span class="hljs-string">&quot;STORED AS PARQUET\n&quot;</span> +<br>                        <span class="hljs-string">&quot;             TBLPROPERTIES (\n&quot;</span> +<br>                        <span class="hljs-comment">// partition-commit.trigger 触发分区提交</span><br>                        <span class="hljs-comment">// process-time 根据处理时间触发</span><br>                        <span class="hljs-comment">// partition-time 根据从事件时间中提取的分区时间触发</span><br>                        <span class="hljs-string">&quot;                    &#x27;sink.partition-commit.trigger&#x27; = &#x27;process-time&#x27;,\n&quot;</span> +<br>                        <span class="hljs-comment">// partition-commit.delay 提交的延迟时间</span><br>                        <span class="hljs-string">&quot;                    &#x27;sink.partition-commit.delay&#x27; = &#x27;0s&#x27;,\n&quot;</span> +<br>                        <span class="hljs-comment">// partition-commit.policy.kind 分区提交策略</span><br>                        <span class="hljs-comment">// metastore 提交到元数据</span><br>                        <span class="hljs-comment">// success-file 写入_success文件到分区目录中</span><br>                        <span class="hljs-string">&quot;                    &#x27;sink.partition-commit.policy.kind&#x27; = &#x27;metastore,success-file&#x27;,\n&quot;</span> +<br>                        <span class="hljs-comment">// time-extractor.timestamp-pattern 指定分区提取器提取时间戳的格式 </span><br>                        <span class="hljs-string">&quot;                    &#x27;partition.time-extractor.timestamp-pattern&#x27;=&#x27;$day 00:00:00&#x27;&quot;</span> +<br>                        <span class="hljs-string">&quot;           )&quot;</span><br>        );<br>        <span class="hljs-comment">// hive 建表完 把方言切换回 DEFAULT</span><br>        tableEnv.getConfig().setSqlDialect(SqlDialect.DEFAULT);<br></code></pre></td></tr></table></figure><h4 id="sink数据到-hive"><a href="#sink数据到-hive" class="headerlink" title="sink数据到 hive"></a>sink数据到 hive</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">TableResult tr = tableEnv.executeSql(<br>                <span class="hljs-string">&quot;INSERT INTO flink.hive_table &quot;</span> +<br>                        <span class="hljs-string">&quot;SELECT &quot;</span> +<br>                        <span class="hljs-string">&quot;col1,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;col2,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;datetime\n&quot;</span> +<br>                        <span class="hljs-string">&quot; from flink.kafka_table A &quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>kafka</tag>
      
      <tag>hive</tag>
      
      <tag>flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tkinter</title>
    <link href="/2022/08/03/tkinter/"/>
    <url>/2022/08/03/tkinter/</url>
    
    <content type="html"><![CDATA[<p>由于会用到 <code>python</code>写一些小工具，使用 <code>tkinter</code>画一些简单的界面</p><p>在此记录一下 <code>tkinter</code> 的一些用法</p><p>一个简单的 <code>tkinter</code>程序至少应包含以下四个部分：</p><ul><li><code>import  tkinter</code></li><li>创建窗口</li><li>添加控件，以及相应的事件函数</li><li>通过<code>mainloop</code>来显示主窗口</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入 tk 包</span><br><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-comment"># 调用Tk()创建主窗口</span><br>root =tk.Tk()<br><span class="hljs-comment">#开启主循环，让窗口处于显示状态</span><br>root.mainloop()<br></code></pre></td></tr></table></figure><h1 id="tkinter窗口"><a href="#tkinter窗口" class="headerlink" title="tkinter窗口"></a>tkinter窗口</h1><p>创建窗口之后</p><p>可以自定义窗口属性</p><p>常见的属性有下面几个:</p><p>我们可以定义 窗口的 标题 Title</p><blockquote><p>root.title()</p></blockquote><p>也可以定义窗口的 大小(长 * 宽) 以及 窗口的位置 （x 坐标 y 坐标）</p><blockquote><p>root.geometry(“400x200+900+200”)</p></blockquote><p>或者 允许<code>tkinter</code>根窗口根据用户需要更改其大小</p><blockquote><p>root.resizable(height = None, width = None)</p></blockquote><p>窗口的属性如下</p><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>window.title(“my title”)</td><td>接受一个字符串参数，为窗口起一个标题</td></tr><tr><td>window.resizable()</td><td>否允许用户拉伸主窗口大小，默认为可更改，当设置为 resizable(0,0)或者resizable(False,False)时不可更改</td></tr><tr><td>window.geometry()</td><td>设定主窗口的大小以及位置，当参数值为 None 时表示获取窗口的大小和位置信息。</td></tr><tr><td>window.quit()</td><td>关闭当前窗口</td></tr><tr><td>window.update()</td><td>刷新当前窗口</td></tr></tbody></table></div>]]></content>
    
    
    
    <tags>
      
      <tag>tkinter</tag>
      
      <tag>python-gui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell获取进程pid</title>
    <link href="/2022/08/03/shell%E8%8E%B7%E5%8F%96%E8%BF%9B%E7%A8%8Bpid/"/>
    <url>/2022/08/03/shell%E8%8E%B7%E5%8F%96%E8%BF%9B%E7%A8%8Bpid/</url>
    
    <content type="html"><![CDATA[<h3 id="查看进程pid"><a href="#查看进程pid" class="headerlink" title="查看进程pid"></a>查看进程pid</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef|grep 进程名 |grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;<br></code></pre></td></tr></table></figure><h3 id="判断进程是否存在"><a href="#判断进程是否存在" class="headerlink" title="判断进程是否存在"></a>判断进程是否存在</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">p_cnt=ps -ef|grep queue |grep -v grep| wc -l<br>if [ $p_cnt -le 0 ]; then<br><span class="hljs-meta">#</span><span class="bash"> 进程不存在</span><br>else<br><span class="hljs-meta">#</span><span class="bash"> 进程存在</span><br>fi<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop常用命令</title>
    <link href="/2022/08/01/hadoop%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/08/01/hadoop%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="hdfs常用命令"><a href="#hdfs常用命令" class="headerlink" title="hdfs常用命令"></a>hdfs常用命令</h2><p>查看文件列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -ls &lt;path&gt;<br></code></pre></td></tr></table></figure><p>递归查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -ls -R &lt;path&gt;<br></code></pre></td></tr></table></figure><p>上传文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -put &lt;localFile&gt; &lt;hdfsPath&gt;<br></code></pre></td></tr></table></figure><p>创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -mkdir &lt;path&gt;<br></code></pre></td></tr></table></figure><p>递归删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -rm -r &lt;path&gt;<br></code></pre></td></tr></table></figure><p>查看空间使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -df -h<br></code></pre></td></tr></table></figure><p>查看文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -cat &lt;file&gt;<br></code></pre></td></tr></table></figure><h2 id="yarn常用命令"><a href="#yarn常用命令" class="headerlink" title="yarn常用命令"></a>yarn常用命令</h2><p>查看yarn job</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn application -list<br></code></pre></td></tr></table></figure><p>kill yarn job</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn application -<span class="hljs-built_in">kill</span> &lt;applicationId&gt;<br></code></pre></td></tr></table></figure><p>查看job状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn application -status &lt;applicationId&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>datanode</title>
    <link href="/2022/07/31/datanode/"/>
    <url>/2022/07/31/datanode/</url>
    
    <content type="html"><![CDATA[<h1 id="DATANODE工作机制"><a href="#DATANODE工作机制" class="headerlink" title="DATANODE工作机制"></a>DATANODE工作机制</h1><h3 id="DataNode启动流程"><a href="#DataNode启动流程" class="headerlink" title="DataNode启动流程"></a>DataNode启动流程</h3><ol><li>DataNode 启动后主动向 NameNode 注册</li><li>注册成功后，NameNode会把DataNode注册在元数据中</li><li>注册成功以后每周期(默认6小时)，DataNode向NameNode上报信息(块完好)</li><li>心跳每3秒一次，心跳返回结果带有NameNode给DataNode的命令,比如复制数据块到另一台机器，或者删除某个数据块等等(DataNode没挂)</li><li>超过10分钟+30秒 收到DataNode 的心跳，则认为该节点不可用，此时NameNode 就不会对该文件块进行读写</li></ol><h3 id="DataNode数据存储"><a href="#DataNode数据存储" class="headerlink" title="DataNode数据存储"></a>DataNode数据存储</h3><p>一个数据块在DataNode上以文件形式存储在磁盘上，包括两个文件</p><ul><li>数据本身</li><li>元数据：数据块的长度、数据块的校验、时间戳</li></ul><h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><p>DN向NN汇报当前解读信息的时间间隔，默认6小时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">dfs.blockreport.intervalMsec<br></code></pre></td></tr></table></figure><p>DN扫描自己节点块信息列表的时间，默认6小时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">dfs.datanode.directoryscan.interval<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hdfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>azkaban接口</title>
    <link href="/2022/07/23/azkaban%E6%8E%A5%E5%8F%A3/"/>
    <url>/2022/07/23/azkaban%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="azkaban接口列表"><a href="#azkaban接口列表" class="headerlink" title="azkaban接口列表"></a>azkaban接口列表</h2><div class="table-container"><table><thead><tr><th>接口</th><th>说明</th></tr></thead><tbody><tr><td><a href="#login">/manager?action=login</a></td><td>登录接口</td></tr></tbody></table></div><hr><h2 id="接口详情"><a href="#接口详情" class="headerlink" title="接口详情"></a>接口详情</h2><ul><li><p><span id = "login">登录接口</span></p><ul><li><p>接口地址：/manager</p></li><li><p>返回格式：Json</p></li><li><p>请求方式：Post</p></li><li><p>请求示例：<a href="https://localhost:8443/manager">https://localhost:8443/manager</a></p></li><li><p>接口备注：This API helps authenticate a user and provides a session.id in response.</p></li><li><p>请求参数说明：</p><p>| 名称         | 类型   | 必填 | 说明     |<br>| —————— | ——— | —— | ———— |<br>| action=login | string | true | 登录参数 |<br>| username     | string | true | 用户名   |<br>| password     | string | true | 用户密码 |</p></li><li><p>返回参数说明：</p><p>| 名称       | 类型   | 说明   |<br>| ————— | ——— | ——— |<br>| status     | int    | 状态码 |<br>| session.id | string | 会话ID |</p></li><li><p>JSON返回示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;status&quot;</span> : <span class="hljs-string">&quot;success&quot;</span>,<br>  <span class="hljs-attr">&quot;session.id&quot;</span> : <span class="hljs-string">&quot;c001aba5-a90f-4daf-8f11-62330d034c0a&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql-date_format()函数</title>
    <link href="/2022/07/23/mysql-date-format-%E5%87%BD%E6%95%B0/"/>
    <url>/2022/07/23/mysql-date-format-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p><strong>DATE_FORMAT()</strong> 函数可以用不同的格式显示日期/时间</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select DATE_FORMAT(date,format);<br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>date</td><td>合法的日期</td></tr><tr><td>format</td><td>规定的日期/时间输出格式</td></tr></tbody></table></div><h3 id="format-格式"><a href="#format-格式" class="headerlink" title="format 格式"></a>format 格式</h3><div class="table-container"><table><thead><tr><th>格式</th><th>说明</th><th>样例</th></tr></thead><tbody><tr><td>%a</td><td>缩写星期名</td><td></td></tr><tr><td>%b</td><td>缩写月名</td><td></td></tr><tr><td>%c</td><td>月,数值</td><td></td></tr><tr><td>%D</td><td>带有英文前缀的月中的天</td><td></td></tr><tr><td>%d</td><td>月的天,数值(00-31)</td><td></td></tr><tr><td>%e</td><td>月的天,数值(0-31)</td><td></td></tr><tr><td>%f</td><td>微秒</td><td></td></tr><tr><td>%H</td><td>小时(00-23)</td><td></td></tr><tr><td>%h</td><td>小时(01-12)</td><td></td></tr><tr><td>%I</td><td>小时(01-12)</td><td></td></tr><tr><td>%i</td><td>分钟(00-59)</td><td></td></tr><tr><td>%j</td><td>年的天(001-366)</td><td></td></tr><tr><td>%k</td><td>小时(0-23)</td><td></td></tr><tr><td>%l</td><td>小时(1-12)</td><td></td></tr><tr><td>%M</td><td>月名</td><td></td></tr><tr><td>%m</td><td>月,数值(00-12)</td><td></td></tr><tr><td>%p</td><td>AM或者PM</td><td></td></tr><tr><td>%r</td><td>时间,12-小时(hh:mm:ss AM 或 PM)</td><td></td></tr><tr><td>%S</td><td>秒(00-59)</td><td></td></tr><tr><td>%s</td><td>秒(00-59)</td><td></td></tr><tr><td>%T</td><td>时间, 24-小时 (hh:mm:ss)</td><td></td></tr><tr><td>%U</td><td>周 (00-53) 星期日是一周的第一天</td><td></td></tr><tr><td>%u</td><td>周 (00-53) 星期一是一周的第一天</td><td></td></tr><tr><td>%V</td><td>周 (01-53) 星期日是一周的第一天，与 %X 使用</td><td></td></tr><tr><td>%v</td><td>周 (01-53) 星期一是一周的第一天，与 %x 使用</td><td></td></tr><tr><td>%W</td><td>星期名</td><td></td></tr><tr><td>%w</td><td>周的天 （0=星期日, 6=星期六）</td><td></td></tr><tr><td>%X</td><td>年，其中的星期日是周的第一天，4 位，与 %V 使用</td><td></td></tr><tr><td>%x</td><td>年，其中的星期一是周的第一天，4 位，与 %v 使用</td><td></td></tr><tr><td>%Y</td><td>年，4 位</td><td></td></tr><tr><td>%y</td><td>年，2 位</td></tr></tbody></table></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>azkaban重启 webserver报没有激活的执行器</title>
    <link href="/2022/07/22/azkaban%E9%87%8D%E5%90%AF-webserver%E6%8A%A5%E6%B2%A1%E6%9C%89%E6%BF%80%E6%B4%BB%E7%9A%84%E6%89%A7%E8%A1%8C%E5%99%A8/"/>
    <url>/2022/07/22/azkaban%E9%87%8D%E5%90%AF-webserver%E6%8A%A5%E6%B2%A1%E6%9C%89%E6%BF%80%E6%B4%BB%E7%9A%84%E6%89%A7%E8%A1%8C%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>azkaban 重启后 webserver报错</p><p>azkaban重启时</p><p>先重启执行器<br>在 /usr/local/azkaban/azkaban-exec-server 目录下执行 bin/start-exec.sh</p><p>在 /usr/local/azkaban/azkaban-web-server 目录下执行 bin/start-exec.sh</p><p>报 :ERROR [ExecutorManager] [main] [Azkaban] No activee executors found</p><p>需要去 Azkaban配置数据库中更新 port=12321的执行器激活数量为1</p><p>update executors set active = 1 where port = 12321</p><p>并且使用接口启用</p><p>curl -G “<a href="http://localhost:12321/executor?action=activate">http://localhost:12321/executor?action=activate</a>“ &amp;&amp; echo</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>azkaban任务一直preparing</title>
    <link href="/2022/07/22/azkaban%E4%BB%BB%E5%8A%A1%E4%B8%80%E7%9B%B4preparing/"/>
    <url>/2022/07/22/azkaban%E4%BB%BB%E5%8A%A1%E4%B8%80%E7%9B%B4preparing/</url>
    
    <content type="html"><![CDATA[<p>内存问题：<br>过滤器会检查 executor 主机空余内存是否会大于 6G，如果不足 6G，则 web-server 会认为 集群资源不够， 不会将任务交由该主机执行，需要修改 azkaban-web下的azkaban.properties配置文件，去掉MinimumFreeMemory</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 原来</span><br><span class="hljs-meta">azkaban.executorselector.filters</span>=<span class="hljs-string">StaticRemainingFlowSize,MinimumFreeMemory,CpuStatus</span><br><br><span class="hljs-comment"># 新</span><br><span class="hljs-meta">azkaban.executorselector.filters</span>=<span class="hljs-string">StaticRemainingFlowSize,CpuStatus</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ssh远程登陆时一些命令无法使用</title>
    <link href="/2022/07/22/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E6%97%B6%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/07/22/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E6%97%B6%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>在180 ssh 到另一台服务器179 执行命令时报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@180 sbin]<span class="hljs-comment"># ssh 179 -p 60022 &quot;mapred --help&quot;</span><br>bash: mapred: 未找到命令<br></code></pre></td></tr></table></figure><br>但实际在179 可以执行该命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@179 sbin]<span class="hljs-comment"># mapred --help</span><br>Usage: mapred [OPTIONS] SUBCOMMAND [SUBCOMMAND OPTIONS]<br>or mapred [OPTIONS] CLASSNAME [CLASSNAME OPTIONS]<br><span class="hljs-built_in">where</span> CLASSNAME is a user-provided Java class<br><br>OPTIONS is none or any of:<br><br>--config dir Hadoop config directory<br>--debug turn on shell script debug mode<br>--<span class="hljs-built_in">help</span> usage information<br><br>SUBCOMMAND is one of:<br><br><br>Admin Commands:<br><br>frameworkuploader mapreduce framework upload<br>hsadmin job <span class="hljs-built_in">history</span> server admin interface<br><br>Client Commands:<br><br>classpath prints the class path needed <span class="hljs-keyword">for</span> running mapreduce subcommands<br>envvars display computed Hadoop environment variables<br>job manipulate MapReduce <span class="hljs-built_in">jobs</span><br>minicluster CLI MiniCluster<br>pipes run a Pipes job<br>queue get information regarding JobQueues<br>sampler sampler<br>version <span class="hljs-built_in">print</span> the version<br><br>Daemon Commands:<br><br>historyserver run job <span class="hljs-built_in">history</span> servers as a standalone daemon<br><br>SUBCOMMAND may <span class="hljs-built_in">print</span> <span class="hljs-built_in">help</span> when invoked w/o parameters or with -h.<br></code></pre></td></tr></table></figure></p><p>这是 ssh 在登录远程的环境变量中不包含可执行文件的路径, 所以要自己加上路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@180 sbin]<span class="hljs-comment"># ssh 179 -p 60022 &quot;/usr/local/hadoop/hadoop-3.2.2/bin/mapred --help&quot;</span><br>Usage: mapred [OPTIONS] SUBCOMMAND [SUBCOMMAND OPTIONS]<br>or mapred [OPTIONS] CLASSNAME [CLASSNAME OPTIONS]<br><span class="hljs-built_in">where</span> CLASSNAME is a user-provided Java class<br><br>OPTIONS is none or any of:<br><br>tput: No value <span class="hljs-keyword">for</span> <span class="hljs-variable">$TERM</span> and no -T specified<br>--config dir Hadoop config directory<br>--debug turn on shell script debug mode<br>--<span class="hljs-built_in">help</span> usage information<br><br>SUBCOMMAND is one of:<br><br><br>Admin Commands:<br><br>tput: No value <span class="hljs-keyword">for</span> <span class="hljs-variable">$TERM</span> and no -T specified<br>frameworkuploader mapreduce framework upload<br>hsadmin job <span class="hljs-built_in">history</span> server admin interface<br><br>Client Commands:<br><br>tput: No value <span class="hljs-keyword">for</span> <span class="hljs-variable">$TERM</span> and no -T specified<br>classpath prints the class path needed <span class="hljs-keyword">for</span> running mapreduce<br>subcommands<br>envvars display computed Hadoop environment variables<br>job manipulate MapReduce <span class="hljs-built_in">jobs</span><br>minicluster CLI MiniCluster<br>pipes run a Pipes job<br>queue get information regarding JobQueues<br>sampler sampler<br>version <span class="hljs-built_in">print</span> the version<br><br>Daemon Commands:<br><br>tput: No value <span class="hljs-keyword">for</span> <span class="hljs-variable">$TERM</span> and no -T specified<br>historyserver run job <span class="hljs-built_in">history</span> servers as a standalone daemon<br><br>SUBCOMMAND may <span class="hljs-built_in">print</span> <span class="hljs-built_in">help</span> when invoked w/o parameters or with -h.<br></code></pre></td></tr></table></figure><p>这样就可以执行了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hdfs组成架构</title>
    <link href="/2022/07/18/hdfs%E7%BB%84%E6%88%90%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/07/18/hdfs%E7%BB%84%E6%88%90%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h3 id="HDFS组成架构"><a href="#HDFS组成架构" class="headerlink" title="HDFS组成架构"></a>HDFS组成架构</h3><ul><li>NameNode(nn): 就是Master, 它是一个主管，管理者<ul><li>管理 HDFS 的名称空间(namespace)</li><li>配置副本策略</li><li>管理数据块(block)映射信息</li><li>处理客户端读写请求</li></ul></li><li>DataNode():就是 Slave.NameNode 下达命令，DataNode执行操作<ul><li>存储实际数据</li><li>执行数据块 读/写 操作‘</li></ul></li><li>Client<ul><li>文件切分,文件上传到 HDFS 的时候，客户端将文件切分成一个一个的 Block</li><li>和 NameNode 交互 获取文件位置信息</li><li>和 DataNode交互，读取或者写入数据</li><li>提供HDFS 管理命令</li></ul></li><li>Secondary NameNode: 并非 NameNode 的热备。当NameNode 挂掉的时候，，并不能马上替换 NameNode并提供服务<ul><li>辅助NameNode ，分担工作量，比如定期合并 Fsimage和 Edits,并推送给NameNode</li><li>紧急情况下，可以辅助恢复 NameNode</li></ul></li></ul><h3 id="HDFS文件块大小"><a href="#HDFS文件块大小" class="headerlink" title="HDFS文件块大小"></a>HDFS文件块大小</h3><p>HDFS 文件在物理上是分块存储(block)，块的大小可以通过配置参数(dfs.blocksize)来规定，默认为 128M</p><h4 id="HDFS块不能设置的太大也不能太小"><a href="#HDFS块不能设置的太大也不能太小" class="headerlink" title="HDFS块不能设置的太大也不能太小"></a>HDFS块不能设置的太大也不能太小</h4><ul><li>如果设置太小，会增加寻址时间，程序一直在找块的开始位置</li><li>如果设置的太大，从磁盘传输数据的时间会明显大于定位这个块开始位置所需的时间，导致程序处理数据会变慢</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>hdfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>346-数据流中的移动平均值</title>
    <link href="/2022/07/16/346-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%9D%87%E5%80%BC/"/>
    <url>/2022/07/16/346-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%9D%87%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode.cn/problems/moving-average-from-data-stream/">346. 数据流中的移动平均值 - 力扣（LeetCode）</a></p><p>给定一个整数数据流和一个窗口大小，根据该滑动窗口的大小，计算其所有整数的移动平均值。</p><p>实现<code>MovingAverage</code> 类：</p><ul><li><code>MovingAverage(int size)</code> 用窗口大小 <code>size</code> 初始化对象。</li><li><code>double next(int val)</code> 计算并返回数据流中最后 <code>size</code> 个值的移动平均值。</li></ul><p>示例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">输入：<br>[<span class="hljs-string">&quot;MovingAverage&quot;</span>, <span class="hljs-string">&quot;next&quot;</span>, <span class="hljs-string">&quot;next&quot;</span>, <span class="hljs-string">&quot;next&quot;</span>, <span class="hljs-string">&quot;next&quot;</span>]<br>[[<span class="hljs-number">3</span>], [<span class="hljs-number">1</span>], [<span class="hljs-number">10</span>], [<span class="hljs-number">3</span>], [<span class="hljs-number">5</span>]]<br>输出：<br>[null, <span class="hljs-number">1.0</span>, <span class="hljs-number">5.5</span>, <span class="hljs-number">4.66667</span>, <span class="hljs-number">6.0</span>]<br><br>解释：<br>MovingAverage movingAverage = new MovingAverage(<span class="hljs-number">3</span>);<br>movingAverage.<span class="hljs-keyword">next</span>(<span class="hljs-number">1</span>); <span class="hljs-regexp">//</span> 返回 <span class="hljs-number">1.0</span> = <span class="hljs-number">1</span> / <span class="hljs-number">1</span><br>movingAverage.<span class="hljs-keyword">next</span>(<span class="hljs-number">10</span>); <span class="hljs-regexp">//</span> 返回 <span class="hljs-number">5.5</span> = (<span class="hljs-number">1</span> + <span class="hljs-number">10</span>) / <span class="hljs-number">2</span><br>movingAverage.<span class="hljs-keyword">next</span>(<span class="hljs-number">3</span>); <span class="hljs-regexp">//</span> 返回 <span class="hljs-number">4.66667</span> = (<span class="hljs-number">1</span> + <span class="hljs-number">10</span> + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span><br>movingAverage.<span class="hljs-keyword">next</span>(<span class="hljs-number">5</span>); <span class="hljs-regexp">//</span> 返回 <span class="hljs-number">6.0</span> = (<span class="hljs-number">10</span> + <span class="hljs-number">3</span> + <span class="hljs-number">5</span>) / <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>提示:</p><ul><li><code>1 &lt;= size &lt;= 1000</code></li><li>$ -10^5 $<code>&lt;=val&lt;=</code> $ 10^5 $</li><li>最多调用<code>next</code>方法  $10^4$ 次</li></ul><p>基于数组的循环队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MovingAverage</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr;<br><span class="hljs-comment">// 调用次数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tempSize;<br><span class="hljs-comment">// 窗口内数据和</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sum;<br><br>    <span class="hljs-comment">/** Initialize your data structure here. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MovingAverage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-comment">// 初始化</span><br>        <span class="hljs-keyword">this</span>.arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">next</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        tempSize++;<br>        sum += val;<br>        <span class="hljs-comment">// 计算游标</span><br>        <span class="hljs-keyword">int</span> index = (tempSize - <span class="hljs-number">1</span>) % arr.length;<br>        <span class="hljs-comment">// 将原数据从窗口中排除</span><br>        <span class="hljs-keyword">if</span>(tempSize &gt; arr.length)&#123;<br>            sum -= arr[index];<br>        &#125;<br>        <span class="hljs-comment">// 游标更新为新数据</span><br>        arr[index] = val;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">double</span>) sum / (tempSize &gt; arr.length ? arr.length : tempSize);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MovingAverage object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MovingAverage obj = new MovingAverage(size);</span><br><span class="hljs-comment"> * double param_1 = obj.next(val);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flink无法用stop-cluster.sh停止</title>
    <link href="/2022/07/16/flink%E6%97%A0%E6%B3%95%E7%94%A8stop-cluster-sh%E5%81%9C%E6%AD%A2/"/>
    <url>/2022/07/16/flink%E6%97%A0%E6%B3%95%E7%94%A8stop-cluster-sh%E5%81%9C%E6%AD%A2/</url>
    
    <content type="html"><![CDATA[<p>使用 <a href="http://stop-cluster.sh/">stop-cluster.sh</a> 关闭 flink 时失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./stop-cluster.sh<br><span class="hljs-comment"># No taskexecutor daemon to stop on host beideng-nj-prod-hadoop-02.</span><br><span class="hljs-comment"># No standalonesession daemon to stop on host beideng-nj-prod-hadoop-02.</span><br></code></pre></td></tr></table></figure><p>但是 ps -ef|grep flink 可以看到 flink 进程<br>访问flink web 界面也正常</p><p>和 hadoop 一样，flink 在启动的时候会将 PID 存放到一个目录中。默认是 /tmp 目录<br>由于 /tmp 目录会定期删除，所以找不到 PID 文件，集群停止失败</p><p>更改 PID 目录即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi flink/bin/config.sh<br><br><span class="hljs-comment"># WARNING !!! , these values are only used if there is nothing else is specified in</span><br><span class="hljs-comment"># conf/flink-conf.yaml</span><br><br>DEFAULT_ENV_PID_DIR=<span class="hljs-string">&quot;/tmp&quot;</span>                          <span class="hljs-comment"># Directory to store *.pid files to</span><br>DEFAULT_ENV_LOG_MAX=10                              <span class="hljs-comment"># Maximum number of old log files to keep</span><br>DEFAULT_ENV_JAVA_OPTS=<span class="hljs-string">&quot;&quot;</span>                            <span class="hljs-comment"># Optional JVM args</span><br>DEFAULT_ENV_JAVA_OPTS_JM=<span class="hljs-string">&quot;&quot;</span>                         <span class="hljs-comment"># Optional JVM args (JobManager)</span><br>DEFAULT_ENV_JAVA_OPTS_TM=<span class="hljs-string">&quot;&quot;</span>                         <span class="hljs-comment"># Optional JVM args (TaskManager)</span><br>DEFAULT_ENV_JAVA_OPTS_HS=<span class="hljs-string">&quot;&quot;</span>                         <span class="hljs-comment"># Optional JVM args (HistoryServer)</span><br>DEFAULT_ENV_JAVA_OPTS_CLI=<span class="hljs-string">&quot;&quot;</span>                        <span class="hljs-comment"># Optional JVM args (Client)</span><br>DEFAULT_ENV_SSH_OPTS=<span class="hljs-string">&quot;&quot;</span>                             <span class="hljs-comment"># Optional SSH parameters running in cluster mode</span><br>DEFAULT_YARN_CONF_DIR=<span class="hljs-string">&quot;&quot;</span>                            <span class="hljs-comment"># YARN Configuration Directory, if necessary</span><br>DEFAULT_HADOOP_CONF_DIR=<span class="hljs-string">&quot;&quot;</span>                          <span class="hljs-comment"># Hadoop Configuration Directory, if necessary</span><br>DEFAULT_HBASE_CONF_DIR=<span class="hljs-string">&quot;&quot;</span>                           <span class="hljs-comment"># HBase Configuration Directory, if necessary</span><br><br> <span class="hljs-comment"># 修改 DEFAULT_ENV_PID_DIR=&quot;/tmp&quot; 地址</span><br> <span class="hljs-comment"># 改为自己指定的地址 如 DEFAULT_ENV_PID_DIR=“/var/run/flink/$USER”</span><br> <span class="hljs-comment"># 再次启动 flink</span><br> ./start-cluster.sh<br> <br> <span class="hljs-comment"># 进入刚才修改的目录</span><br> <span class="hljs-built_in">cd</span> /var/run/flink/<span class="hljs-variable">$USER</span><br> <br> <span class="hljs-comment"># 发现已经生成 PID 文件</span><br> ls<br> <span class="hljs-comment"># flink-root-standalonesession.pid</span><br> <span class="hljs-comment"># flink-root-taskexecutor.pid</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu20.04切换阿里源</title>
    <link href="/2022/07/14/ubuntu20-04%E5%88%87%E6%8D%A2%E9%98%BF%E9%87%8C%E6%BA%90/"/>
    <url>/2022/07/14/ubuntu20-04%E5%88%87%E6%8D%A2%E9%98%BF%E9%87%8C%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h3 id="ubuntu20-04-切换阿里源"><a href="#ubuntu20-04-切换阿里源" class="headerlink" title="ubuntu20.04 切换阿里源"></a>ubuntu20.04 切换阿里源</h3><p>执行</p><blockquote><p>sudo apt install libopencv-dev libeigen3-dev</p></blockquote><p>报错</p><blockquote><p>Err:1 <a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> focal/universe amd64 libfyba0 amd64 4.1.1-6build1<br>  Connection failed [IP: 185.125.190.39 80]<br>Err:2 <a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> focal/universe amd64 libfreexl1 amd64 1.0.5-3<br>  Connection failed [IP: 185.125.190.36 80]<br>E: Failed to fetch <a href="http://archive.ubuntu.com/ubuntu/pool/universe/f/fyba/libfyba0_4.1.1-6build1_amd64.deb">http://archive.ubuntu.com/ubuntu/pool/universe/f/fyba/libfyba0_4.1.1-6build1_amd64.deb</a>  Connection failed [IP: 185.125.190.39 80]<br>E: Failed to fetch <a href="http://archive.ubuntu.com/ubuntu/pool/universe/f/freexl/libfreexl1_1.0.5-3_amd64.deb">http://archive.ubuntu.com/ubuntu/pool/universe/f/freexl/libfreexl1_1.0.5-3_amd64.deb</a>  Connection failed [IP: 185.125.190.36 80]<br>E: Unable to fetch some archives, maybe run apt-get update or try with —fix-missing?</p></blockquote><p>怀疑可能是源的问题，因此考虑换成阿里源再试试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 首先进入目录 备份相关文件</span><br><span class="hljs-built_in">cd</span> /etc/apt<br><br>cp sources.list sources.list.bak<br><br></code></pre></td></tr></table></figure><p>开始准备换源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看系统信息</span><br>lsb_release -a |grep Codename<br><span class="hljs-comment"># 结果如下</span><br><span class="hljs-comment"># No LSB modules are available.</span><br><span class="hljs-comment"># Codename:       focal</span><br></code></pre></td></tr></table></figure><blockquote><p>注意: Codename  :  focal </p></blockquote><p>阿里源配置模板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.aliyun.com/ubuntu/ $Codename main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ $Codename main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ $Codename-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ $Codename-security main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ $Codename-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ $Codename-updates main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ $Codename-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ $Codename-proposed main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ $Codename-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ $Codename-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>我们需要将 <strong>$Codename</strong> 替换为上面的 focal</p><p>替换后如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>替换完成后</p><blockquote><p> sudo apt-get update</p></blockquote><p>再执行</p><blockquote><p>sudo apt install libopencv-dev libeigen3-dev</p></blockquote><p>成功安装</p>]]></content>
    
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>513-找树左下角的值</title>
    <link href="/2022/06/22/513-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/"/>
    <url>/2022/06/22/513-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">513. 找树左下角的值 - 力扣（LeetCode）</a></p><p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，请找出该二叉树的 <strong>最底层 最左边</strong> 节点的值。</p><p>假设二叉树中至少有一个节点。</p><h3 id="1-层序遍历"><a href="#1-层序遍历" class="headerlink" title="1.层序遍历"></a>1.层序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for a binary tree node.</span><br><span class="hljs-comment">     * public class TreeNode &#123;</span><br><span class="hljs-comment">     * int val;</span><br><span class="hljs-comment">     * TreeNode left;</span><br><span class="hljs-comment">     * TreeNode right;</span><br><span class="hljs-comment">     * TreeNode() &#123;&#125;</span><br><span class="hljs-comment">     * TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment">     * TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment">     * this.val = val;</span><br><span class="hljs-comment">     * this.left = left;</span><br><span class="hljs-comment">     * this.right = right;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        Queue&lt;TreeNode&gt; treeNodeQueue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        treeNodeQueue.offer(root);<br>        <span class="hljs-keyword">int</span> res = root.val;<br>        <span class="hljs-keyword">while</span> (!treeNodeQueue.isEmpty()) &#123;<br>            <span class="hljs-comment">// 记录每层数量</span><br>            <span class="hljs-keyword">int</span> size = treeNodeQueue.size();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                TreeNode curNode = treeNodeQueue.poll();<br>                <span class="hljs-comment">// 取每层第一个</span><br>                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;<br>                    res = curNode.val;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (curNode.left != <span class="hljs-keyword">null</span>) &#123;<br>                    treeNodeQueue.offer(curNode.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (curNode.right != <span class="hljs-keyword">null</span>) &#123;<br>                    treeNodeQueue.offer(curNode.right);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 最后一层的第一个就是结果</span><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建hive-udf</title>
    <link href="/2022/06/22/%E5%88%9B%E5%BB%BAhive-udf/"/>
    <url>/2022/06/22/%E5%88%9B%E5%BB%BAhive-udf/</url>
    
    <content type="html"><![CDATA[<h3 id="1-自定义-UDF-函数"><a href="#1-自定义-UDF-函数" class="headerlink" title="1.自定义 UDF 函数"></a>1.自定义 UDF 函数</h3><p>pom 中添加下面依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hive<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hive-exec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 不需要打入jar包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></p><blockquote><p>由于  hive  环境中已经有了  hive-exec jar包 所以打包时，不需要将hive-exec 打入</p></blockquote><p>新建一个类 继承 UDF 即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 继承UDF类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUDF</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UDF</span> </span>&#123;<br><span class="hljs-comment">// 实现evaluate方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">evaluate</span><span class="hljs-params">(String str)</span> </span>&#123;<br>        <span class="hljs-comment">// 自定义逻辑</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在这个类中，方法名一定要为 <strong>evaluate</strong></p><h3 id="2-打包上传"><a href="#2-打包上传" class="headerlink" title="2.打包上传"></a>2.打包上传</h3><p>在 maven 中打包<br>找到刚才的 jar 包<br>上传到 hive 所在服务器</p><p>将jar包移动到  hive目录下的auxlib目录</p><p>然后重启hiveserver2</p><h3 id="3-注册函数"><a href="#3-注册函数" class="headerlink" title="3.注册函数"></a>3.注册函数</h3><p>将jar包注册到hive中后，就可以注册刚才自己编写的udf函数了</p><p>一般需要先注册临时函数，因为UDF开发完成后，需要进过一些测试才能确认代码是否没有问题。在测试UDF代码时，务必使用临时函数进行测试。这样即使代码出现了问题，也不会把函数真正的注册到Hive。代码测试完毕并且确认无误后，再将函数注册为永久函数</p><p>HIVE 函数相关<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建临时函数<br><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">FUNCTION</span> <span class="hljs-operator">&lt;</span>函数名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">AS</span> <span class="hljs-operator">&lt;</span>class全路径<span class="hljs-operator">&gt;</span>;<br># 删除临时函数<br><span class="hljs-keyword">DROP</span> TEMPORARY <span class="hljs-keyword">FUNCTION</span> [IF <span class="hljs-keyword">EXISTS</span>] <span class="hljs-operator">&lt;</span>函数名<span class="hljs-operator">&gt;</span>;<br><br><br># 创建永久函数<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> [db_name.]function_name <span class="hljs-keyword">AS</span> class_name<br>  [<span class="hljs-keyword">USING</span> JAR<span class="hljs-operator">|</span>FILE<span class="hljs-operator">|</span>ARCHIVE <span class="hljs-string">&#x27;file_uri&#x27;</span> [, JAR<span class="hljs-operator">|</span>FILE<span class="hljs-operator">|</span>ARCHIVE <span class="hljs-string">&#x27;file_uri&#x27;</span>] ];<br># 删除永久函数<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> [IF <span class="hljs-keyword">EXISTS</span>] function_name;<br><br><br># 查看函数<br><span class="hljs-keyword">show</span>  functions;<br><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive权限相关命令</title>
    <link href="/2022/06/22/hive%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/06/22/hive%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看当前用户</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">current_user</span>();<br> <br> <br><span class="hljs-comment">-- 查看当前角色</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">current</span> roles;<br> <br> <br><span class="hljs-comment">-- 切换 admin 角色</span><br><span class="hljs-keyword">set</span> role admin;<br> <br><span class="hljs-comment">-- 查看所有角色</span><br><span class="hljs-keyword">show</span> roles;<br> <br> <br> <br><span class="hljs-comment">--  查看用户的角色</span><br>show role grant user &#123;userName&#125;;<br> <br> <br> <br> <br><span class="hljs-comment">-- 把角色授权给某个用户</span><br>grant role &#123;roleName&#125; to user &#123;userName&#125;;<br> <br> <br> <br> <br><span class="hljs-comment">-- 撤销某个用户的角色授权</span><br>revoke role &#123;roleName&#125; from user &#123;userName&#125;;<br> <br> <br> <br> <br> <br> <br><span class="hljs-comment">-- 创建角色</span><br>create role &#123;roleName&#125;;<br> <br> <br> <br> <br><span class="hljs-comment">-- 删除角色</span><br>drop role &#123;roleName&#125;;<br> <br> <br><span class="hljs-comment">-- 授予某个库的权限给某个用户</span><br>grant select on database &#123;dbName&#125; to user &#123;userName&#125;;<br>grant insert on database &#123;dbName&#125; to user &#123;userName&#125;;<br>grant update on database &#123;dbName&#125; to user &#123;userName&#125;;<br>grant delete on database &#123;dbName&#125; to user &#123;userName&#125;;<br> <br><span class="hljs-comment">-- 回收某个库的权限给某个用户</span><br>revoke select on database &#123;dbName&#125; from user &#123;userName&#125;;<br>revoke insert on database &#123;dbName&#125; from user &#123;userName&#125;;<br>revoke update on database &#123;dbName&#125; from user &#123;userName&#125;;<br>revoke delete on database &#123;dbName&#125; from user &#123;userName&#125;;<br> <br><span class="hljs-comment">-- 查看指定用户在所有库下面的权限</span><br>show grant user &#123;userName&#125;;<br><span class="hljs-comment">-- 查看指定用户在某个库的权限</span><br>show grant user &#123;userName&#125; on database &#123;dbName&#125;;<br> <br> <br> <br> <br> <br> <br><span class="hljs-comment">-- 授予表的权限给某个用户</span><br>grant select on table &#123;dbName&#125;.tableName to user &#123;userName&#125;;<br>grant insert on table &#123;dbName&#125;.tableName to user &#123;userName&#125;;<br>grant update on table &#123;dbName&#125;.tableName to user &#123;userName&#125;;<br>grant delete on table &#123;dbName&#125;.tableName to user &#123;userName&#125;;<br> <br> <br><span class="hljs-comment">-- 回收某个用户的表的权限</span><br>revoke create on table &#123;dbName&#125;.tableName from user &#123;userName&#125;;<br>revoke select on table &#123;dbName&#125;.tableName from user &#123;userName&#125;;<br>revoke insert on table &#123;dbName&#125;.tableName from user &#123;userName&#125;;<br>revoke update on table &#123;dbName&#125;.tableName from user &#123;userName&#125;;<br>revoke delete on table &#123;dbName&#125;.tableName from user &#123;userName&#125;;<br> <br><span class="hljs-comment">-- 查看指定用户在指定表的权限</span><br>show grant user &#123;userName&#125; on table &#123;dbName&#125;.&#123;tableName&#125;;<br> <br> <br> <br> <br> <br><span class="hljs-comment">-- 权限类别</span><br><span class="hljs-comment">-- ALTER  更改表结构，创建分区</span><br><span class="hljs-comment">-- CREATE  创建表</span><br><span class="hljs-comment">-- DROP  删除表，或分区</span><br><span class="hljs-comment">-- INDEX  创建和删除索引</span><br><span class="hljs-comment">-- LOCK  锁定表，保证并发</span><br><span class="hljs-comment">-- SELECT  查询表权限</span><br><span class="hljs-comment">-- SHOW_DATABASE  查看数据库权限</span><br><span class="hljs-comment">-- UPDATE  为表加载本地数据的权限</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yarn配置</title>
    <link href="/2022/06/21/yarn%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/06/21/yarn%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="Capacity-Scheduler（容量调度器）"><a href="#Capacity-Scheduler（容量调度器）" class="headerlink" title="Capacity Scheduler（容量调度器）"></a>Capacity Scheduler（容量调度器）</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.capacity.maximum-am-resource-percent<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>0.8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p> maximum-am-resource-percent：集群中用于运行应用程序ApplicationMaster的资源比例上限，该参数通常用于限制处于活动状态的应用程序数目。所有队列的ApplicationMaster资源比例上限可通过参数yarn.scheduler.capacity.maximum-am-resource-percent设置，而单个队列可通过参数yarn.scheduler.capacity.<queue-path>.maximum-am-resource-percent设置适合自己的值</p></blockquote><h3 id="节点级别"><a href="#节点级别" class="headerlink" title="节点级别"></a>节点级别</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：每个节点可用的最大内存，RM中的两个值不应该超过此值。此数值可以用于计算container最大数目，即：用此值除以RM中的最小容器内存。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.resource.cpu-vcores<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>每个节点总的可用虚拟CPU个数。 默认值：8</p><blockquote><p>目前推荐将该值设值为与物理CPU核数数目相同。如果你的节点CPU核数不够8个，则需要调减小这个值，而YARN不会智能的探测节点的物理CPU总数</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-pmem-ratio<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>Ratio between virtual memory to physical memory when setting memory limits for containers. Container allocations are expressed in terms of physical memory, and virtual memory usage is allowed to exceed this allocation by this ratio.</p><p>每单位的物理内存总量对应的虚拟内存量，默认是2.1，表示每使用1MB的物理内存，最多可以使用2.1MB的虚拟内存总量。</p></blockquote><h3 id="容器级别"><a href="#容器级别" class="headerlink" title="容器级别"></a>容器级别</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>8192<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1024<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：单个容器可申请的最小与最大内存，应用在运行申请内存时不能超过最大值，小于最小值则分配最小值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-vcores<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-vcores<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：单个容器可申请的最小/最大虚拟CPU个数。比如设置为1和4，则运行MapRedce作业时，每个Task最少可申请1个虚拟CPU，最多可申请4个虚拟CPU。</p></blockquote><p>AM内存配置相关参数，此处以MapReduce为例进行说明（这两个值是AM特性，应在mapred-site.xml中配置），如下：</p><blockquote><p>mapreduce.map.memory.mb<br>mapreduce.reduce.memory.mb</p></blockquote><p>说明：这两个参数指定用于MapReduce的两个任务（Map and Reduce task）的内存大小，其值应该在RM中的最大最小container之间。如果没有配置则通过如下简单公式获得：</p><blockquote><p>max(MIN_CONTAINER_SIZE, (Total Available RAM) / containers))</p></blockquote><p>一般的reduce应该是map的2倍。注：这两个值可以在应用启动时通过参数改变；</p><p>AM中其它与内存相关的参数，还有JVM相关的参数，这些参数可以通过，如下选项配置：</p><blockquote><p>mapreduce.map.java.opts<br>mapreduce.reduce.java.opts</p></blockquote><p>说明：这两个参主要是为需要运行JVM程序（java、scala等）准备的，通过这两个设置可以向JVM中传递参数的，与内存有关的是，-Xmx，-Xms等选项。此数值大小，应该在AM中的map.mb和reduce.mb之间。</p>]]></content>
    
    
    
    <tags>
      
      <tag>yarn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell输出重定向</title>
    <link href="/2022/06/21/shell%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <url>/2022/06/21/shell%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h2 id="Shell输出重定向"><a href="#Shell输出重定向" class="headerlink" title="Shell输出重定向"></a>Shell输出重定向</h2><blockquote><p>/dev/null</p></blockquote><p>是一个特殊的设备文件，这个文件接收到任何数据都会被丢弃。因此，null 这个设备通常也被称为位桶（bit bucket）或黑洞。</p><p>常见的 重定向</p><blockquote><p>/dev/null 2&gt;&amp;1</p></blockquote><p>含义为 :<br>将 <strong>标准输出</strong> 和 <strong>错误输出</strong> 都 输出到 <strong>黑洞</strong><br>其实质是 </p><blockquote><p>1  &gt;  /dev/null  2&gt;&amp;1</p></blockquote><ul><li>1 代表 标准输出 </li><li>2 代表 错误输出</li><li>/dev/null 2&gt;&amp;1 这里省略了 开头的1</li></ul><p>表示为:</p><ol><li>原本 <strong>1(标准输出)</strong> 输出到 <strong>屏幕</strong></li><li><strong>1&gt;/dev/null</strong> 将 <strong>1(标准输出)</strong> 输出到 <strong>黑洞</strong></li><li><strong>2&gt;&amp;1</strong> 将 <strong>2(错误输出)</strong> 输出到 <strong>1(标准输出)</strong>,此时因为 <strong>1(标准输出)</strong>  输出到 <strong>黑洞</strong> 了，所以 <strong>2(错误输出)</strong> 也输出到了 <strong>黑洞</strong></li></ol><p>以此类推</p><blockquote><p>2&gt;/dev/null</p></blockquote><p>把 <strong>2(错误输出)</strong> 输出到 <strong>黑洞</strong>，<strong>1(标准输出)</strong> 打印到 <strong>屏幕</strong></p><blockquote><p>2&gt;&amp;1 &gt;/dev/null</p></blockquote><p>把 <strong>2(错误输出)</strong> 输出到 <strong>屏幕</strong>，<strong>1(标准输出)</strong> 打印到 <strong>黑洞</strong> </p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库连接工具类</title>
    <link href="/2022/06/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2022/06/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="mysql数据库连接类"><a href="#mysql数据库连接类" class="headerlink" title="mysql数据库连接类"></a>mysql数据库连接类</h2><p>首先在maven项目的 pom 文件添加以下依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>java 代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 数据库连接工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xxzuo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span>: 1293378490@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/17 14:42</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbUtils</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DruidDataSource dataSource;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/xxxxx&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-comment">//设置初始化连接数，最大连接数，最小闲置数</span><br>        dataSource.setInitialSize(<span class="hljs-number">10</span>);<br>        dataSource.setMaxActive(<span class="hljs-number">50</span>);<br>        dataSource.setMinIdle(<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">//返回连接</span><br>        <span class="hljs-keyword">return</span>  dataSource.getConnection();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">(String jdbc, String userName, String password)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(jdbc);<br>        dataSource.setUsername(userName);<br>        dataSource.setPassword(password);<br>        <span class="hljs-comment">//设置初始化连接数，最大连接数，最小闲置数</span><br>        dataSource.setInitialSize(<span class="hljs-number">10</span>);<br>        dataSource.setMaxActive(<span class="hljs-number">50</span>);<br>        dataSource.setMinIdle(<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">//返回连接</span><br>        <span class="hljs-keyword">return</span>  dataSource.getConnection();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>调用方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> (Connection connection = DbUtils.getConnection()) &#123;<br>        String sql = <span class="hljs-string">&quot;SELECT COL_NAME FROM TABLE_NAME&quot;</span>;<br>        PreparedStatement preparedStatement = connection.prepareStatement(sql);<br>        ResultSet rs = preparedStatement.executeQuery();<br>        <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>            rs.getString(<span class="hljs-string">&quot;COL_NAME&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive-ip地理信息查询</title>
    <link href="/2022/06/20/hive-ip%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/"/>
    <url>/2022/06/20/hive-ip%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="HIVE-UDF-IP查询"><a href="#HIVE-UDF-IP查询" class="headerlink" title="HIVE UDF IP查询"></a>HIVE UDF IP查询</h1><p>利用 hive-udf 自定义 IP 查询函数</p><p>借助 ipip 提供的 ipdb</p><p><a href="https://www.ipip.net/product/ip.html#ipv4city">https://www.ipip.net/product/ip.html#ipv4city</a><br>将 .ipdb 文件放在 resources 目录下</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> net.ipip.ipdb.City;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentException;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.metadata.HiveException;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.udf.generic.GenericUDF;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector;<br> <br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: ip查询城市</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xxzuo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span>: 1293378490@qq.com</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IpLocationCity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GenericUDF</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> City IPDB;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> StringObjectInspector allCgi;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Initialize this GenericUDF. This will be called once and only once per</span><br><span class="hljs-comment">     * GenericUDF instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arguments The ObjectInspector for the arguments</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The ObjectInspector for the return value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> UDFArgumentException Thrown when arguments have wrong types, wrong length, etc.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ObjectInspector <span class="hljs-title">initialize</span><span class="hljs-params">(ObjectInspector[] arguments)</span> <span class="hljs-keyword">throws</span> UDFArgumentException </span>&#123;<br>        ObjectInspector arg = arguments[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (arguments.length != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UDFArgumentLengthException(<br>                    <span class="hljs-string">&quot;The operator &#x27;SubstrCgi&#x27; accepts one arguments.&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            IPDB = <span class="hljs-keyword">new</span> City(<span class="hljs-keyword">this</span>.getClass().getResourceAsStream(<span class="hljs-string">&quot;/ipipfree.ipdb&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        &#125;<br>        <span class="hljs-keyword">this</span>.allCgi = (StringObjectInspector) arg;<br>        <span class="hljs-keyword">return</span> PrimitiveObjectInspectorFactory.javaStringObjectInspector;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Evaluate the GenericUDF with the arguments.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arguments The arguments as DeferedObject, use DeferedObject.get() to get the</span><br><span class="hljs-comment">     *                  actual argument Object. The Objects can be inspected by the</span><br><span class="hljs-comment">     *                  ObjectInspectors passed in the initialize call.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">evaluate</span><span class="hljs-params">(GenericUDF.DeferredObject[] arguments)</span> <span class="hljs-keyword">throws</span> HiveException </span>&#123;<br>        String cgi = allCgi.getPrimitiveJavaObject(arguments[<span class="hljs-number">0</span>].get());<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> == cgi) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        String ipInfo = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ipInfo = IPDB.find(cgi.toString(), <span class="hljs-string">&quot;CN&quot;</span>)[<span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ipInfo;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get the String to be displayed in explain.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> children</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDisplayString</span><span class="hljs-params">(String[] children)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Usage: SubstrCgi(String cgi)&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python按行切割文件</title>
    <link href="/2022/06/20/python%E6%8C%89%E8%A1%8C%E5%88%87%E5%89%B2%E6%96%87%E4%BB%B6/"/>
    <url>/2022/06/20/python%E6%8C%89%E8%A1%8C%E5%88%87%E5%89%B2%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="利用python-按行分割文件"><a href="#利用python-按行分割文件" class="headerlink" title="利用python 按行分割文件"></a>利用python 按行分割文件</h1><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> filedialog<br><span class="hljs-keyword">from</span> tkinter.messagebox <span class="hljs-keyword">import</span> showinfo, showwarning, showerror<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mkSubFile</span>(<span class="hljs-params">lines, head, srcName, sub</span>):</span><br>    [des_filename, extname] = os.path.splitext(srcName)<br>    filename = des_filename + <span class="hljs-string">&#x27;_&#x27;</span> + <span class="hljs-built_in">str</span>(sub) + extname<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;make file: %s&#x27;</span> % filename)<br>    fout = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>)<br> <br>    <span class="hljs-keyword">try</span>:<br>        fout.writelines([head])<br>        fout.writelines(lines)<br>        <span class="hljs-keyword">return</span> sub + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">finally</span>:<br>        fout.close()<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">splitByLineCount</span>(<span class="hljs-params">filename, count</span>):</span><br>    fin = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        head = fin.readline()<br>        buf = []<br>        sub = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fin:<br>            buf.append(line)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(buf) == count:<br>                sub = mkSubFile(buf, head, filename, sub)<br>                buf = []<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(buf) != <span class="hljs-number">0</span>:<br>            sub = mkSubFile(buf, head, filename, sub)<br>    <span class="hljs-keyword">finally</span>:<br>        fin.close()<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init</span>():</span><br>    entryNum[<span class="hljs-string">&#x27;state&#x27;</span>] = <span class="hljs-string">&quot;disable&quot;</span><br>    btnConfirm[<span class="hljs-string">&#x27;state&#x27;</span>] = <span class="hljs-string">&quot;normal&quot;</span><br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">confirm</span>():</span><br>    f_path = filedialog.askopenfilename()<br>    inputFilePath.<span class="hljs-built_in">set</span>(f_path)<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clear</span>():</span><br>    inputFilePath.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    row.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;&quot;</span>)<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">startSplitFile</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(inputFilePath.get()) == <span class="hljs-number">0</span>:<br>        showwarning(title=<span class="hljs-string">&quot;警告&quot;</span>,<br>                    message=<span class="hljs-string">&quot;未选择文件路径!&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(row.get()) &lt;= <span class="hljs-number">0</span>:<br>            showwarning(title=<span class="hljs-string">&quot;警告&quot;</span>,<br>                        message=<span class="hljs-string">&quot;输入的不是正整数!&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">except</span>:<br>        showwarning(title=<span class="hljs-string">&quot;警告&quot;</span>,<br>                    message=<span class="hljs-string">&quot;输入的不是整数!&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    count = <span class="hljs-built_in">int</span>(row.get())<br>    begin = time.time()<br>    splitByLineCount(inputFilePath.get(), count)<br>    end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;time is %d seconds &#x27;</span> % (end - begin))<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">closeWindow</span>():</span><br>    root.destroy()<br> <br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    root = tk.Tk()<br>    root.title(<span class="hljs-string">&quot;File Split&quot;</span>)<br>    root.resizable(<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>)<br>    root.geometry(<span class="hljs-string">&quot;600x100+480+320&quot;</span>)<br> <br>    mess = tk.Label(root, text=<span class="hljs-string">&quot;请选择要切分的文件：&quot;</span>)<br>    mess.place(x=<span class="hljs-number">20</span>, y=<span class="hljs-number">10</span>, width=<span class="hljs-number">200</span>, height=<span class="hljs-number">20</span>)<br> <br>    inputFilePath = tk.StringVar(root, value=<span class="hljs-string">&#x27;&#x27;</span>)<br>    entryNum = tk.Entry(root, width=<span class="hljs-number">80</span>, textvariable=inputFilePath)<br>    entryNum.place(x=<span class="hljs-number">220</span>, y=<span class="hljs-number">10</span>, width=<span class="hljs-number">260</span>, height=<span class="hljs-number">20</span>)<br> <br>    btnConfirm = tk.Button(root, text=<span class="hljs-string">&#x27;选择文件&#x27;</span>, command=confirm)<br>    btnConfirm.place(x=<span class="hljs-number">500</span>, y=<span class="hljs-number">10</span>, width=<span class="hljs-number">70</span>, height=<span class="hljs-number">20</span>)<br> <br>    mess1 = tk.Label(root, text=<span class="hljs-string">&quot;请输入切分的文件行数：&quot;</span>)<br>    mess1.place(x=<span class="hljs-number">20</span>, y=<span class="hljs-number">40</span>, width=<span class="hljs-number">200</span>, height=<span class="hljs-number">20</span>)<br> <br>    row = tk.StringVar(root, value=<span class="hljs-string">&#x27;&#x27;</span>)<br>    entryNum1 = tk.Entry(root, width=<span class="hljs-number">80</span>, textvariable=row)<br>    entryNum1.place(x=<span class="hljs-number">220</span>, y=<span class="hljs-number">40</span>, width=<span class="hljs-number">200</span>, height=<span class="hljs-number">20</span>)<br> <br>    btnStart = tk.Button(root, text=<span class="hljs-string">&#x27;清空&#x27;</span>, command=clear)<br>    btnStart.place(x=<span class="hljs-number">260</span>, y=<span class="hljs-number">70</span>, width=<span class="hljs-number">70</span>, height=<span class="hljs-number">20</span>)<br> <br>    btnSet = tk.Button(root, text=<span class="hljs-string">&#x27;开始切分&#x27;</span>, command=startSplitFile)<br>    btnSet.place(x=<span class="hljs-number">125</span>, y=<span class="hljs-number">70</span>, width=<span class="hljs-number">70</span>, height=<span class="hljs-number">20</span>)<br> <br>    init()<br>    root.protocol(<span class="hljs-string">&quot;WM_DELETE_WINDOW&quot;</span>, closeWindow)<br>    root.mainloop()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop磁盘空间清理</title>
    <link href="/2022/06/20/hadoop%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%B8%85%E7%90%86/"/>
    <url>/2022/06/20/hadoop%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%B8%85%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>查看linux磁盘空间大文件</p><blockquote><p>du -h / —max-depth=5 | sort -hr | head -n 10</p></blockquote><p>查看hadoop大文件</p><blockquote><p>hdfs dfs -du -h  /</p></blockquote><p>分析其中占用空间过多的文件是否可以删除</p>]]></content>
    
    
    
    <tags>
      
      <tag>hadoop</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop作业查询与关闭</title>
    <link href="/2022/06/20/hadoop%E4%BD%9C%E4%B8%9A%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%85%B3%E9%97%AD/"/>
    <url>/2022/06/20/hadoop%E4%BD%9C%E4%B8%9A%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%85%B3%E9%97%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="hadoop作业的查询和关闭"><a href="#hadoop作业的查询和关闭" class="headerlink" title="hadoop作业的查询和关闭"></a>hadoop作业的查询和关闭</h1><ul><li><h3 id="hadoop-version-lt-2-3-0"><a href="#hadoop-version-lt-2-3-0" class="headerlink" title="hadoop version &lt;   2.3.0"></a>hadoop version &lt;   2.3.0</h3></li></ul><p>查看正在运行的 Hadoop 任务：</p><blockquote><p>hadoop job -list </p></blockquote><p>关闭Hadoop 任务进程：</p><blockquote><p>hadoop job -kill $jobId </p></blockquote><p>组合以上两条命令就可以实现 kill 掉指定用户的 job</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in `hadoop job -list | grep -w username| awk &#x27;&#123;print $1&#125;&#x27; | grep job_`; <br>do <br>hadoop job -kill $i; <br>done<br></code></pre></td></tr></table></figure><p>username 就是你希望关闭 Hadoop 任务的用户</p><ul><li><h3 id="hadoop-version-gt-2-3-0"><a href="#hadoop-version-gt-2-3-0" class="headerlink" title="hadoop version &gt;= 2.3.0"></a>hadoop version &gt;= 2.3.0</h3></li></ul><p>查看正在运行的 Hadoop 任务：</p><blockquote><p>yarn application -list </p></blockquote><p>关闭 Hadoop 任务进程：</p><blockquote><p>yarn application -kill $ApplicationId</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>hadoop</tag>
      
      <tag>yarn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive 中文乱码</title>
    <link href="/2022/06/16/hive-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <url>/2022/06/16/hive-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="hive-中文乱码"><a href="#hive-中文乱码" class="headerlink" title="hive 中文乱码"></a>hive 中文乱码</h1><h2 id="修改元数据库字符集"><a href="#修改元数据库字符集" class="headerlink" title="修改元数据库字符集"></a>修改元数据库字符集</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改表字段 注解 和 表 注解</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> COLUMNS_V2 MODIFY <span class="hljs-keyword">COLUMN</span> COMMENT <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 ;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TABLE_PARAMS MODIFY <span class="hljs-keyword">COLUMN</span> PARAM_VALUE <span class="hljs-type">varchar</span>(<span class="hljs-number">4000</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 ;<br><span class="hljs-comment">-- 修改分区字段注解</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> PARTITION_PARAMS MODIFY <span class="hljs-keyword">COLUMN</span> PARAM_VALUE <span class="hljs-type">varchar</span>(<span class="hljs-number">4000</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 ;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> PARTITION_KEYS MODIFY <span class="hljs-keyword">COLUMN</span> PKEY_COMMENT <span class="hljs-type">varchar</span>(<span class="hljs-number">4000</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 ;<br><span class="hljs-comment">-- 修改索引注解</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> INDEX_PARAMS MODIFY <span class="hljs-keyword">COLUMN</span> PARAM_VALUE <span class="hljs-type">varchar</span>(<span class="hljs-number">4000</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 ;<br><span class="hljs-comment">-- 修改 数据库 注解</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> DBS MODIFY <span class="hljs-keyword">COLUMN</span> `<span class="hljs-keyword">DESC</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">4000</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 ;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es on hive</title>
    <link href="/2022/06/16/es-on-hive/"/>
    <url>/2022/06/16/es-on-hive/</url>
    
    <content type="html"><![CDATA[<h1 id="es-on-hive"><a href="#es-on-hive" class="headerlink" title="es on hive"></a>es on hive</h1><p>参考<a href="https://www.elastic.co/guide/en/elasticsearch/hadoop/current/hive.html">https://www.elastic.co/guide/en/elasticsearch/hadoop/current/hive.html</a></p><p>1.首先在官网下载jar包，解压到hive/lib目录下 <a href="https://www.elastic.co/cn/downloads/hadoop">Download Elasticsearch for Hadoop Free | Elastic</a> </p><p>2.hive server执行时，添加参数 </p><blockquote><p>hive.aux.jars.path=/path/elasticsearch-hadoop.jar </p></blockquote><p>或者修改 hive-site.xml 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hive.aux.jars.path<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/path/elasticsearch-hadoop.jar<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>A comma separated list (with no spaces) of the jar files<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.创建hive表，用于映射 es</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">external</span> <span class="hljs-keyword">table</span> test.es_msg <br>(     <br>    chatType     string,     <br>    fromAccount  string,     <br>    msgTimestamp <span class="hljs-type">bigint</span>,     <br>    toAccount    string <br>)    stored <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;org.elasticsearch.hadoop.hive.EsStorageHandler&#x27;</span>    <br>tblproperties (         <br>    <span class="hljs-string">&#x27;es.resource&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;chat1/_doc&#x27;</span>,         <br>    <span class="hljs-string">&#x27;es.nodes&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;192.168.2.146&#x27;</span>,        <br>    &quot;es.nodes.wan.only&quot; <span class="hljs-operator">=</span> &quot;true&quot;,         <br>    <span class="hljs-string">&#x27;es.transport.port&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;9200&#x27;</span>,         <br>    <span class="hljs-string">&#x27;es.mapping.names&#x27;</span> <span class="hljs-operator">=</span>                <br>    <span class="hljs-string">&#x27;chatType:chatType ,fromAccount:fromAccount, msgTimestamp:msgTimestamp, toAccount:toAccount&#x27;</span>         <br>);<br></code></pre></td></tr></table></figure><p>4.取出es数据</p><p>对hive表进行 </p><p>insert overwrite table xxx </p><p>select * from xxx;即可取出数据</p><p>hive表配置</p><p>tblproperties</p><p>参考<a href="https://www.elastic.co/guide/en/elasticsearch/hadoop/current/configuration.html">Configuration | Elasticsearch for Apache Hadoop [7.13] | Elastic</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hive</tag>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索技巧1</title>
    <link href="/2022/05/23/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A71/"/>
    <url>/2022/05/23/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A71/</url>
    
    <content type="html"><![CDATA[<h1 id="利用数组确定搜索方向"><a href="#利用数组确定搜索方向" class="headerlink" title="利用数组确定搜索方向"></a>利用数组确定搜索方向</h1><p>我们可以新建方向数组，这样 dfs 里不用自己手写搜索方向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] dx = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span>[] dy = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>; n&lt; <span class="hljs-number">4</span>; n++)&#123;<br>    <span class="hljs-keyword">int</span> nx = i + dx[n];<br>    <span class="hljs-keyword">int</span> ny = j + dy[n];<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer-03-数组中重复的数字</title>
    <link href="/2021/06/17/%E5%89%91%E6%8C%87offer-03-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2021/06/17/%E5%89%91%E6%8C%87offer-03-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>找出数组中重复的数字。</p><p>在一个长度为<code>n</code> 的数组 <code>nums</code>里的所有数字都在 <code>0</code>～<code>n-1</code> 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例1：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：<br><span class="hljs-string">[2, 3, 1, 0, 2, 5, 3]</span><br>输出：<span class="hljs-number">2</span> 或 <span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure><p>需要考虑到时间复杂度和空间复杂度的要求</p><p>如果要求时间复杂度，可以考虑用hash table.(时间复杂度 <code>O(N)</code>   空间复杂度 <code>O(N)</code>)</p><p>如果要求空间复杂度，可以先排序，再看前后有无重复数字.(时间复杂度 <code>O(Nlog(N))</code>   空间复杂度 <code>O(1)</code>)</p><p>如果都有要求，考虑原地置换法 .(时间复杂度 <code>O(N)</code>   空间复杂度 <code>O(1)</code>)</p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>hash-table</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160.相交链表</title>
    <link href="/2021/06/06/160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/06/06/160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">160. 相交链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" alt="img"></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p>示例 1：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png" alt="img"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：intersectVal = <span class="hljs-number">8</span>, listA = [<span class="hljs-number">4,1,8,4</span>,<span class="hljs-number">5</span>], listB = [<span class="hljs-number">5,0,1,8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], skipA = <span class="hljs-number">2</span>, skipB = <span class="hljs-number">3</span><br><br>输出：Intersected at &#x27;<span class="hljs-number">8</span>&#x27;<br><br>解释：相交节点的值为 <span class="hljs-number">8</span> （注意，如果两个链表相交则不能为 <span class="hljs-number">0</span>）。<br>从各自的表头开始算起，链表 <span class="hljs-keyword">A</span> 为 [<span class="hljs-number">4,1,8,4</span>,<span class="hljs-number">5</span>]，链表 B 为 [<span class="hljs-number">5,0,1,8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]。<br>在 <span class="hljs-keyword">A</span> 中，相交节点前有 <span class="hljs-number">2</span> 个节点；在 B 中，相交节点前有 <span class="hljs-number">3</span> 个节点。<br><br></code></pre></td></tr></table></figure><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>使用双指针，创建两个指针pa和pb，分别指向两个头节点<code>headA</code>和<code>headB</code></p><p>依次遍历两个链表的每个节点</p><ul><li>如果pa不为空，则将pa移到下一个节点。如果pa为空，将pa指向<code>headB</code>的头节点</li><li>如果pb不为空，则将pb移到下一个节点。如果pb为空，将pb指向<code>headA</code>的头节点</li><li>当pa和pb都指向同一个节点，或者两者都为空的时候，返回指向的节点或者null</li><li>如果两个链表有交点，在第二次循环的时候，会返回交点</li><li>如果两个链表没有交点，在第二次遍历的时候会返回<code>null</code> == <code>null</code>,移动的距离就是两个链表的长度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(headA == <span class="hljs-keyword">null</span> || headB == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        ListNode pa = headA;<br>        ListNode pb = headB;<br>        <span class="hljs-keyword">while</span>(pa != pb)&#123;<br>            pa = pa == <span class="hljs-keyword">null</span> ? headB : pa.next;<br>            pb = pb == <span class="hljs-keyword">null</span> ? headA : pb.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pa;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>linked-list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13-罗马数字转整数</title>
    <link href="/2021/05/19/13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <url>/2021/05/19/13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/roman-to-integer/">13. 罗马数字转整数 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>罗马数字包含以下七种字符: <code>I</code>，<code>V</code>，<code>X</code>，<code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 X + II 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code>+<code>V</code>+<code>II</code>。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做<code>IIII</code>，而是<code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><p><code>I</code> 可以放在 <code>V</code>(5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。<br><code>X</code>可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。<br><code>C</code> 可以放在<code>D</code>(500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p>方法:</p><p>首先对符号和数字建立一个映射关系。</p><p>然后逆序遍历字符串，判断当前字符和前一个字符代表的数字大小，如果当前字符代表的数字小于后面一个字符，就减去当前字符代表的数值，如果当前字符代表的数字大等于于后面一个字符，就加上当前字符的数字</p><p>比如字符串<code>LVIII</code>对该字符串逆序遍历</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">L</span>  <span class="hljs-variable">V</span>   <span class="hljs-built_in">I</span>   <span class="hljs-built_in">I</span>   <span class="hljs-built_in">I</span><br><br>逆序遍历<br>假设初始值<span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>先到<span class="hljs-built_in">I</span> <span class="hljs-operator">,</span><span class="hljs-built_in">I</span>没有后面字符，所以 <span class="hljs-variable">sum</span><span class="hljs-operator">+</span><span class="hljs-number">1</span><br>然后继续到<span class="hljs-built_in">I</span> 这个时候不比后面字符小 所以再 <span class="hljs-variable">sum</span><span class="hljs-operator">+</span><span class="hljs-number">1</span><br>继续到 <span class="hljs-built_in">I</span>  仍然 <span class="hljs-variable">sum</span><span class="hljs-operator">+</span><span class="hljs-number">1</span><br>之后到 <span class="hljs-variable">V</span><span class="hljs-operator">,</span> <span class="hljs-variable">V</span>的后面一个字符是<span class="hljs-built_in">I</span><span class="hljs-operator">,</span><span class="hljs-variable">V</span>比<span class="hljs-built_in">I</span>大<span class="hljs-operator">,</span>所以<span class="hljs-variable">sum</span><span class="hljs-operator">+</span><span class="hljs-number">5</span><br>最后到 <span class="hljs-variable">L</span><span class="hljs-operator">,</span> <span class="hljs-variable">L</span>的后一个字符是<span class="hljs-variable">V</span><span class="hljs-operator">,</span> <span class="hljs-variable">L</span>比<span class="hljs-variable">V</span>大<span class="hljs-operator">,</span>所以<span class="hljs-variable">sum</span><span class="hljs-operator">+</span><span class="hljs-number">50</span><br>最终结果就是 <span class="hljs-number">0</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">5</span> <span class="hljs-operator">+</span> <span class="hljs-number">50</span> <span class="hljs-operator">=</span> <span class="hljs-number">58</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">romanToInt</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span>||s.length() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        Map&lt;Character,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Character,Integer&gt;();<br>        map.put(<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-number">1</span>);<br>        map.put(<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-number">5</span>);<br>        map.put(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">10</span>);<br>        map.put(<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-number">50</span>);<br>        map.put(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">100</span>);<br>        map.put(<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">500</span>);<br>        map.put(<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> last = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">int</span> num = map.get(s.charAt(s.length()-<span class="hljs-number">1</span>-i));<span class="hljs-comment">//逆序查找</span><br>            <span class="hljs-keyword">if</span>(num &lt; last)&#123;<span class="hljs-comment">//如果当前值比前一个小则减</span><br>                sum -= num;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//否则则加</span><br>                sum += num;<br>            &#125;<br>            last = num;<span class="hljs-comment">//将当前值赋给last</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos配置单机zookeeper</title>
    <link href="/2021/05/07/centos%E9%85%8D%E7%BD%AE%E5%8D%95%E6%9C%BAzookeeper/"/>
    <url>/2021/05/07/centos%E9%85%8D%E7%BD%AE%E5%8D%95%E6%9C%BAzookeeper/</url>
    
    <content type="html"><![CDATA[<h3 id="1-下载zookeeper"><a href="#1-下载zookeeper" class="headerlink" title="1.下载zookeeper"></a>1.下载zookeeper</h3><p><a href="https://mirrors.bfsu.edu.cn/apache/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz">下载地址</a></p><p>2.上传到服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入上传zookeeper的目录</span><br>cd /usr/local<br><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar -zxvf apache-zookeeper-3.6.3-bin.tar.gz<br><span class="hljs-meta">#</span><span class="bash"> 进入zookeeper解压目录</span><br>cd apache-zookeeper-3.6.3-bin/<br><span class="hljs-meta">#</span><span class="bash"> 新建data文件夹，路径根据个人习惯</span><br>mkdir data<br><span class="hljs-meta">#</span><span class="bash"> 新建日志文件夹，路径根据个人习惯</span><br>mkdir logs<br><span class="hljs-meta">#</span><span class="bash"> 进入配置文件夹</span><br>cd conf<br><span class="hljs-meta">#</span><span class="bash"> 复制给的模板配置文件</span><br>cp zoo_sample.cfg zoo.cfg<br><span class="hljs-meta">#</span><span class="bash"> 修改给配置文件 zoo.cfg</span><br>vi zoo.cfg<br></code></pre></td></tr></table></figure><p>主要关注</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">三个属性</span><br><span class="hljs-meta">#</span><span class="bash"> 数据目录 刚才新建的data</span><br>dataDir<br><span class="hljs-meta">#</span><span class="bash"> 日志目录 刚才新建的logs</span><br>dataLogDir<br><span class="hljs-meta">#</span><span class="bash"> 端口</span><br>clientPort <br><br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs she">sh zkServer.sh start<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>config</tag>
      
      <tag>zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jdk源码阅读环境搭建</title>
    <link href="/2021/05/04/jdk%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/05/04/jdk%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h3><p>首先新建一个普通的java项目</p><p><img src="/img/jdk阅读环境/1.jpg"></p><h3 id="2-导入jdk源码"><a href="#2-导入jdk源码" class="headerlink" title="2.导入jdk源码"></a>2.导入jdk源码</h3><ul><li>在java的安装目录下找到<code>src.zip</code>这个压缩包</li><li>然后我们将这个压缩包复制到刚才新建的项目目录下</li></ul><p><img src="/img/jdk阅读环境/2.jpg"></p><ul><li>右键解压缩到src目录下</li></ul><p><img src="/img/jdk阅读环境/3.jpg"></p><h3 id="3-替换jdk关联源码"><a href="#3-替换jdk关联源码" class="headerlink" title="3.替换jdk关联源码"></a>3.替换jdk关联源码</h3><p>首先我们打开项目设置<code>open moudle settings</code></p><p>点击SDKs将Sourcepath中原来关联的src给删掉</p><p><img src="/img/jdk阅读环境/4.jpg"></p><p>然后将项目中的jdk源码关联进来</p><p><img src="/img/jdk阅读环境/5.jpg"></p><p>设置项目jdk为刚才关联的jdk</p><p><img src="/img/jdk阅读环境/6.jpg"></p><h3 id="4-其他配置"><a href="#4-其他配置" class="headerlink" title="4.其他配置"></a>4.其他配置</h3><ul><li>在<code>settings</code>中搜索compiler </li></ul><p>​       修改<code>build project automatically</code>为1500 (用于解决系统资源不足)</p><p>​      <img src="/img/jdk阅读环境/11.jpg"></p><ul><li><p>在<code>settings</code>中搜索stepping</p><p>取消勾选</p></li></ul><p>​      <img src="/img/jdk阅读环境/7.jpg"></p><ul><li>删除<code>java.swing.plaf</code>下的<code>gtk</code>包</li></ul><p>​       <img src="/img/jdk阅读环境/8.jpg"></p><ul><li><p>引入jdk运行jar包</p><p>打开项目设置<code>open moudle settings</code>，在<code>Libraries</code>里新增lib</p><p><img src="/img/jdk阅读环境/9.jpg"></p><p>选择本机jdk安装路径下的lib文件夹</p><p><img src="/img/jdk阅读环境/10.jpg"></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15-三数之和</title>
    <link href="/2021/05/04/15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2021/05/04/15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你一个包含 <code>n</code> 个整数的数组<code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <script type="math/tex">a</script>，<script type="math/tex">b</script>，<script type="math/tex">c</script> ，使得 <script type="math/tex">a + b + c = 0 ?</script>请你找出所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意</strong>：答案中不可以包含重复的三元组。</p><p>示例1：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：nums = [<span class="hljs-string">-1</span>,0,1,2,<span class="hljs-string">-1</span>,<span class="hljs-string">-4</span>]<br>输出：[[<span class="hljs-string">-1</span>,<span class="hljs-string">-1</span>,2],[<span class="hljs-string">-1</span>,0,1]]<br></code></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p>示例3：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[0]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p><strong>提示</strong>:</p><ul><li>$0 \le nums.length \le 3000$</li><li>$-10^5 \le nums[i] \le 10^5$</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>two-pointers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-两数之和</title>
    <link href="/2021/05/04/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2021/05/04/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给定一个整数数组 <code>nums</code>和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> 的那<strong>两个</strong>整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例1：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,7,11,15]</span>, target = 9<br>输出：<span class="hljs-comment">[0,1]</span><br>解释：因为 nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[1]</span> == 9 ，返回 <span class="hljs-comment">[0, 1]</span> 。<br></code></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,2,4]</span>, target = 6<br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></td></tr></table></figure><p><strong>提示</strong>：</p><ul><li>$2 \le nums.length \le 10^3$</li><li>$-10^9 \le nums[i] \le 10^9$</li><li>$-10^9 \le target \le 10^9$</li><li><strong>只会存在一个有效答案</strong></li></ul><p>方法一:</p><p>利用hash table记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">int</span> len = nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>            <span class="hljs-keyword">if</span>(map.containsKey(target - nums[i]))&#123;<br>                res[<span class="hljs-number">0</span>] = i;<br>                res[<span class="hljs-number">1</span>] = map.get(target - nums[i]);<br>                <span class="hljs-keyword">return</span> res;<br>            &#125;<br>            map.put(nums[i],i);           <br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>hash-table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos配置java</title>
    <link href="/2021/05/03/centos%E9%85%8D%E7%BD%AEjava/"/>
    <url>/2021/05/03/centos%E9%85%8D%E7%BD%AEjava/</url>
    
    <content type="html"><![CDATA[<h2 id="tar-gz包安装"><a href="#tar-gz包安装" class="headerlink" title="tar.gz包安装"></a>tar.gz包安装</h2><h4 id="1-jdk下载"><a href="#1-jdk下载" class="headerlink" title="1.jdk下载"></a>1.jdk下载</h4><p>关于jdk历史版本的下载，可以在这里找到<a href="https://github.com/frekele/oracle-java/releases">Releases · frekele/oracle-java (github.com)</a></p><p><img src="/img/centos_config_java/1.jpg"></p><p>我们选择<a href="https://github.com/frekele/oracle-java/releases/download/8u202-b08/jdk-8u202-linux-x64.tar.gz"><code>jdk-8u202-linux-x64.tar.gz</code></a></p><p>2.服务器配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在服务器上新建目录</span><br>cd /usr/local<br>mkdir java<br></code></pre></td></tr></table></figure><p>利用<a href="[SSH工具 客户端 (hostbuf.com">finalshell</a>](<a href="http://www.hostbuf.com/">http://www.hostbuf.com/</a>)) 将 <code>jdk-8u202-linux-x64.tar.gz</code> 上传到该目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar -zxvf jdk-8u202-linux-x64.tar.gz <br><br><span class="hljs-meta">#</span><span class="bash"> 配置环境变量</span><br>vi /etc/profile<br><br><span class="hljs-meta">#</span><span class="bash"> 在文件底部 输入</span><br>export JAVA_HOME=/usr/local/java/jdk1.8.0_202<br>export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>export PATH=$JAVA_HOME/bin:$PATH<br><br><span class="hljs-meta">#</span><span class="bash"> 刷新配置</span><br>source /etc/profile<br><br></code></pre></td></tr></table></figure><p><img src="/img/centos_config_java/2.jpg"></p><p>配置好后，输入如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure><p>出现</p><p><img src="/img/centos_config_java/3.jpg"></p><p>就表示安装成功</p>]]></content>
    
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>config</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-整数反转</title>
    <link href="/2021/05/03/7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    <url>/2021/05/03/7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/reverse-integer/">7. 整数反转 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 $[−{2^{31}},  {2^{31}} − 1]$ ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p><p>示例1:</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：x </span>=<span class="hljs-string"> 123</span><br><span class="hljs-string">输出：321</span><br></code></pre></td></tr></table></figure><p>示例2:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：x = <span class="hljs-string">-123</span><br>输出：<span class="hljs-string">-321</span><br></code></pre></td></tr></table></figure><p>示例3:</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：x </span>=<span class="hljs-string"> 120</span><br><span class="hljs-string">输出：21</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(x != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 取出x的末尾数字   x % 10       </span><br>            res = res * <span class="hljs-number">10</span> + x % <span class="hljs-number">10</span>;<br>            x /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) res == res ? (<span class="hljs-keyword">int</span>) res : <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>554-砖墙</title>
    <link href="/2021/05/02/554-%E7%A0%96%E5%A2%99/"/>
    <url>/2021/05/02/554-%E7%A0%96%E5%A2%99/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/brick-wall/">554. 砖墙 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。</p><p>你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。</p><p>给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 。</p><p>示例1:</p><p><img src="https://assets.leetcode.com/uploads/2021/04/24/cutwall-grid.jpg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：wall = <span class="hljs-comment">[<span class="hljs-comment">[1,2,2,1]</span>,<span class="hljs-comment">[3,1,2]</span>,<span class="hljs-comment">[1,3,2]</span>,<span class="hljs-comment">[2,4]</span>,<span class="hljs-comment">[3,1,2]</span>,<span class="hljs-comment">[1,3,1,1]</span>]</span><br>输出：2<br></code></pre></td></tr></table></figure><p>题目中要求，通过的砖块最少。可以反过来考虑，如果垂线经过间隔则不通过砖块，所以求通过的砖块最少，可以转化为通过的间隔最多。</p><p>如第一个例子</p><p>砖块分别为:</p><ul><li><p>砖块<code>[1,2,2,1]</code>             间隔 <code>[1,3,5]</code></p></li><li><p>砖块<code>[3,1,2]</code>                 间隔<code>[3,4]</code></p></li><li><p>砖块<code>[1,3,2]</code>                 间隔<code>[1,4]</code></p></li><li><p>砖块<code>[2,4]</code>                     间隔<code>[2]</code></p></li><li><p>砖块<code>[3,1,2]</code>                 间隔<code>[3,4]</code></p></li><li><p>砖块<code>[1,3,1,1]</code>             间隔<code>[1,4,5]</code></p></li></ul><p>此时，垂线从间隔4处通过的砖块最少</p><p>可以考虑使用hash table来计算，先对间隔计数，然后遍历hash table找到间隔出现最多的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">leastBricks</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; wall)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> height = wall.size();<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; height; i++) &#123;<br>            <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// 获取每个砖块的长度，计算出间隔的长度</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> brick : wall.get(i)) &#123;<br>                sum += brick;<br>                map.put(sum, map.getOrDefault(sum, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">// 只计算中间的间隔，不能从两边穿过，需要 remove 掉最后一个</span><br>            map.remove(sum); <br>        &#125;<br>        <span class="hljs-keyword">int</span> res = height;<br>        <span class="hljs-comment">// 遍历 获取每个间隔出现的次数，用高度相减，就是通过砖块的数量</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> space : map.keySet()) &#123;<br>            <span class="hljs-keyword">int</span> count = map.get(space);<br>            res = Math.min(res, height - count);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>hash-table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo部署问题</title>
    <link href="/2021/04/29/hexo%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/"/>
    <url>/2021/04/29/hexo%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="使用hexo-d-命令部署之后-访问页面不显示"><a href="#使用hexo-d-命令部署之后-访问页面不显示" class="headerlink" title="使用hexo d 命令部署之后 访问页面不显示"></a>使用hexo d 命令部署之后 访问页面不显示</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>因为之前看的网上教程，在<code>_config.yml</code>文件中设置的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>中将branch 设置为了 master,这是因为github现在新建仓库的主分支为main <a href="https://github.com/github/renaming">github/renaming: Guidance for changing the default branch name for GitHub repositories</a></p><p>所以现在github pages 调用的分支为maIn分支</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>打开博客仓库的settings</p><p><img src="/img/hexo配置/hexo1.jpg"></p><p>拉到最下面看到github pages配置</p><p><img src="/img/hexo配置/hexo2.jpg"></p><p>然后将分支改为master即可</p><p><img src="/img/hexo配置/hexo3.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>206-反转链表</title>
    <link href="/2021/04/29/206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/04/29/206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p>示例1:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span><br>输出：<span class="hljs-string">[5,4,3,2,1]</span><br></code></pre></td></tr></table></figure><p>示例2:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1,2]</span><br>输出：<span class="hljs-comment">[2,1]</span><br></code></pre></td></tr></table></figure><p>示例3:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p>提示:</p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>假设链表为 <script type="math/tex">1 \rightarrow 2 \rightarrow 3 \rightarrow \varnothing</script>，我们想要把它改成 <script type="math/tex">\varnothing \leftarrow 1 \leftarrow 2 \leftarrow 3</script>。</p><p>在遍历链表时，将当前节点的 <script type="math/tex">\textit{next}</script> ​ 指针改为指向前一个节点。由于节点没有引用其前一个节点，因此必须事先存储其前一个节点。在更改引用之前，还需要存储后一个节点。最后返回新的头引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode pre = <span class="hljs-keyword">null</span>;<br>        ListNode cur = head;<br>        ListNode next = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>) &#123;<br>            next = cur.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        ListNode node = reverseList(head.next);<br>        head.next.next = head;<br>        head.next = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>linked-list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>94-二叉树的中序遍历</title>
    <link href="/2021/04/26/94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2021/04/26/94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给定一个二叉树的根节点 <code>root</code> ，返回它的 <strong>中序</strong> 遍历。</p><p>中序遍历是先遍历左子树，然后访问根节点，然后遍历右子树。</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        inorder(root, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; list)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> != root)&#123;<br>            <span class="hljs-comment">//递归左子树</span><br>            inorder(root.left, list);<br>            <span class="hljs-comment">//访问根节点</span><br>            list.add(root.val);<br>            <span class="hljs-comment">//递归右子树</span><br>            inorder(root.right, list);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ol><li>先遍历到当前结点，但不求值，入栈</li><li>接着遍历左结点，入栈，往下遍历</li><li>当前结点没有左结点了，则出栈，求值</li><li>当前结点有右结点，重复步骤1</li><li>遍历直到栈为空为止</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">//初始化一个栈</span><br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        TreeNode cur = root;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">null</span> != cur || !stack.isEmpty())&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">null</span> != cur)&#123;<br>                stack.push(cur);<br>                <span class="hljs-comment">//不断压入左子树</span><br>                cur = cur.left;<br>            &#125;<br>            <span class="hljs-comment">//栈顶节点出栈</span><br>            cur = stack.pop();<br>            <span class="hljs-comment">//取值</span><br>            res.add(cur.val);<br>            <span class="hljs-comment">//压入右子树</span><br>            cur = cur.right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>897-递增顺序搜索树</title>
    <link href="/2021/04/25/897-%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2021/04/25/897-%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/increasing-order-search-tree/">897. 递增顺序搜索树 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你一棵二叉搜索树，请你 <strong>按中序遍历</strong> 将其重新排列为一棵递增顺序搜索树，使树中最左边的节点成为树的根节点，并且每个节点没有左子节点，只有一个右子节点。</p><p>示例1:</p><p><img src="https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg" alt="img"></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">5</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">6</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">8</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>示例2:</p><p><img src="https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg" alt="img"></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">5</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><ul><li>树中节点数的取值范围是 <code>[1, 100]</code></li><li><code>0 &lt;= Node.val &lt;= 1000</code></li></ul><h2 id="方法一-中序遍历-用list保存记录"><a href="#方法一-中序遍历-用list保存记录" class="headerlink" title="方法一 中序遍历 用list保存记录"></a>方法一 中序遍历 用list保存记录</h2><ul><li>首先对题目给出的二叉搜索树进行中序遍历，并用list保存</li><li>然后根据链表，创建一个只含右节点的二叉搜索树</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">increasingBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        List&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        inOrder(root, list);<br>        <span class="hljs-keyword">int</span> len = list.size();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-comment">//获取当前节点</span><br>            TreeNode cur = list.get(i);<br>            <span class="hljs-comment">//获取下一节点</span><br>            TreeNode next = list.get(i + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//当前节点左节点置空</span><br>            cur.left = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-comment">//当前节点的右节点就是下一节点</span><br>            cur.right = next;<br>        &#125;<br>        <span class="hljs-comment">//获取最后一个节点</span><br>        TreeNode last = list.get(len - <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//将最后一个节点的左右节点置空</span><br>        last.left = <span class="hljs-keyword">null</span>;<br>        last.right = <span class="hljs-keyword">null</span>; <br>        <span class="hljs-keyword">return</span> list.get(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">//中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">(TreeNode root, List&lt;TreeNode&gt; list)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root != <span class="hljs-keyword">null</span>)&#123;<br>            inOrder(root.left, list);<br>            list.add(root);<br>            inOrder(root.right, list);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>tree</tag>
      
      <tag>depth-first-search</tag>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
