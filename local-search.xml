<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo-auto-category配置</title>
    <link href="/2023/07/14/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/hexo-auto-category%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/07/14/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/hexo-auto-category%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>以往在写 blog 的时候 ，通常是使用<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span> <span class="hljs-type">page</span> <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><br>来新建文章，但是这样有一个问题 就是新建的文件全部都堆在 <code>/_post</code> 文件下，blog 多了以后非常难维护，如果我们 手动做了 分类，这个时候因为 我们 在 front-matter 中 categories 是手动维护的，，如果文件夹出现了修改或者说 blog 的移动，这个时候还需要手动的去修改 categories 非常麻烦。<br>这个时候 我们可以用 <a href="https://github.com/xu-song/hexo-auto-category">hexo-auto-category</a>) 这个插件 来帮助我们自动分类。这个插件 可以根据blog 所处的文件夹 来自动生成 categories, 省去了手动维护的烦恼.</p><p>安装见 <a href="https://blog.eson.org/pub/e2f6e239/">【Hexo插件系列】日志的自动分类插件 hexo-auto-category | ESON</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-auto-category <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在 <code>_config.yml</code> 中添加<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Generate categories from directory-tree  </span><br><span class="hljs-comment"># Dependencies: https://github.com/xu-song/hexo-auto-category  </span><br><span class="hljs-comment"># depth: the depth of directory-tree you want to generate, should &gt; 0  </span><br><span class="hljs-attr">auto_category:</span>  <br> <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <br> <span class="hljs-attr">depth:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><p><code>depth : 1</code> 表示只想生成第一级目录</p><h4 id="编译-amp-部署"><a href="#编译-amp-部署" class="headerlink" title="编译&amp;部署"></a>编译&amp;部署</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器部署相关</title>
    <link href="/2023/07/14/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%9C%BA%E5%99%A8%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3/"/>
    <url>/2023/07/14/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%9C%BA%E5%99%A8%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h3 id="hadoop-各应用部署"><a href="#hadoop-各应用部署" class="headerlink" title="hadoop 各应用部署"></a>hadoop 各应用部署</h3><p>NameNode 服务 单独 部署 (集群规模不大时 NameNode 也可以和 DataNode 放在一台机器上)</p><p>DataNode 和 NodeManager 在一台机器上</p><p>ResourceManage 和 NameNdoe 建议 独立 部署在一台上</p><p>historyServer 通常和 resourceManager 在一起</p><div class="table-container"><table><thead><tr><th>角色</th><th>机器1</th><th>机器2</th><th>机器3</th><th>机器4</th><th>机器5</th></tr></thead><tbody><tr><td>NameNode</td><td>是</td><td>是</td><td>否</td><td>否</td><td>否</td></tr><tr><td>DataNode</td><td>否</td><td>否</td><td>是</td><td>是</td><td>是</td></tr><tr><td>JournalNode</td><td>否</td><td>否</td><td>是</td><td>是</td><td>是</td></tr><tr><td>Zookeeper</td><td>否</td><td>否</td><td>是</td><td>是</td><td>是</td></tr><tr><td>ZKFC</td><td>是</td><td>是</td><td>否</td><td>否</td><td>否</td></tr><tr><td>ResoueceManager</td><td>否</td><td>是</td><td>否</td><td>否</td><td>否</td></tr><tr><td>NodeManager</td><td>否</td><td>否</td><td>是</td><td>是</td><td>是</td></tr><tr><td>JobHistoryServer</td><td>否</td><td>是</td><td>否</td><td>否</td><td>否</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通用返回类</title>
    <link href="/2023/07/13/java%E5%B7%A5%E5%85%B7%E7%B1%BB/%E9%80%9A%E7%94%A8%E8%BF%94%E5%9B%9E%E7%B1%BB/"/>
    <url>/2023/07/13/java%E5%B7%A5%E5%85%B7%E7%B1%BB/%E9%80%9A%E7%94%A8%E8%BF%94%E5%9B%9E%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>有些时候 我们需要封装一个 通用返回类 来承载我们返回的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">R</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 成功响应编码  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer SUCCESS_CODE = <span class="hljs-number">0</span>;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String  SUCCESS_MSG = <span class="hljs-string">&quot;success&quot;</span>;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 一般的错误返回码  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer COMMON_ERROR_CODE = -<span class="hljs-number">1</span>;  <br>  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 结果编码：0表示成功，其他值表示失败  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> Integer code;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 是否成功  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> Boolean success;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 消息  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> String msg;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 数据  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> T data;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">R</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.msg = SUCCESS_MSG;  <br>        <span class="hljs-keyword">this</span>.code = SUCCESS_CODE;  <br>        <span class="hljs-keyword">this</span>.success = <span class="hljs-keyword">true</span>;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">R</span><span class="hljs-params">(String message)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.msg = message;  <br>        <span class="hljs-keyword">this</span>.code = SUCCESS_CODE;  <br>        <span class="hljs-keyword">this</span>.success = <span class="hljs-keyword">true</span>;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">R</span><span class="hljs-params">(T data)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.msg = SUCCESS_MSG;  <br>        <span class="hljs-keyword">this</span>.code = SUCCESS_CODE;  <br>        <span class="hljs-keyword">this</span>.data = data;  <br>        <span class="hljs-keyword">this</span>.success = <span class="hljs-keyword">true</span>;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">R</span><span class="hljs-params">(Integer code, String message, T data)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.msg = message;  <br>        <span class="hljs-keyword">this</span>.code = code;  <br>        <span class="hljs-keyword">this</span>.data = data;  <br>        <span class="hljs-keyword">this</span>.success = <span class="hljs-keyword">true</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">R&lt;T&gt; <span class="hljs-title">success</span><span class="hljs-params">()</span> </span>&#123;  <br>        R&lt;T&gt; r = <span class="hljs-keyword">new</span> R&lt;&gt;();  <br>        r.setCode(SUCCESS_CODE);  <br>        r.setMsg(SUCCESS_MSG);  <br>        r.setSuccess(<span class="hljs-keyword">true</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">R&lt;T&gt; <span class="hljs-title">success</span><span class="hljs-params">(String msg)</span> </span>&#123;  <br>        R&lt;T&gt; r = <span class="hljs-keyword">new</span> R&lt;&gt;();  <br>        r.setCode(SUCCESS_CODE);  <br>        r.setMsg(msg);  <br>        r.setSuccess(<span class="hljs-keyword">true</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">R&lt;T&gt; <span class="hljs-title">success</span><span class="hljs-params">(T data)</span> </span>&#123;  <br>        R&lt;T&gt; r = <span class="hljs-keyword">new</span> R&lt;&gt;();  <br>        r.setCode(SUCCESS_CODE);  <br>        r.setMsg(SUCCESS_MSG);  <br>        r.setData(data);  <br>        r.setSuccess(<span class="hljs-keyword">true</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">R&lt;T&gt; <span class="hljs-title">success</span><span class="hljs-params">(String msg, T data)</span> </span>&#123;  <br>        R&lt;T&gt; r = <span class="hljs-keyword">new</span> R&lt;&gt;();  <br>        r.setCode(SUCCESS_CODE);  <br>        r.setMsg(msg);  <br>        r.setData(data);  <br>        r.setSuccess(<span class="hljs-keyword">true</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">R&lt;T&gt; <span class="hljs-title">error</span><span class="hljs-params">(String msg)</span> </span>&#123;  <br>        <span class="hljs-keyword">return</span> error(COMMON_ERROR_CODE, msg);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">R&lt;T&gt; <span class="hljs-title">error</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code, String msg)</span> </span>&#123;  <br>        R&lt;T&gt; r = <span class="hljs-keyword">new</span> R&lt;&gt;();  <br>        r.setCode(code);  <br>        r.setMsg(msg);  <br>        r.setSuccess(code == SUCCESS_CODE);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">R&lt;T&gt; <span class="hljs-title">error</span><span class="hljs-params">(BaseResponseEnum baseResponse)</span> </span>&#123;  <br>        <span class="hljs-keyword">return</span> error(baseResponse.getCode(), baseResponse.getMsg());  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们在 controller 层返回数据的时候 就可以这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> R&lt;?&gt; controllerMethod(<span class="hljs-meta">@RequestParam(&quot;params&quot;)</span> String params) &#123;  <br>    <span class="hljs-keyword">return</span> R.success(xxxService.serviceMethod(params));  <br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>java工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python调用azkaban接口上传文件</title>
    <link href="/2023/07/13/%E8%B0%83%E5%BA%A6-azkaban/python%E8%B0%83%E7%94%A8azkaban%E6%8E%A5%E5%8F%A3%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <url>/2023/07/13/%E8%B0%83%E5%BA%A6-azkaban/python%E8%B0%83%E7%94%A8azkaban%E6%8E%A5%E5%8F%A3%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>python调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os.path  <br>  <br><span class="hljs-keyword">import</span> requests  <br>  <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login_azkaban</span>():</span>  <br>    headers = &#123;  <br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>  <br>    &#125;  <br>    data = &#123;  <br>        <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;login&#x27;</span>,  <br>        <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;azkaban&#x27;</span>,  <br>        <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;azkaban&#x27;</span>,  <br>    &#125;  <br>    response = requests.post(<span class="hljs-string">&#x27;http://192.168.x.x:8081/manager&#x27;</span>, data=data, headers=headers)  <br>    res_data = response.json()  <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;error&quot;</span> <span class="hljs-keyword">in</span> res_data:  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>  <br>    <span class="hljs-keyword">return</span> res_data[<span class="hljs-string">&quot;session.id&quot;</span>]  <br>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload_project_zip</span>(<span class="hljs-params">session_id, project_name, zip_file</span>):</span>  <br>    files = &#123;  <br>        <span class="hljs-string">&#x27;file&#x27;</span>: (  <br>            os.path.basename(zip_file), <span class="hljs-built_in">open</span>(zip_file, <span class="hljs-string">&#x27;rb&#x27;</span>), <span class="hljs-string">&#x27;application/zip&#x27;</span>)  <br>        ,  <br>        <span class="hljs-string">&#x27;ajax&#x27;</span>: (<span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;upload&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>),  <br>        <span class="hljs-string">&#x27;project&#x27;</span>: (<span class="hljs-literal">None</span>, project_name, <span class="hljs-string">&#x27;type/plain&#x27;</span>),  <br>        <span class="hljs-string">&#x27;session.id&#x27;</span>: (<span class="hljs-literal">None</span>, session_id, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>)  <br>    &#125;  <br>    response = requests.post(  <br>        <span class="hljs-string">&#x27;http://192.168.x.x:8081/manager&#x27;</span>, files=files)  <br>    <span class="hljs-keyword">return</span> response.json()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>调度-azkaban</category>
      
    </categories>
    
    
    <tags>
      
      <tag>azkaban</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive表级血源解析</title>
    <link href="/2023/07/13/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive%E8%A1%A8%E7%BA%A7%E8%A1%80%E6%BA%90%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/07/13/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive%E8%A1%A8%E7%BA%A7%E8%A1%80%E6%BA%90%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="hive血源"><a href="#hive血源" class="headerlink" title="hive血源"></a>hive血源</h3><p>通过查看代码 发现 hive 自带了 一个表级血源解析工具类<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.hive</span><span class="hljs-selector-class">.ql</span><span class="hljs-selector-class">.tools</span>.LineageInfo<br></code></pre></td></tr></table></figure></p><p>我们可以这样使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ParseException,  </span><br><span class="hljs-function">        SemanticException </span>&#123;  <br>    String query = <span class="hljs-string">&quot;INSERT OVERWRITE TABLE TABL_A SELECT * FROM TABLE_B&quot;</span>;  <br>    LineageInfo lep = <span class="hljs-keyword">new</span> LineageInfo();  <br>    lep.getLineageInfo(query);<br>    <span class="hljs-keyword">for</span> (String tab : lep.getInputTableList()) &#123;  <br>        System.out.println(<span class="hljs-string">&quot;InputTable=&quot;</span> + tab);  <br>    &#125;  <br>    <span class="hljs-keyword">for</span> (String tab : lep.getOutputTableList()) &#123;  <br>        System.out.println(<span class="hljs-string">&quot;OutputTable=&quot;</span> + tab);  <br>    &#125;  <br>&#125;<br><br><br></code></pre></td></tr></table></figure></p><p>这样 就可以根据 hive sql 获取 表级血源</p><p>使用时 需要引入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hive<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hive-exec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive-exec的guava冲突</title>
    <link href="/2023/07/13/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive-exec%E7%9A%84guava%E5%86%B2%E7%AA%81/"/>
    <url>/2023/07/13/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive-exec%E7%9A%84guava%E5%86%B2%E7%AA%81/</url>
    
    <content type="html"><![CDATA[<p>在 引入 <code>hive-exec</code> 的maven 依赖后 Application 无法启动<br>报 <code>hive-exec</code> 的 guava 与系统自带的 guava 冲突<br>此时 尝试在 maven 中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>  <br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br></code></pre></td></tr></table></figure><br>仍然无法启动</p><p>这是因为 <code>hive-exec</code>的 guava 是 父模块引入的<br>所以我们需要 去掉 guava 后重新编译 hive </p><p>找到 <code>hive-exec</code> 模块的 <code>pom.xml</code> 文件<br>注释掉这个地方<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs openscad">&lt;<span class="hljs-meta"><span class="hljs-meta-keyword">include</span>&gt;</span>com.google.guava:guava&lt;/<span class="hljs-meta"><span class="hljs-meta-keyword">include</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>然后 重新编译<br>编译 见 ![[hive2.1.1编译]]</p><p>编译 完以后 用自己编译出来的 <code>hive-exec</code> 的jar 包替换掉从 maven中央仓库中下载 <code>hive-exec</code> jar包<br>即可</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive编译</title>
    <link href="/2023/07/13/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive2.1.1%E7%BC%96%E8%AF%91/"/>
    <url>/2023/07/13/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive2.1.1%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h3 id="1-下载源码"><a href="#1-下载源码" class="headerlink" title="1.下载源码"></a>1.下载源码</h3><p>由于 git 上 (<a href="https://github.com/apache/hive/tree/branch-2.1">branch-2.1</a>)的pom version 为 2.1.2 所以 需要从  <a href="https://github.com/apache/hive/releases/tag/rel%2Frelease-2.1.1">Release rel/release-2.1.1 · apache/hive (github.com)</a><br>下载源码</p><h3 id="2-编译"><a href="#2-编译" class="headerlink" title="2.编译"></a>2.编译</h3><p>切换到 hive 根目录下   编译<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mvn clean package -DskipTests -Pdist<br></code></pre></td></tr></table></figure><br>在 windows 下编译时,  hive-common 模块会报<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stata">[<span class="hljs-keyword">ERROR</span>] Failed to execute goal org.apache.maven.plugins:maven-antrun-<span class="hljs-keyword">plugin</span>:1.7:<span class="hljs-keyword">run</span> (<span class="hljs-keyword">generate</span>-<span class="hljs-keyword">version</span>-annotation) <span class="hljs-keyword">on</span> project hive-common: <span class="hljs-keyword">An</span> Ant BuildException has occured: exec returned: 127<br>[<span class="hljs-keyword">ERROR</span>] around Ant part ...&lt;exec failonerror=<span class="hljs-string">&quot;true&quot;</span> executable=<span class="hljs-string">&quot;bash&quot;</span>&gt;... @ 4:46 <span class="hljs-keyword">in</span> <span class="hljs-keyword">D</span>:\code_repo\java\hive-rel-release-2.1.1\hive-rel-release-2.1.1\common\target\antrun\build-main.xml<br>[<span class="hljs-keyword">ERROR</span>] -&gt; [<span class="hljs-keyword">Help</span> 1]<br>[<span class="hljs-keyword">ERROR</span>]<br>[<span class="hljs-keyword">ERROR</span>] To see the full <span class="hljs-keyword">stack</span> trace of the errors, re-<span class="hljs-keyword">run</span> Maven with the -<span class="hljs-keyword">e</span> switch.<br>[<span class="hljs-keyword">ERROR</span>] Re-<span class="hljs-keyword">run</span> Maven using the -X switch to enable full debug logging.<br>[<span class="hljs-keyword">ERROR</span>]<br>[<span class="hljs-keyword">ERROR</span>] <span class="hljs-keyword">For</span> <span class="hljs-keyword">more</span> information <span class="hljs-keyword">about</span> the errors and possible solutions, please <span class="hljs-keyword">read</span> the following articles:<br>[<span class="hljs-keyword">ERROR</span>] [<span class="hljs-keyword">Help</span> 1] http:<span class="hljs-comment">//cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</span><br>[<span class="hljs-keyword">ERROR</span>]<br>[<span class="hljs-keyword">ERROR</span>] After correcting the problems, you can resume the build with the command<br>[<span class="hljs-keyword">ERROR</span>]   mvn &lt;<span class="hljs-keyword">args</span>&gt; -rf :hive-common<br><br></code></pre></td></tr></table></figure></p><p>这是因为 需要 bash 环境。这里我选择在 wsl2 下编译 (此处我 wsl2 的 maven 和 jdk 都是使用 wsl2上的,  而不是使用 windows 的 maven 和 jdk) (如果 wsl2 的 maven 指定的本地仓库 在 windows 上 此时 会非常慢 可能是因为 跨系统访问文件导致的)</p><p>再次执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn clean package -DskipTests -Pdist<br></code></pre></td></tr></table></figure><br>编译 成功</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解java虚拟机-ch1-修改class文件</title>
    <link href="/2023/07/13/java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-ch1-%E4%BF%AE%E6%94%B9class%E6%96%87%E4%BB%B6/"/>
    <url>/2023/07/13/java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-ch1-%E4%BF%AE%E6%94%B9class%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装asmtools-jar"><a href="#1-安装asmtools-jar" class="headerlink" title="1.安装asmtools.jar"></a>1.安装asmtools.jar</h2><h2 id="2-创建一个java文件并编译"><a href="#2-创建一个java文件并编译" class="headerlink" title="2.创建一个java文件并编译"></a>2.创建一个java文件并编译</h2><h3 id="2-1创建-Foo-java"><a href="#2-1创建-Foo-java" class="headerlink" title="2.1创建 Foo.java"></a>2.1创建 Foo.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Hello Java!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-keyword">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Hello Jvm!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-2编译并运行"><a href="#2-2编译并运行" class="headerlink" title="2.2编译并运行"></a>2.2编译并运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@LAPTOP:/usr/local/geek-jvm-study/ch1# javac Foo.java<br>root@LAPTOP:/usr/local/geek-jvm-study/ch1# java Foo<br>Hello Java!<br>Hello Jvm!<br></code></pre></td></tr></table></figure><p>此时可以看出  输出了两条语句 <code>Hello Java!</code> 和 <code>Hello Jvm!</code></p><h2 id="3查看编译后的java文件-class文件"><a href="#3查看编译后的java文件-class文件" class="headerlink" title="3查看编译后的java文件 class文件"></a>3查看编译后的java文件 class文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@LAPTOP:/usr/local/geek-jvm-study/ch1# javap -verbose Foo<br>Classfile /usr/local/geek-jvm-study/ch1/Foo.class<br>  Last modified Dec 10, 2022; size 491 bytes<br>  MD5 checksum fdecd3da68c7736cfaa7cd44f19b3857<br>  Compiled from &quot;Foo.java&quot;<br>public class Foo<br>  minor version: 0<br>  major version: 55<br>  flags: (0x0021) ACC_PUBLIC, ACC_SUPER<br>  this_class: #6                          // Foo<br>  super_class: #7                         // java/lang/Object<br>  interfaces: 0, fields: 0, methods: 2, attributes: 1<br>Constant pool:<br><span class="hljs-meta">   #</span><span class="bash">1 = Methodref          <span class="hljs-comment">#7.#17         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-meta">   #</span><span class="bash">2 = Fieldref           <span class="hljs-comment">#18.#19        // java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="hljs-meta">   #</span><span class="bash">3 = String             <span class="hljs-comment">#20            // Hello Java!</span></span><br><span class="hljs-meta">   #</span><span class="bash">4 = Methodref          <span class="hljs-comment">#21.#22        // java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="hljs-meta">   #</span><span class="bash">5 = String             <span class="hljs-comment">#23            // Hello Jvm!</span></span><br><span class="hljs-meta">   #</span><span class="bash">6 = Class              <span class="hljs-comment">#24            // Foo</span></span><br><span class="hljs-meta">   #</span><span class="bash">7 = Class              <span class="hljs-comment">#25            // java/lang/Object</span></span><br><span class="hljs-meta">   #</span><span class="bash">8 = Utf8               &lt;init&gt;</span><br><span class="hljs-meta">   #</span><span class="bash">9 = Utf8               ()V</span><br><span class="hljs-meta">  #</span><span class="bash">10 = Utf8               Code</span><br><span class="hljs-meta">  #</span><span class="bash">11 = Utf8               LineNumberTable</span><br><span class="hljs-meta">  #</span><span class="bash">12 = Utf8               main</span><br><span class="hljs-meta">  #</span><span class="bash">13 = Utf8               ([Ljava/lang/String;)V</span><br><span class="hljs-meta">  #</span><span class="bash">14 = Utf8               StackMapTable</span><br><span class="hljs-meta">  #</span><span class="bash">15 = Utf8               SourceFile</span><br><span class="hljs-meta">  #</span><span class="bash">16 = Utf8               Foo.java</span><br><span class="hljs-meta">  #</span><span class="bash">17 = NameAndType        <span class="hljs-comment">#8:#9          // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-meta">  #</span><span class="bash">18 = Class              <span class="hljs-comment">#26            // java/lang/System</span></span><br><span class="hljs-meta">  #</span><span class="bash">19 = NameAndType        <span class="hljs-comment">#27:#28        // out:Ljava/io/PrintStream;</span></span><br><span class="hljs-meta">  #</span><span class="bash">20 = Utf8               Hello Java!</span><br><span class="hljs-meta">  #</span><span class="bash">21 = Class              <span class="hljs-comment">#29            // java/io/PrintStream</span></span><br><span class="hljs-meta">  #</span><span class="bash">22 = NameAndType        <span class="hljs-comment">#30:#31        // println:(Ljava/lang/String;)V</span></span><br><span class="hljs-meta">  #</span><span class="bash">23 = Utf8               Hello Jvm!</span><br><span class="hljs-meta">  #</span><span class="bash">24 = Utf8               Foo</span><br><span class="hljs-meta">  #</span><span class="bash">25 = Utf8               java/lang/Object</span><br><span class="hljs-meta">  #</span><span class="bash">26 = Utf8               java/lang/System</span><br><span class="hljs-meta">  #</span><span class="bash">27 = Utf8               out</span><br><span class="hljs-meta">  #</span><span class="bash">28 = Utf8               Ljava/io/PrintStream;</span><br><span class="hljs-meta">  #</span><span class="bash">29 = Utf8               java/io/PrintStream</span><br><span class="hljs-meta">  #</span><span class="bash">30 = Utf8               println</span><br><span class="hljs-meta">  #</span><span class="bash">31 = Utf8               (Ljava/lang/String;)V</span><br>&#123;<br>  public Foo();<br>    descriptor: ()V<br>    flags: (0x0001) ACC_PUBLIC<br>    Code:<br>      stack=1, locals=1, args_size=1<br>         0: aload_0<br>         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V<br>         4: return<br>      LineNumberTable:<br>        line 1: 0<br><br>  public static void main(java.lang.String[]);<br>    descriptor: ([Ljava/lang/String;)V<br>    flags: (0x0009) ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=2, locals=2, args_size=1<br>         0: iconst_1<br>         1: istore_1<br>         2: iload_1<br>         3: ifeq          14<br>         6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>         9: ldc           #3                  // String Hello Java!<br>        11: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>        14: iload_1<br>        15: iconst_1<br>        16: if_icmpne     27<br>        19: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>        22: ldc           #5                  // String Hello Jvm!<br>        24: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>        27: return<br>      LineNumberTable:<br>        line 3: 0<br>        line 4: 2<br>        line 5: 6<br>        line 7: 14<br>        line 8: 19<br>        line 10: 27<br>      StackMapTable: number_of_entries = 2<br>        frame_type = 252 /* append */<br>          offset_delta = 14<br>          locals = [ int ]<br>        frame_type = 12 /* same */<br>&#125;<br>SourceFile: &quot;Foo.java&quot;<br></code></pre></td></tr></table></figure><h2 id="4-利用asmtools修改class文件"><a href="#4-利用asmtools修改class文件" class="headerlink" title="4.利用asmtools修改class文件"></a>4.利用asmtools修改class文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@LAPTOP:/usr/local/geek-jvm-study/ch1# java -cp ../asmtool/asmtools.jar org.openjdk.asmtools.jdis.Main Foo.class &gt; Foo.jasm.1<br>root@LAPTOP:/usr/local/geek-jvm-study/ch1# awk &#x27;NR==1,/iconst_1/&#123;sub(/iconst_1/,&quot;iconst_2&quot;)&#125; 1&#x27; Foo.jasm.1 &gt; Foo.jasm<br>root@LAPTOP:/usr/local/geek-jvm-study/ch1# java Foo<br>Hello Java!<br>Hello Jvm!<br>root@LAPTOP:/usr/local/geek-jvm-study/ch1# java -cp ../asmtool/asmtools.jar org.openjdk.asmtools.jasm.M<br>ain Foo.jasm<br>root@LAPTOP-0GUCAKHK:/usr/local/geek-jvm-study/ch1# java Foo<br>Hello Java!<br></code></pre></td></tr></table></figure><p>此时 只输出了 <code>Hello Java!</code> 没有输出<code>Hello Jvm!</code></p><blockquote><p>这里 awk ‘NR==1,/iconst_1/{sub(/iconst_1/,”iconst_2”)} 1’ Foo.jasm.1 是 将 boolean 变量 flag 的值从 1 变成了 2 </p></blockquote><h2 id="5-再次查看编译后的文件"><a href="#5-再次查看编译后的文件" class="headerlink" title="5.再次查看编译后的文件"></a>5.再次查看编译后的文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@LAPTOP:/usr/local/geek-jvm-study/ch1# javap -verbose Foo<br>Classfile /usr/local/geek-jvm-study/ch1/Foo.class<br>  Last modified Dec 10, 2022; size 429 bytes<br>  MD5 checksum 97d020b83c40549a0440ebfa5597a1cd<br>  Compiled from &quot;Foo.jasm&quot;<br>public class Foo<br>  minor version: 0<br>  major version: 55<br>  flags: (0x0021) ACC_PUBLIC, ACC_SUPER<br>  this_class: #25                         // Foo<br>  super_class: #8                         // java/lang/Object<br>  interfaces: 0, fields: 0, methods: 2, attributes: 1<br>Constant pool:<br><span class="hljs-meta">   #</span><span class="bash">1 = String             <span class="hljs-comment">#10            // Hello Jvm!</span></span><br><span class="hljs-meta">   #</span><span class="bash">2 = String             <span class="hljs-comment">#15            // Hello Java!</span></span><br><span class="hljs-meta">   #</span><span class="bash">3 = Fieldref           <span class="hljs-comment">#27.#11        // java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="hljs-meta">   #</span><span class="bash">4 = Methodref          <span class="hljs-comment">#8.#17         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-meta">   #</span><span class="bash">5 = Methodref          <span class="hljs-comment">#12.#30        // java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="hljs-meta">   #</span><span class="bash">6 = Utf8               (Ljava/lang/String;)V</span><br><span class="hljs-meta">   #</span><span class="bash">7 = Utf8               out</span><br><span class="hljs-meta">   #</span><span class="bash">8 = Class              <span class="hljs-comment">#9             // java/lang/Object</span></span><br><span class="hljs-meta">   #</span><span class="bash">9 = Utf8               java/lang/Object</span><br><span class="hljs-meta">  #</span><span class="bash">10 = Utf8               Hello Jvm!</span><br><span class="hljs-meta">  #</span><span class="bash">11 = NameAndType        <span class="hljs-comment">#7:#23         // out:Ljava/io/PrintStream;</span></span><br><span class="hljs-meta">  #</span><span class="bash">12 = Class              <span class="hljs-comment">#14            // java/io/PrintStream</span></span><br><span class="hljs-meta">  #</span><span class="bash">13 = Utf8               ([Ljava/lang/String;)V</span><br><span class="hljs-meta">  #</span><span class="bash">14 = Utf8               java/io/PrintStream</span><br><span class="hljs-meta">  #</span><span class="bash">15 = Utf8               Hello Java!</span><br><span class="hljs-meta">  #</span><span class="bash">16 = Utf8               main</span><br><span class="hljs-meta">  #</span><span class="bash">17 = NameAndType        <span class="hljs-comment">#29:#20        // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-meta">  #</span><span class="bash">18 = Utf8               SourceFile</span><br><span class="hljs-meta">  #</span><span class="bash">19 = Utf8               println</span><br><span class="hljs-meta">  #</span><span class="bash">20 = Utf8               ()V</span><br><span class="hljs-meta">  #</span><span class="bash">21 = Utf8               StackMapTable</span><br><span class="hljs-meta">  #</span><span class="bash">22 = Utf8               Foo.jasm</span><br><span class="hljs-meta">  #</span><span class="bash">23 = Utf8               Ljava/io/PrintStream;</span><br><span class="hljs-meta">  #</span><span class="bash">24 = Utf8               Code</span><br><span class="hljs-meta">  #</span><span class="bash">25 = Class              <span class="hljs-comment">#26            // Foo</span></span><br><span class="hljs-meta">  #</span><span class="bash">26 = Utf8               Foo</span><br><span class="hljs-meta">  #</span><span class="bash">27 = Class              <span class="hljs-comment">#28            // java/lang/System</span></span><br><span class="hljs-meta">  #</span><span class="bash">28 = Utf8               java/lang/System</span><br><span class="hljs-meta">  #</span><span class="bash">29 = Utf8               &lt;init&gt;</span><br><span class="hljs-meta">  #</span><span class="bash">30 = NameAndType        <span class="hljs-comment">#19:#6         // println:(Ljava/lang/String;)V</span></span><br>&#123;<br>  public Foo();<br>    descriptor: ()V<br>    flags: (0x0001) ACC_PUBLIC<br>    Code:<br>      stack=1, locals=1, args_size=1<br>         0: aload_0<br>         1: invokespecial #4                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V<br>         4: return<br><br>  public static void main(java.lang.String[]);<br>    descriptor: ([Ljava/lang/String;)V<br>    flags: (0x0009) ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=2, locals=2, args_size=1<br>         0: iconst_2<br>         1: istore_1<br>         2: iload_1<br>         3: ifeq          14<br>         6: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>         9: ldc           #2                  // String Hello Java!<br>        11: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>        14: iload_1<br>        15: iconst_1<br>        16: if_icmpne     27<br>        19: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>        22: ldc           #1                  // String Hello Jvm!<br>        24: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>        27: return<br>      StackMapTable: number_of_entries = 2<br>        frame_type = 252 /* append */<br>          offset_delta = 14<br>          locals = [ int ]<br>        frame_type = 12 /* same */<br>&#125;<br>SourceFile: &quot;Foo.jasm&quot;<br></code></pre></td></tr></table></figure><p>两次 主要不同的地方在这里</p><p>原始的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">public static void main(java.lang.String[]);<br>   descriptor: ([Ljava/lang/String;)V<br>   flags: (0x0009) ACC_PUBLIC, ACC_STATIC<br>   Code:<br>     stack=2, locals=2, args_size=1<br>        0: iconst_1<br>        1: istore_1<br>        2: iload_1<br>        3: ifeq          14<br>        6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>        9: ldc           #3                  // String Hello Java!<br>       11: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>       14: iload_1<br>       15: iconst_1<br>       16: if_icmpne     27<br>       19: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>       22: ldc           #5                  // String Hello Jvm!<br>       24: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>       27: return<br>     LineNumberTable:<br>       line 3: 0<br>       line 4: 2<br>       line 5: 6<br>       line 7: 14<br>       line 8: 19<br>       line 10: 27<br>     StackMapTable: number_of_entries = 2<br>       frame_type = 252 /* append */<br>         offset_delta = 14<br>         locals = [ int ]<br>       frame_type = 12 /* same */<br></code></pre></td></tr></table></figure><p>修改后的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">public static void main(java.lang.String[]);<br>   descriptor: ([Ljava/lang/String;)V<br>   flags: (0x0009) ACC_PUBLIC, ACC_STATIC<br>   Code:<br>     stack=2, locals=2, args_size=1<br>        0: iconst_2                       //  我们使用 asmtools 修改了这里<br>        1: istore_1<br>        2: iload_1<br>        3: ifeq          14<br>        6: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>        9: ldc           #2                  // String Hello Java!<br>       11: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>       14: iload_1<br>       15: iconst_1<br>       16: if_icmpne     27<br>       19: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>       22: ldc           #1                  // String Hello Jvm!<br>       24: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>       27: return<br>     StackMapTable: number_of_entries = 2<br>       frame_type = 252 /* append */<br>         offset_delta = 14<br>         locals = [ int ]<br>       frame_type = 12 /* same */<br></code></pre></td></tr></table></figure><p>对于 java虚拟机来说 ，boolean类型被映射成了 整数类型</p><blockquote><p>if(flag == true){} 就是 判断 flag是否等于1</p><p>if(flag){} 就是判断 flag是否不为0</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flume-Sinks文档(未开始)</title>
    <link href="/2023/07/13/flume/Flume%20Sinks/"/>
    <url>/2023/07/13/flume/Flume%20Sinks/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>flume</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flume文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive2.1.1 无法识别高版本hive-orc数据</title>
    <link href="/2023/07/10/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive2.1.1%20%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E9%AB%98%E7%89%88%E6%9C%AChive-orc%E6%95%B0%E6%8D%AE/"/>
    <url>/2023/07/10/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive2.1.1%20%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E9%AB%98%E7%89%88%E6%9C%AChive-orc%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>在 利用 distcp 将 原 apahce hadoop 集群 传输数据到 新 cdh6.3.2 集群后<br>在 新 cdh 集群上 使用 hive 建表，结果 无法查询到 表数据提示 </p><blockquote><p>ORC split generation failed with exception:ArrayIndexOutOfBoundsException: 7</p></blockquote><p>查询资料发现<br><a href="https://issues.apache.org/jira/browse/HIVE-14483">https://issues.apache.org/jira/browse/HIVE-14483</a></p><p>这是由于 HIVE 在 写 ORC 格式数据时，会附带一个 <code>VERSION</code><br>在 READ 数据的时候 会获取这个 <code>VERSION</code><br>但是在 2.1.1 版本的 代码中<br>WriterVersion 这个 枚举类的<code>from</code>方法</p><p>![[orc_error1.png]]</p><p>这个 返回的 枚举类型 有问题<br>在高版本情况下 ,如果 val  =  7 时<br>它不会走到<br><code>return FUTURE;</code><br>会<br><code>return values[7];</code><br>这里很明显就会导致数据越界问题所以我们需要修改这里的代码<br>改成如下代码:</p><p>![[orc_error2.png]]</p><p>做一个判断如果 val 大于等于values的长度，说明是一个高版本的数据，直接返回 FUTURE<br>重新编译class文件以后，更新 jar包<br>这里涉及到  <code>hive-exec</code>  和 <code>hive-orc</code> 两个jar包<br>更新完 jar 以后 上传到 服务器，重启 hive 即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flume-Sources文档(翻译中)</title>
    <link href="/2023/05/18/flume/Flume%20Sources/"/>
    <url>/2023/05/18/flume/Flume%20Sources/</url>
    
    <content type="html"><![CDATA[<h4 id="Avro-Source"><a href="#Avro-Source" class="headerlink" title="Avro Source"></a>Avro Source</h4><p>在Avro端口上监听并接收来自外部Avro客户端流的事件。当与另一个（上一跳）Flume Agent上的内置Avro Sink配对时，它可以创建分层收集拓扑。必填属性以粗体显示。</p><div class="table-container"><table><thead><tr><th>Property Name</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><strong>channels</strong></td><td>-</td><td></td></tr><tr><td><strong>type</strong></td><td>-</td><td>组件类型名称，需要为avro</td></tr><tr><td><strong>bind</strong></td><td>-</td><td>要监听的主机名或IP地址</td></tr><tr><td><strong>port</strong></td><td>-</td><td>要绑定到的端口号</td></tr><tr><td>threads</td><td>-</td><td>生成的 worker 的最大线程数量</td></tr><tr><td>selector.type</td><td></td><td></td></tr><tr><td>selector.*</td><td></td><td></td></tr><tr><td>interceptors</td><td>-</td><td>以空格分隔的拦截器列表</td></tr><tr><td>interceptors.*</td><td></td><td></td></tr><tr><td>compression-type</td><td>none</td><td>这可以是“none” or “deflate”。压缩类型必须与匹配Avro Source的压缩类型匹配</td></tr><tr><td>ssl</td><td>false</td><td>将此设置为true可启用SSL加密。如果启用了SSL，则还必须通过组件级参数（见下文）或全局SSL参数（见SSL/TLS支持部分）指定“keystore” 和 “keystore-password”。</td></tr><tr><td>keystore</td><td>-</td><td>这是指向 Java 密钥库文件的路径。如果没有在这里指定，则将使用全局密钥库（如果全局未定义 则会发生配置错误）。</td></tr><tr><td>keystore-password</td><td>-</td><td>Java密钥库的密码。如果未在此处指定，则将使用全局密钥库密码（如果全局未定义 则会发生配置错误）。</td></tr><tr><td>keystore-type</td><td>JKS</td><td>Java密钥库的类型。这可以是“JKS”或“PKCS12”。如果此处未指定，则将使用全局密钥存储类型（如果全局未定义 则默认为JKS）。</td></tr><tr><td>exclude-protocols</td><td>SSLv3</td><td>要排除的SSL/TLS协议的空格分隔列表。除了指定的协议外，SSLv3将始终被排除在外。</td></tr><tr><td>include-protocols</td><td>-</td><td>要包含的SSL/TLS协议的空格分隔列表。启用的协议将是包含的协议，而没有排除的协议。如果包含的协议为空，则它包括所有支持的协议。</td></tr><tr><td>exclude-cipher-suites</td><td>-</td><td>要排除的以空格分隔的密码套件列表。</td></tr><tr><td>include-cipher-suites</td><td>-</td><td>要包含的以空格分隔的密码套件列表。启用的密码套件将是包含的密码套件，而不包含排除的密码套件。如果包含的密码套件为空，则它包括所有支持的密码套件。</td></tr><tr><td>ipFilter</td><td>false</td><td>将此设置为true以启用netty的ipFiltering</td></tr><tr><td>ipFilterRules</td><td>-</td><td>使用此配置定义N个netty ipFilter模式规则。</td></tr></tbody></table></div><p>名为a1的 Agent 示例：<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">a1.sources</span> = <span class="hljs-string">r1</span><br><span class="hljs-meta">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-meta">a1.sources.r1.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-meta">a1.sources.r1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-meta">a1.sources.r1.bind</span> = <span class="hljs-string">0.0.0.0</span><br><span class="hljs-meta">a1.sources.r1.port</span> = <span class="hljs-string">4141</span><br></code></pre></td></tr></table></figure></p><p>ipFilterRules 示例:<br>ipFilterRules 定义了 N 个 Netty IP 过滤器，用逗号分隔。一个模式规则必须采用下面的格式。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;’allow’ <span class="hljs-keyword">or</span> deny&gt;<span class="hljs-symbol">:&lt;</span>’ip’ <span class="hljs-keyword">or</span> ‘name’ <span class="hljs-keyword">for</span> computer name&gt;<span class="hljs-symbol">:&lt;pattern&gt;</span> <span class="hljs-keyword">or</span> allow/<span class="hljs-symbol">deny:</span>ip/<span class="hljs-symbol">name:</span>patter<br></code></pre></td></tr></table></figure><br>比如:<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">ipFilterRules</span>=<span class="hljs-string">allow:ip:127.*,allow:name:localhost,deny:ip:*</span><br></code></pre></td></tr></table></figure></p><p>请注意，第一个要匹配的规则将从本地主机上的客户端应用，如下例所示<br>这将允许本地主机上的客户端,拒绝来自任何其他ip的客户端</p><blockquote><p>allow:name:localhost,deny:ip:</p></blockquote><p>这将拒绝本地主机上的客户端,允许来自任何其他ip的客户端</p><blockquote><p>deny:name:localhost,allow:ip:</p></blockquote><h4 id="Thrift-Source"><a href="#Thrift-Source" class="headerlink" title="Thrift Source"></a>Thrift Source</h4><p>监听 Thrift 端口并接收来自外部 Thrift 客户端流的事件。当与另一个（上一跳）Flume Agent上的内置 ThriftSink 配对时，它可以创建分层集合拓扑。通过启用kerberos身份验证，可以将Thrift Source 配置为以安全模式启动。agent-principal 和 agent-keytab 是Thrift Source 用来向kerberos KDC进行身份验证的属性。必填属性以粗体显示。</p><div class="table-container"><table><thead><tr><th>Property Name</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><strong>channels</strong></td><td>-</td><td></td></tr><tr><td><strong>type</strong></td><td>-</td><td>组件类型名称，需要为thrift</td></tr><tr><td><strong>bind</strong></td><td>-</td><td>要监听的主机名或IP地址</td></tr><tr><td><strong>port</strong></td><td>-</td><td>要绑定到的端口号</td></tr><tr><td>threads</td><td>-</td><td>生成的 worker 的最大线程数量</td></tr><tr><td>selector.type</td><td></td><td></td></tr><tr><td>selector.*</td><td></td><td></td></tr><tr><td>interceptors</td><td>-</td><td>以空格分隔的拦截器列表</td></tr><tr><td>interceptors.*</td><td></td><td></td></tr><tr><td>compression-type</td><td>none</td><td>这可以是“none” or “deflate”。压缩类型必须与匹配Avro Source的压缩类型匹配</td></tr><tr><td>ssl</td><td>false</td><td>将此设置为true可启用SSL加密。如果启用了SSL，则还必须通过组件级参数（见下文）或全局SSL参数（见SSL/TLS支持部分）指定“keystore” 和 “keystore-password”。</td></tr><tr><td>keystore</td><td>-</td><td>这是指向 Java 密钥库文件的路径。如果没有在这里指定，则将使用全局密钥库（如果全局未定义 则会发生配置错误）。</td></tr><tr><td>keystore-password</td><td>-</td><td>Java密钥库的密码。如果未在此处指定，则将使用全局密钥库密码（如果全局未定义 则会发生配置错误）。</td></tr><tr><td>keystore-type</td><td>JKS</td><td>Java密钥库的类型。这可以是“JKS”或“PKCS12”。如果此处未指定，则将使用全局密钥存储类型（如果全局未定义 则默认为JKS）。</td></tr><tr><td>exclude-protocols</td><td>SSLv3</td><td>要排除的SSL/TLS协议的空格分隔列表。除了指定的协议外，SSLv3将始终被排除在外。</td></tr><tr><td>include-protocols</td><td>-</td><td>要包含的SSL/TLS协议的空格分隔列表。启用的协议将是包含的协议，而没有排除的协议。如果包含的协议为空，则它包括所有支持的协议。</td></tr><tr><td>exclude-cipher-suites</td><td>-</td><td>要排除的以空格分隔的密码套件列表。</td></tr><tr><td>include-cipher-suites</td><td>-</td><td>要包含的以空格分隔的密码套件列表。启用的密码套件将是包含的密码套件，而不包含排除的密码套件。如果包含的密码套件为空，则它包括所有支持的密码套件。</td></tr><tr><td>kerberos</td><td>false</td><td>设置为true可启用kerberos身份验证。在kerberos模式下，成功的身份验证需要 agent-principal 和 agent-keytab 。安全模式下的Thrift Source将只接受来自启用了kerberos并成功通过kerberos KDC身份验证的Thrift客户端的连接。</td></tr><tr><td>agent-principal</td><td>-</td><td>Thrift Source用于向kerberos KDC进行身份验证的kerberos主体。</td></tr><tr><td>agent-keytab</td><td>-</td><td>Thrift Source与 agent-principal 结合使用的keytab location，用于向kerberos KDC进行身份验证。</td></tr></tbody></table></div><p>名为a1的 Agent 示例：<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">a1.sources</span> = <span class="hljs-string">r1</span><br><span class="hljs-meta">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-meta">a1.sources.r1.type</span> = <span class="hljs-string">thrift</span><br><span class="hljs-meta">a1.sources.r1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-meta">a1.sources.r1.bind</span> = <span class="hljs-string">0.0.0.0</span><br><span class="hljs-meta">a1.sources.r1.port</span> = <span class="hljs-string">4141</span><br></code></pre></td></tr></table></figure></p><h4 id="Exec-Source"><a href="#Exec-Source" class="headerlink" title="Exec Source"></a>Exec Source</h4><p>Exec source 在启动时运行给定的 Unix 命令，并期望该进程不断在标准输出上产生数据（除非将属性 logStdErr 设置为 true，否则 stderr 将被简单地丢弃）。如果进程因任何原因退出，则源也会退出，并且不会再产生数据。<br>这意味着像 <code>cat [named pipe]</code> 或 <code>tail -F [file]</code> 这样的配置将产生预期的结果，而 <code>date</code> 可能不会。<br>前两个命令产生数据流，而后者产生单个事件然后退出。<br>必需的属性以粗体显示。</p><div class="table-container"><table><thead><tr><th>Property Name</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><strong>channels</strong></td><td>-</td><td></td></tr><tr><td><strong>type</strong></td><td>-</td><td>组件类型名称，需要为thrift</td></tr><tr><td><strong>command</strong></td><td>-</td><td>要监听的主机名或IP地址</td></tr><tr><td>shell</td><td>-</td><td>用于运行命令的shell调用。例如/bin/sh-c。仅对于依赖于外壳程序功能（如通配符、反勾号、管道等）的命令是必需的。</td></tr><tr><td>restartThrottle</td><td>10000</td><td>尝试重新启动之前等待的时间（以毫秒为单位）</td></tr><tr><td>restart</td><td>false</td><td>如果执行的cmd死了，是否应该重新启动 。</td></tr><tr><td>logStdErr</td><td>false</td><td>是否应记录命令的stderr</td></tr><tr><td>batchSize</td><td>20</td><td>一次读取并发送到通道的最大行数</td></tr><tr><td>batchTimeout</td><td>3000</td><td>如果未达到缓冲区大小，则在数据被向下推送之前等待的时间（以毫秒为单位）</td></tr><tr><td>selector.type</td><td>replicating</td><td>复制或多路传输</td></tr><tr><td>selector.*</td><td></td><td>取决于 selector.type的值</td></tr><tr><td>interceptors</td><td>-</td><td>以空格分隔的拦截器列表</td></tr><tr><td>interceptors.*</td><td></td></tr></tbody></table></div><blockquote><p><strong>Warning</strong><br>ExecSource 和其他异步 Source 的问题在于，Source 不能保证如果将事件放入 Channel 失败，客户端就知道了。在这种情况下，数据将会丢失。例如，最常见的请求之一是类似于 <code>tail -F [file]</code> 的用例，其中应用程序将数据写入磁盘上的日志文件，而 Flume 会跟踪文件，将每行作为一个事件发送。虽然这是可能的，但存在一个明显的问题；如果 Channel 填满，Flume 就无法发送事件了，怎么办？Flume 没有办法向写日志文件的应用程序表明它需要保留日志或者由于某种原因没有发送事件。如果这听起来没有意义，你只需要知道：使用单向异步接口（如 ExecSource）时，您的应用程序永远无法保证数据已被接收！<br>作为这个警告的扩展 - 为了完全清楚 - 当使用这个源时，绝对没有事件传递的保证。<br>为了更强的可靠性保证.<br>请考虑使用 Spooling Directory Source、Taildir Source 或通过 SDK 直接与 Flume 进行集成。</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">a1.sources</span> = <span class="hljs-string">r1</span><br><span class="hljs-meta">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-meta">a1.sources.r1.type</span> = <span class="hljs-string">exec</span><br><span class="hljs-meta">a1.sources.r1.command</span> = <span class="hljs-string">tail -F /var/log/secure</span><br><span class="hljs-meta">a1.sources.r1.channels</span> = <span class="hljs-string">c1</span><br></code></pre></td></tr></table></figure><p>“shell”配置用于通过命令shell（如Bash或Powershell）调用“command”。“command”作为参数传递给“shell”以执行。这允许“命令”使用shell的功能，如通配符、反勾号、管道、循环、条件等。在没有“shell”配置的情况下，将直接调用“command”。“shell”的常见值：‘/bin/sh -c’, ‘/bin/ksh -c’, ‘cmd /c’, ‘powershell -Command’等。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">a1.sources.tailsource-1.type</span> = <span class="hljs-string">exec</span><br><span class="hljs-meta">a1.sources.tailsource-1.shell</span> = <span class="hljs-string">/bin/bash -c</span><br><span class="hljs-meta">a1.sources.tailsource-1.command</span> = <span class="hljs-string">for i in /path/*.txt; do cat $i; done</span><br></code></pre></td></tr></table></figure><h4 id="JMS-Source"><a href="#JMS-Source" class="headerlink" title="JMS Source"></a>JMS Source</h4><p>JMS Source 从JMS目标（如队列或主题）读取消息。作为JMS应用程序，它应该与任何JMS提供程序一起工作，但仅在 ActiveMQ 中进行了测试。JMS Source 提供可配置的批大小、消息选择器、用户/传递和消息到 flume event 转换器。请注意，供应商提供的JMS jar应该使用<code>plugins.d</code> 目录（首选）、命令行上的 <code>–classpath</code> 或通过<code>flume-env.sh</code>中的<code>FLUME_CLASSPATH</code>变量包含在Flume classpath中。</p><p>所需属性以粗体显示。</p><div class="table-container"><table><thead><tr><th>Property Name</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><strong>channels</strong></td><td>-</td><td></td></tr><tr><td><strong>type</strong></td><td>-</td><td>组件类型名称，需要为thrift</td></tr><tr><td><strong>initialContextFactory</strong></td><td>-</td><td>要监听的主机名或IP地址</td></tr><tr><td><strong>connectionFactory</strong></td><td>-</td><td>用于运行命令的shell调用。例如/bin/sh-c。仅对于依赖于外壳程序功能（如通配符、反勾号、管道等）的命令是必需的。</td></tr><tr><td><strong>providerURL</strong></td><td>10000</td><td>尝试重新启动之前等待的时间（以毫秒为单位）</td></tr><tr><td><strong>destinationName</strong></td><td></td><td></td></tr><tr><td><strong>destinationType</strong></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>flume</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flume文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flume-User-Guide(1.11)(翻译中)</title>
    <link href="/2023/05/15/flume/flume%20User%20Guide(1.11)/"/>
    <url>/2023/05/15/flume/flume%20User%20Guide(1.11)/</url>
    
    <content type="html"><![CDATA[<p>翻译自 <a href="https://flume.apache.org/releases/content/1.11.0/FlumeUserGuide.html">Flume 1.11.0 User Guide — Apache Flume</a></p><h2 id="Introduction介绍"><a href="#Introduction介绍" class="headerlink" title="Introduction介绍"></a>Introduction介绍</h2><h3 id="Overview概述"><a href="#Overview概述" class="headerlink" title="Overview概述"></a>Overview概述</h3><p>Apache Flume 是一个分布式、可靠和高可用的系统，用于有效地收集、聚合和移动来自许多不同来源的大量日志数据到一个集中的数据存储中。</p><p>使用 Apache Flume 不仅限于日志数据聚合。由于数据源是可定制的，因此 Flume 可用于传输大量事件数据，包括但不限于网络流量数据、社交媒体生成的数据、电子邮件消息和几乎任何可能的数据源。</p><p>Apache Flume 是 Apache Software Foundation 的顶级项目之一。</p><h3 id="System-Requirements系统要求"><a href="#System-Requirements系统要求" class="headerlink" title="System Requirements系统要求"></a>System Requirements系统要求</h3><ol><li>Java Runtime Environment - Java 1.8 or later[Java1.8+]</li><li>Memory - Sufficient memory for configurations used by sources, channels or sinks[内存]</li><li>Disk Space - Sufficient disk space for configurations used by channels or sinks[磁盘空间]</li><li>Directory Permissions - Read/Write permissions for directories used by agent[目录权限]</li></ol><h3 id="Architecture结构"><a href="#Architecture结构" class="headerlink" title="Architecture结构"></a>Architecture结构</h3><h4 id="Data-flow-model数据流模型"><a href="#Data-flow-model数据流模型" class="headerlink" title="Data flow model数据流模型"></a>Data flow model数据流模型</h4><p>Flume Event 被定义为一个具有字节有效负载和可选的一组字符串属性的数据流单元。<br>Flume  Agent是一个 (JVM) 进程，托管事件从外部源流向下一个目标地点（跳跃）的组件。<br>![[Data-flow-model.excalidraw]]</p><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><p>Flume source 消费 从外部源（如 web 服务器）传递给它的事件。<br>外部源以 目标 Flume Source 可识别的格式将事件发送到 Flume。<br>例如，可以使用 Avro Flume Source 接收来自 Avro 客户端或其他发送事件的 Flume 代理中的 Avro sink 的 Avro 事件。<br>可以使用 Thrift Flume Source 定义类似的流程，以从 Thrift Sink 或 Flume Thrift Rpc 客户端或使用 Flume thrift 协议生成的任何语言编写的 Thrift 客户端接收事件。</p><h5 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h5><p>当 Flume Source 接收到事件时，它将其存储到一个或多个 Channel 中。Channel 是一个被动存储区，保留事件直到它被 Flume sink 消费。<br>比如 文件通道——它是由本地文件系统支持的。</p><h5 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h5><p>Flume Sink 从通道中移除事件，并将其放入外部存储库，例如 HDFS（通过 Flume HDFS sink）或将其转发到流中下一个 Flume Agent 的 Flume source（下一跳）。在给定代理内部的源和 sink 异步运行，事件被暂存在通道中。</p><blockquote><p>下一跳<em>(nexthop</em>)表示下一站数据包要到达的地址</p></blockquote><h4 id="Complex-flows复杂流"><a href="#Complex-flows复杂流" class="headerlink" title="Complex flows复杂流"></a>Complex flows复杂流</h4><p>Flume 允许用户构建 multi-hop(多跳) 流程，事件在到达最终目的地之前通过多个代理传输。它还允许扇入和扇出流程、上下文路由和备用路线（故障转移）以处理 failed hops (失败的跳点)。</p><h4 id="Reliability可靠性"><a href="#Reliability可靠性" class="headerlink" title="Reliability可靠性"></a>Reliability可靠性</h4><p>事件在每个 Agent 的 Channel 中进行。然后将事件传递到流中的下一个Agent 或 终端存储库（如HDFS）。只有在事件存储在下一个 Agent 的 Channel 或终端存储库中之后，才会从通道中删除这些事件。这就是Flume中的单跳消息传递语义如何提供流的 end-to-end reliability(端到端可靠性)。</p><p>Flume使用事务性方法来保证事件的可靠传递。Source 和 sink 分别封装了存储/检索的事务，并使用由 Channel 提供的事务存储或提供事件。这确保了一组事件可在流中从一个点可靠地传递到另一个点。在多跳流程的情况下，上一跳的 sink 和下一跳的 source 都在运行它们的事务，以确保数据安全地存储在下一跳的 Channel 中。</p><h4 id="Recoverability可恢复性"><a href="#Recoverability可恢复性" class="headerlink" title="Recoverability可恢复性"></a>Recoverability可恢复性</h4><p>事件被暂存在 Channel 中，并由 Channel 管理故障恢复。Flume 支持一个由本地文件系统支持的持久化文件通道。<br>还有一个 Memory Channel，它将事件存储在一个内存队列中，速度更快，但任何在 Agent 进程死亡时仍留在 Memory Channel(内存通道)中的事件都无法恢复。</p><p>Flume 的 KafkaChannel 使用 Apache Kafka 暂存事件。使用复制的 Kafka 主题作为通道可以帮助避免在磁盘故障的情况下丢失事件。</p><h2 id="Standard-Setup标准设置"><a href="#Standard-Setup标准设置" class="headerlink" title="Standard Setup标准设置"></a>Standard Setup标准设置</h2><p>本节介绍 如何使用Flume长期以来的配置技术以及使用属性文件配置和连接Flume组件。<br>在下一节了解如何使用 Spring Boot 创建 Flume 应用程序。</p><h3 id="Setting-up-an-agent设置Agent"><a href="#Setting-up-an-agent设置Agent" class="headerlink" title="Setting up an agent设置Agent"></a>Setting up an agent设置Agent</h3><p>Flume 代理配置存储在一个或多个遵循Java properties 文件格式的配置文件中。可以在这些配置文件中指定一个或多个代理的配置。配置包括 Agent 中每个 Source、Sink 和 Channel 的属性，以及它们如何连接在一起以形成数据流。</p><h4 id="Configuring-individual-components配置单个组件"><a href="#Configuring-individual-components配置单个组件" class="headerlink" title="Configuring individual components配置单个组件"></a>Configuring individual components配置单个组件</h4><p>流中的每个组件（Source、Sink 或 Channel）都名称、类型和一组属性，这些属性特定于类型和实例化。<br>例如:<br>Avro Source 需要一个主机名（或IP地址）和一个端口号来接收数据。<br>Memory Channel 可以具有最大队列大小（”capacity”）<br>HDFS Sink 需要知道 文件系统URI、创建文件的路径、文件旋转频率（“HDFS.rollInterval”）等。<br>组件的所有这些属性都需要在托管Flume Agent 的 properties 文件中设置。</p><h4 id="Wiring-the-pieces-together连接组件"><a href="#Wiring-the-pieces-together连接组件" class="headerlink" title="Wiring the pieces together连接组件"></a>Wiring the pieces together连接组件</h4><p>为了构成流，Agent 需要知道要加载哪些单独的组件以及它们是如何连接的。<br>这是通过列出代理中每个 Source、Sink 和 Channel 的名称来完成的，然后为每个 Source 和 Sink 指定 Channel。<br>例如:<br>Agent 将事件从名为 <code>avroWeb</code> 的 Avro Source 通过名为 <code>file-channel</code> 的 File Channel 流向名为 <code>hdfs-cluster1</code> 的 HDFS Sink。配置文件将包含这些组件的名称，并将 <code>file-channel</code> 作为 <code>avroWeb</code> Source 和 <code>hdfs-cluster1</code>  Sink 的共享 Channel。</p><h4 id="Starting-an-agent启动Agent"><a href="#Starting-an-agent启动Agent" class="headerlink" title="Starting an agent启动Agent"></a>Starting an agent启动Agent</h4><p>Agent 程序是使用一个名为 <code>flume-ng</code> 的shell脚本启动的，该脚本位于 flume 发行版的 bin 目录中。您需要在命令行上指定代理名称、配置目录和配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/flume-ng agent -n $agent_name -c conf -f conf/flume-conf.properties.template<br></code></pre></td></tr></table></figure><p>现在，Agent 将开始运行在给定属性文件(conf/flume-conf.properties.template) 中配置的 Source 和 Sink</p><h4 id="A-simple-example"><a href="#A-simple-example" class="headerlink" title="A simple example"></a>A simple example</h4><p>在这里，我们给出了一个示例配置文件，描述了单节点Flume部署。此配置允许用户生成事件，然后将其记录到控制台。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># example.conf: A single-node Flume configuration</span><br><br><span class="hljs-comment"># Name the components on this agent</span><br><span class="hljs-meta">a1.sources</span> = <span class="hljs-string">r1</span><br><span class="hljs-meta">a1.sinks</span> = <span class="hljs-string">k1</span><br><span class="hljs-meta">a1.channels</span> = <span class="hljs-string">c1</span><br><br><span class="hljs-comment"># Describe/configure the source</span><br><span class="hljs-meta">a1.sources.r1.type</span> = <span class="hljs-string">netcat</span><br><span class="hljs-meta">a1.sources.r1.bind</span> = <span class="hljs-string">localhost</span><br><span class="hljs-meta">a1.sources.r1.port</span> = <span class="hljs-string">44444</span><br><br><span class="hljs-comment"># Describe the sink</span><br><span class="hljs-meta">a1.sinks.k1.type</span> = <span class="hljs-string">logger</span><br><br><span class="hljs-comment"># Use a channel which buffers events in memory</span><br><span class="hljs-meta">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><span class="hljs-meta">a1.channels.c1.capacity</span> = <span class="hljs-string">1000</span><br><span class="hljs-meta">a1.channels.c1.transactionCapacity</span> = <span class="hljs-string">100</span><br><br><span class="hljs-comment"># Bind the source and sink to the channel</span><br><span class="hljs-meta">a1.sources.r1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-meta">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></td></tr></table></figure><p>此配置定义了一个名为a1的 Agent 。<br>a1有一个监听端口44444上数据的 Source.<br>一个在内存中缓冲事件数据的 Channel.<br>以及一个将事件数据记录到控制台的Sink<br>配置文件命名各种组件，然后描述它们的类型和配置参数。给定的配置文件可能定义了几个命名代理；当一个给定的Flume进程启动时，会传递一个标志，告诉它要显示哪个 Agent。</p><p>给定此配置文件，我们可以按如下方式启动Flume：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/flume-ng agent --conf conf --conf-file example.conf --name a1<br></code></pre></td></tr></table></figure><p>请注意，在完整的部署中，我们通常会再包含一个选项：</p><blockquote><p>—conf=conf-dir</p></blockquote><p>conf-dir目录将包括一个 shell 脚本flume-env.sh，并可能包括一个log4j配置文件(配置flume日志相关参数)。</p><p>从一个单独的终端，我们可以<code>telnet</code>端口44444并向Flume发送一个事件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> telnet localhost 44444</span><br>Trying 127.0.0.1...<br>Connected to localhost.localdomain (127.0.0.1).<br>Escape character is &#x27;^]&#x27;.<br>Hello world! &lt;ENTER&gt;<br>OK<br></code></pre></td></tr></table></figure><p>原始Flume终端将在日志消息中输出该事件。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">12</span>/<span class="hljs-number">06</span>/<span class="hljs-number">19</span> <span class="hljs-number">15</span>:<span class="hljs-number">32</span>:<span class="hljs-number">19</span> INFO source.NetcatSource: Source starting<br><span class="hljs-attribute">12</span>/<span class="hljs-number">06</span>/<span class="hljs-number">19</span> <span class="hljs-number">15</span>:<span class="hljs-number">32</span>:<span class="hljs-number">19</span> INFO source.NetcatSource: Created serverSocket:sun.nio.ch.ServerSocketChannelImpl[/<span class="hljs-number">127.0.0.1:44444</span>]<br><span class="hljs-attribute">12</span>/<span class="hljs-number">06</span>/<span class="hljs-number">19</span> <span class="hljs-number">15</span>:<span class="hljs-number">32</span>:<span class="hljs-number">34</span> INFO sink.LoggerSink: Event: &#123; headers:&#123;&#125; body: <span class="hljs-number">48</span> <span class="hljs-number">65</span> <span class="hljs-number">6</span>C <span class="hljs-number">6</span>C <span class="hljs-number">6</span>F <span class="hljs-number">20</span> <span class="hljs-number">77</span> <span class="hljs-number">6</span>F <span class="hljs-number">72</span> <span class="hljs-number">6</span>C <span class="hljs-number">64</span> <span class="hljs-number">21</span> <span class="hljs-number">0</span>D          Hello world!. &#125;<br></code></pre></td></tr></table></figure><p>祝贺您-您已成功配置和部署Flume Agent！后面的章节将更详细地介绍 Agent 配置。</p><h4 id="Configuration-from-URIs"><a href="#Configuration-from-URIs" class="headerlink" title="Configuration from URIs"></a>Configuration from URIs</h4><p>从1.10.0版本开始，Flume支持使用URI进行配置，而不是仅从本地文件进行配置。包括对HTTP(S)、文件和类路径URI的直接支持。<br>HTTP支持包括对使用基本授权的身份验证的支持，但可以通过使用<code>–auth-provider</code>选项指定实现<code>AuthorizationProvider</code>接口的类的完全限定名称来支持其他授权机制。如果目标服务器正确响应<code>If-Modified-Since</code>标头，HTTP还支持使用轮询重新加载配置文件。</p><p>要指定HTTP身份验证的凭据，请添加：</p><blockquote><p>—conf-user userid —conf-password password</p></blockquote><p>到启动命令。</p><h4 id="Multiple-Configuration-Files"><a href="#Multiple-Configuration-Files" class="headerlink" title="Multiple Configuration Files"></a>Multiple Configuration Files</h4><p>从1.10.0版本开始，Flume支持从多个配置文件进行配置，而不是仅从一个配置文件中进行配置。这样可以更容易地根据特定环境覆盖或添加值。每个文件都应该使用自己的–conf文件或–conf-uri选项进行配置。但是，所有文件都应该提供–conf文件或–conf-uri。如果–conf文件和–conf-uri一起显示为选项，则在合并任何–conf配置之前，将处理所有–conf-uri配置。</p><p>例如，以下各项的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/flume-ng agent --conf conf --conf-file example.conf --conf-uri http://localhost:80/flume.conf --conf-uri http://localhost:80/override.conf --name a1<br></code></pre></td></tr></table></figure><p>将导致首先读取 <code>flume.conf</code>，将 <code>override.conf</code> 与其合并，最后将 example.conf 合并到最后。<br>如果需要将 <code>example.conf</code> 作为基本配置,则应使用 <code>–conf-uri</code> 选项将其指定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">--conf-uri classpath://example.conf<br>or<br>--conf-uri file:///example.conf<br></code></pre></td></tr></table></figure><p>这取决于应该如何访问它。</p><h4 id="Using-environment-variables-system-properies-or-other-properties-configuration-files使用环境变量、系统属性或其他属性配置文件"><a href="#Using-environment-variables-system-properies-or-other-properties-configuration-files使用环境变量、系统属性或其他属性配置文件" class="headerlink" title="Using environment variables, system properies, or other properties configuration files使用环境变量、系统属性或其他属性配置文件"></a>Using environment variables, system properies, or other properties configuration files使用环境变量、系统属性或其他属性配置文件</h4><p>Flume能够替换配置中的环境变量。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properies">a1.sources &#x3D; r1<br>a1.sources.r1.type &#x3D; netcat<br>a1.sources.r1.bind &#x3D; 0.0.0.0<br>a1.sources.r1.port &#x3D; $&#123;env:NC_PORT&#125;<br>a1.sources.r1.channels &#x3D; c1<br><br></code></pre></td></tr></table></figure><br>注意：它目前只适用于值，不适用于键。（即仅在配置行的=标记的“右侧”。）</p><p>从1.10.0版本开始，Flume使用<code>Apache Commons Text</code>的<code>StringSubstitutior</code>类解析配置值，该类使用默认的查找集以及使用配置文件作为替换值源的查找。</p><p>例如：：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">NC_PORT=44444 bin/flume-ng agent –conf conf –conf-file example.conf –name a1<br></code></pre></td></tr></table></figure></p><p>注意，上面只是一个例子，环境变量可以通过其他方式配置，包括在conf/flome-env.sh中设置。</p><p>如前所述，还支持系统属性，因此配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properies">a1.sources &#x3D; r1<br>a1.sources.r1.type &#x3D; netcat<br>a1.sources.r1.bind &#x3D; 0.0.0.0<br>a1.sources.r1.port &#x3D; $&#123;sys:NC_PORT&#125;<br>a1.sources.r1.channels &#x3D; c1<br></code></pre></td></tr></table></figure><br>可以使用，并且启动命令可以是：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/flume-ng agent --conf conf --conf-file example.conf --name a1 -DNC_PORT=44444<br></code></pre></td></tr></table></figure></p><p>此外，由于允许多个配置文件，第一个文件可能包含：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properies">a1.sources &#x3D; r1<br>a1.sources.r1.type &#x3D; netcat<br>a1.sources.r1.bind &#x3D; 0.0.0.0<br>a1.sources.r1.port &#x3D; $&#123;NC_PORT&#125;<br>a1.sources.r1.channels &#x3D; c1<br></code></pre></td></tr></table></figure><br>并且覆盖文件可以包含：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properies">NC_PORT &#x3D; 44444<br></code></pre></td></tr></table></figure></p><p>在这种情况下，启动命令可以是：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/flume-ng agent --conf conf --conf-file example.conf --conf-file override.conf --name a1<br></code></pre></td></tr></table></figure><br>请注意，如同先前版本中指定环境变量的方法仍然有效，但已被弃用，建议使用${env:varName}</p><h4 id="Using-a-command-options-file使用命令选项文件"><a href="#Using-a-command-options-file使用命令选项文件" class="headerlink" title="Using a command options file使用命令选项文件"></a>Using a command options file使用命令选项文件</h4><p>从1.10.0版本开始，命令选项可以放在类路径上的 <code>/etc/flume/flume.opts</code> 或<code>flume.opt</code>中，而不是在命令行上指定所有命令选项。例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">conf-file = example.conf<br>conf-file = override.conf<br>name = a1<br></code></pre></td></tr></table></figure></p><h4 id="Logging-raw-data-记录原始数据"><a href="#Logging-raw-data-记录原始数据" class="headerlink" title="Logging raw data 记录原始数据"></a>Logging raw data 记录原始数据</h4><p>在许多生产环境中，记录流经摄取管道的原始数据流不是理想的行为，因为这可能会导致敏感数据或安全相关配置（如密钥）泄漏到 Flume 日志文件。默认情况下，Flume 不会记录此类信息。另一方面，如果数据管道中断，Flume 将尝试为调试问题提供线索。</p><p>调试事件管道问题的一种方法是设置一个连接到Logger接收器的额外内存通道，该通道将向Flume日志输出所有事件数据。然而，在某些情况下，这种方法是不够的。</p><p>为了能够记录与事件和配置相关的数据，除了log4j属性之外，还必须设置一些Java系统属性。</p><p>要启用与配置相关的日志记录，请设置Java系统属性<br><code>-Dorg.apache.flume.log.printconfig=true</code>。这可以通过命令行传递，也可以在<code>flume-env.sh</code>中的<code>JAVA_OPTS</code>变量中设置。</p><p>要启用数据日志记录，请以与上述相同的方式设置Java系统属性<br><code>-Dorg.apache.flume.log.rawdata=true</code>。对于大多数组件，log4j日志记录级别也必须设置为 DEBUG 或 TRACE，以使特定于事件的日志记录显示在Flume日志中。</p><p>以下是启用配置日志记录和原始数据日志记录的示例：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/flume-ng agent --conf conf --conf-file example.conf --name a1 -Dorg.apache.flume.log.printconfig=true -Dorg.apache.flume.log.rawdata=true<br></code></pre></td></tr></table></figure></p><h4 id="Zookeeper-based-Configuration-zookeeper基础设置"><a href="#Zookeeper-based-Configuration-zookeeper基础设置" class="headerlink" title="Zookeeper based Configuration zookeeper基础设置"></a>Zookeeper based Configuration zookeeper基础设置</h4><p>Flum e通过 Zookeeper 支持 Agent 配置。这是一个实验特性。配置文件需要上传到 Zookeeper 中，并带有可配置的前缀。配置文件存储在Zookeeper节点数据中。以下是代理a1和a2的Zookeeper节点树的样子<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">- /flume<br> |- /a1 [Agent config file]<br> |- /a2 [Agent config file]<br></code></pre></td></tr></table></figure><br>上传配置文件后，使用以下选项启动代理<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/flume-ng agent –conf conf -z zkhost:2181,zkhost1:2181 -p /flume –name a1<br></code></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th>参数名</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>z</td><td>-</td><td>Zookeeper connection string. 以逗号分隔的 hostname:port 列表</td></tr><tr><td>p</td><td>/flume</td><td>Zookeeper中存储代理配置的基本路径</td></tr></tbody></table></div><h4 id="Installing-third-party-plugins安装第三方插件"><a href="#Installing-third-party-plugins安装第三方插件" class="headerlink" title="Installing third-party plugins安装第三方插件"></a>Installing third-party plugins安装第三方插件</h4><p>Flume有一个完全基于插件的体系结构。虽然Flume提供了许多开箱即用的 Sources、Channels、Sinks、Serializers 等，但也存在许多与Flume分开提供的实现。</p><p>虽然一直可以通过将自定义Flume组件的jar添加到 <code>flume-env.sh</code> 文件中的 <code>FLUME_CLASSPATH</code> 变量来包含这些组件，但Flume现在支持一个名为 <code>plugins.d</code> 的特殊目录，该目录可以自动找到以特定格式打包的插件。这样可以更容易地管理插件打包问题，也可以更简单地调试和排除一些问题，尤其是 library 依赖关系冲突的问题。</p><h5 id="The-plugins-d-directory-plugins-d目录"><a href="#The-plugins-d-directory-plugins-d目录" class="headerlink" title="The plugins.d directory plugins.d目录"></a>The plugins.d directory plugins.d目录</h5><p><code>plugins.d</code>目录位于<code>$FLUME_HOME/plugins.d</code>。在启动时，<code>flume-ng</code>启动脚本在<code>plugins-d</code>目录中查找符合以下格式的插件，并在启动java时将其包含在正确的路径中。</p><h5 id="Directory-layout-for-plugins插件的目录布局"><a href="#Directory-layout-for-plugins插件的目录布局" class="headerlink" title="Directory layout for plugins插件的目录布局"></a>Directory layout for plugins插件的目录布局</h5><p><code>plugins.d</code>中的每个插件（子目录）最多可以有三个子目录：</p><ol><li>lib - 插件的jar</li><li>libext - 插件的依赖jar</li><li>native - 任何必需的 native libraries, 比如.so文件</li></ol><p>plugins.d目录中两个插件的示例:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">plugins.d/<br>plugins.d/custom-source-1/<br>plugins.d/custom-source-1/lib/my-source.jar<br>plugins.d/custom-source-1/libext/spring-core-2.5.6.jar<br>plugins.d/custom-source-2/<br>plugins.d/custom-source-2/lib/custom.jar<br>plugins.d/custom-source-2/native/gettext.so<br></code></pre></td></tr></table></figure></p><h3 id="Data-ingestion数据摄入"><a href="#Data-ingestion数据摄入" class="headerlink" title="Data ingestion数据摄入"></a>Data ingestion数据摄入</h3><p>Flume支持许多从外部来源获取数据的机制。</p><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><p>Flume 发行版中包含的 Avro客户端 可以使用Avro RPC 机制向Flume Avro Source 发送给定的文件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/flume-ng avro-client -H localhost -p 41414 -F /usr/logs/log.10<br></code></pre></td></tr></table></figure><br>上面的命令将 /usr/logs/log.10 到的内容发送到在该端口上监听的 Flume Source。</p><h4 id="Executing-commands执行命令"><a href="#Executing-commands执行命令" class="headerlink" title="Executing commands执行命令"></a>Executing commands执行命令</h4><p>有一个<code>exec source</code>执行给定的命令并消耗输出。输出的单个“行”，即后面跟着回车（’\r’）或换行（’\n’）的文本，或两者同时出现。</p><h4 id="Network-streams网络流"><a href="#Network-streams网络流" class="headerlink" title="Network streams网络流"></a>Network streams网络流</h4><p>Flume支持以下机制从流行的日志流类型中读取数据，例如：</p><ol><li>Avro</li><li>Thrift</li><li>Syslog</li><li>Netcat</li></ol><h3 id="Setting-multi-agent-flow设置多agent流"><a href="#Setting-multi-agent-flow设置多agent流" class="headerlink" title="Setting multi-agent flow设置多agent流"></a>Setting multi-agent flow设置多agent流</h3><p>为了在多个 Agent 或 hops 之间传输数据，前一个 Agent 的 Sink 和当前 hops 的 Source 需要是avro类型，Sink 指向 Source 的主机名（或IP地址）和端口。<br>![[setting-multi-agent-flow.png]]</p><h3 id="Consolidation合并"><a href="#Consolidation合并" class="headerlink" title="Consolidation合并"></a>Consolidation合并</h3><p>日志收集中一个非常常见的场景是，大量生成日志的客户端将日志数据发送到连接到存储子系统的少数消费者代理。例如，从数百个web服务器收集的日志被发送到十几个写入HDFS集群的 Flume Agent。<br>![[consolidation1.png]]</p><p>这可以在Flume中通过配置具有avro Sink 的多个第一层代理来实现，所有 Agent 都指向单个 Agent 的avro Source（同样，在这种情况下，您可以使用 thrift sources/sinks/clients）。第二层 Agent 上的 Source 将接收到的 事件 合并到单个Channel 中，该通道由 Sink 消费到其最终目的地(如 HDFS)。</p><h3 id="Multiplexing-the-flow多路传输流"><a href="#Multiplexing-the-flow多路传输流" class="headerlink" title="Multiplexing the flow多路传输流"></a>Multiplexing the flow多路传输流</h3><p>Flume支持将事件流(event flow)多路传输到一个或多个目的地。这是通过定义 流复用器(flow multiplexer) 来实现的，该流复用器可以将事件复制或选择性地路由到一个或多个channel。<br>![[multiplexing-the-flow1.png]]</p><p>上面的例子显示了一个来自 Agent “foo”的 Source，它将流分散到三个不同的Channel。这种扇出可以是复制或多路复用。在复制流的情况下，每个事件都会发送到所有三个Channel。对于多路复用情况，当事件的属性与预先配置的值匹配时，将事件传递到可用 Channel 的子集。<br>例如:<br>如果一个名为“txType”的事件属性设置为“customer”，那么它应该转到channel1和channel3，如果它是“vendor”，那么应该转到channel 2，否则转到channel3。可以在代理的配置文件中设置映射。</p><h2 id="Spring-Boot-Setup"><a href="#Spring-Boot-Setup" class="headerlink" title="Spring Boot Setup"></a>Spring Boot Setup</h2><p>ApacheFlume提供了<code>flume-spring-boot</code>模块，为使用<code>Spring Boot</code>打包和配置应用程序提供支持。应使用2.0.0版或更高版本<code>flume-spring-boot</code>。</p><h3 id="Creating-the-application创建应用"><a href="#Creating-the-application创建应用" class="headerlink" title="Creating the application创建应用"></a>Creating the application创建应用</h3><p>Flume的Spring Boot支持提供了要使用Spring配置的主类<code>org.apache.flume.spring.boot.FlumeApplication</code>。使用<code>Spring Boot</code>的Flume应用程序应该将其配置为<code>Spring Boot Maven plugin</code>的主类，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">executable</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">executable</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>org.apache.flume.spring.boot.FlumeApplication<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="Component-Scanning组件扫描"><a href="#Component-Scanning组件扫描" class="headerlink" title="Component Scanning组件扫描"></a>Component Scanning组件扫描</h3><p>Spring Boot将自动定位Flume提供的所有Spring组件。然而为了配置Flume应用程序，Spring需要应用程序使用的配置和包名，以便Spring定位这些组件。这是在应用程序中通过提供<code>META-INF/spring.factories</code>文件来实现的，该文件允许对一个类进行自动配置，然后为应用程序的其余部分提供组件扫描信息(自动注入)。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.sample.myapp.config.AppConfig<br></code></pre></td></tr></table></figure></p><p><code>com.sample.config.AppConfig.java</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sample.myapp.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages=&quot;com.sample.myapp&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfiguration</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><br>这将导致<code>com.sample.myapp</code>包中的所有类及其子包被Spring扫描以查找要包含的组件。请注意，在那里找到的类也可能使用Spring的<code>@Import</code>注解将类包括在其他包中。</p><h3 id="Component-Wiring组件连接"><a href="#Component-Wiring组件连接" class="headerlink" title="Component Wiring组件连接"></a>Component Wiring组件连接</h3><p>Flume的Spring Boot支持将自动收集所有定义的Channel、SourceRunners和SinkRunners并启动它们。要做到这一点，必须首先在类声明中包含<code>@Configuration</code>注解的类中使用Spring <code>@Bean</code>注解将它们创建为 <code>Spring Singletons</code>，然后像 “normal” <code>FlumeApplication</code>类那样初始化它们。要定义这些组件，应用程序应该提供一个创建这些Flume组件的<code>Configuration</code>类。生成序列号，将其写入Memory Channel，<br>使用这些事件而不在任何地方发布的示例配置如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages=&quot;com.sample.myapp&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractFlumeConfiguration</span> </span>&#123;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;flume.sources.source1&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">source1Properties</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>  &#125;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;flume.channels.channel1&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">channel1Properties</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>  &#125;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Channel <span class="hljs-title">memoryChannel</span><span class="hljs-params">(Map&lt;String, String&gt; channel1Properties)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> configureChannel(<span class="hljs-string">&quot;channel1&quot;</span>, MemoryChannel.class, channel1Properties);<br>  &#125;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> SourceRunner <span class="hljs-title">seqSource</span><span class="hljs-params">(Channel memoryChannel, Map&lt;String, String&gt; source1Properties)</span> </span>&#123;<br>    ChannelSelector selector = <span class="hljs-keyword">new</span> ReplicatingChannelSelector();<br>    selector.setChannels(listOf(memoryChannel));<br>    <span class="hljs-keyword">return</span> configureSource(<span class="hljs-string">&quot;source1&quot;</span>, SequenceGeneratorSource.class, selector,<br>        source1Properties);<br>  &#125;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> SinkRunner <span class="hljs-title">nullSink</span><span class="hljs-params">(Channel memoryChannel)</span> </span>&#123;<br>    Sink sink = configureSink(<span class="hljs-string">&quot;null&quot;</span>, NullSink.class, memoryChannel,<span class="hljs-keyword">null</span>);<br>    <span class="hljs-keyword">return</span> createSinkRunner(configureSinkProcessor(<span class="hljs-keyword">null</span>, DefaultSinkProcessor.class,<br>        listOf(sink)));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>此配置可能如下所示:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">flume-test</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">41414</span><br><br><span class="hljs-attr">flume:</span><br>  <span class="hljs-attr">metrics:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">sources:</span><br>    <span class="hljs-attr">source1:</span><br>      <span class="hljs-attr">totalEvents:</span> <span class="hljs-number">10000</span><br>  <span class="hljs-attr">channels:</span><br>    <span class="hljs-attr">channel1:</span><br>      <span class="hljs-attr">capacity:</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure></p><p>这将导致一个名为“flume test”的应用程序，该应用程序在端口41414上监听 /metrics 端点。10000个事件将被写入 Channel。这些事件将由 NullSink 使用。Configuration 类应该扩展AbstractFlumeConfiguration，如图所示，以便能够使用构建适当Flume组件的辅助类。<br>请注意，所有Spring Boot功能都可用于以这种方式配置的Flume应用程序。<br>SinkGroups 和 Sinks 也可以用与以下类似的方式进行配置：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">flume:</span><br>  <span class="hljs-attr">sinkGroups:</span><br>    <span class="hljs-attr">rrobin:</span><br>       <span class="hljs-attr">backoff:</span> <span class="hljs-literal">true</span><br>       <span class="hljs-attr">selector:</span> <span class="hljs-string">round_robin</span><br>       <span class="hljs-attr">&quot;selector.maxTimeOut&quot;:</span> <span class="hljs-number">30000</span><br><br>  <span class="hljs-attr">sinks:</span><br>    <span class="hljs-attr">avroSinks:</span><br>      <span class="hljs-attr">avroSink1:</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.10</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">4141</span><br>        <span class="hljs-attr">batch-size:</span> <span class="hljs-number">100</span><br>        <span class="hljs-attr">compression-type:</span> <span class="hljs-string">deflate</span><br>      <span class="hljs-attr">avroSink2:</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.11</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">4141</span><br>        <span class="hljs-attr">batch-size:</span> <span class="hljs-number">100</span><br>        <span class="hljs-attr">compression-type:</span> <span class="hljs-string">deflate</span><br></code></pre></td></tr></table></figure><br>这些将在Java配置中配置为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;flume.sink-groups.rrobin&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">rrobinProperties</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;flume.sinks.avro-sinks&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, AvroSinkConfiguration&gt; <span class="hljs-title">avroSinksProperties</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Sink&gt; <span class="hljs-title">avroSinks</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Channel avroFileChannel,</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-keyword">final</span> Map&lt;String, AvroSinkConfiguration&gt; avroSinksProperties)</span> </span>&#123;<br>    List&lt;Sink&gt; sinks = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, AvroSinkConfiguration&gt; entry : avroSinksProperties.entrySet()) &#123;<br>        sinks.add(configureSink(entry.getKey(), AvroSink.class, avroFileChannel,<br>            entry.getValue().getProperties()));<br>    &#125;<br>    <span class="hljs-keyword">return</span> sinks;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> SinkRunner <span class="hljs-title">avroSinkRunner</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Map&lt;String, String&gt; rrobinProperties, <span class="hljs-keyword">final</span> List&lt;Sink&gt; avroSinks)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> createSinkRunner(<br>        configureSinkProcessor(rrobinProperties, LoadBalancingSinkProcessor.class, avroSinks));<br>&#125;<br></code></pre></td></tr></table></figure></p><p>请注意，为Source、Channel和 Sink组 指定的属性名称必须与本文档其他部分中为该组件指定的属性名相匹配。</p><p>需要注意的是，使用了一个具体的类来捕获Avro Sinks的数据。当使用简单的Map时，Spring似乎会与嵌套的Maps混淆。<br>AvroSinkConfiguration类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AvroSinkConfiguration</span> </span>&#123;<br><br>   <span class="hljs-keyword">private</span> String hostName;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> port;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> batchSize;<br>   <span class="hljs-keyword">private</span> String compressionType;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getHostName</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> hostName;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHostName</span><span class="hljs-params">(String hostName)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.hostName = hostName;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPort</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> port;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.port = port;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getBatchSize</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> batchSize;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBatchSize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> batchSize)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.batchSize = batchSize;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCompressionType</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> compressionType;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCompressionType</span><span class="hljs-params">(String compressionType)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.compressionType = compressionType;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">getProperties</span><span class="hljs-params">()</span> </span>&#123;<br>      Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>      map.put(<span class="hljs-string">&quot;hostname&quot;</span>, hostName);<br>      map.put(<span class="hljs-string">&quot;port&quot;</span>, Integer.toString(port));<br>      map.put(<span class="hljs-string">&quot;batchSize&quot;</span>, Integer.toString(batchSize));<br>      map.put(compressionType, compressionType);<br>      <span class="hljs-keyword">return</span> map;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>如前一节所述，标准Flume代理配置是从一个类似于具有分层属性设置的Java属性文件格式的文件中读取的。</p><h3 id="Defining-the-flow"><a href="#Defining-the-flow" class="headerlink" title="Defining the flow"></a>Defining the flow</h3><p>要在单个 Agent 中定义流，需要通过 Channel 链接 Source 和 Sink。<br>需要列出给定 Agent 的Source、Sink和Channel，然后将 Source 和 Sink 指向 Channel。Source 实例可以指定多个 Sink，但 Sink 实例只能指定 <code>一个</code> Channel。格式如下：<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># list the sources, sinks and channels for the agent</span><br><span class="hljs-meta">&lt;Agent&gt;.sources</span> = <span class="hljs-string">&lt;Source&gt;</span><br><span class="hljs-meta">&lt;Agent&gt;.sinks</span> = <span class="hljs-string">&lt;Sink&gt;</span><br><span class="hljs-meta">&lt;Agent&gt;.channels</span> = <span class="hljs-string">&lt;Channel1&gt; &lt;Channel2&gt;</span><br><br><span class="hljs-comment"># set channel for source</span><br><span class="hljs-meta">&lt;Agent&gt;.sources.&lt;Source&gt;.channels</span> = <span class="hljs-string">&lt;Channel1&gt; &lt;Channel2&gt; ...</span><br><br><span class="hljs-comment"># set channel for sink</span><br><span class="hljs-meta">&lt;Agent&gt;.sinks.&lt;Sink&gt;.channel</span> = <span class="hljs-string">&lt;Channel1&gt;</span><br></code></pre></td></tr></table></figure></p><p>例如，一个名为 agent_foo 的 Agent 正在从外部avro客户端读取数据，并通过 memory channel 将其发送到HDFS。配置文件 <code>weblog.config</code>可能如下所示：<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># list the sources, sinks and channels for the agent</span><br><span class="hljs-meta">agent_foo.sources</span> = <span class="hljs-string">avro-appserver-src-1</span><br><span class="hljs-meta">agent_foo.sinks</span> = <span class="hljs-string">hdfs-sink-1</span><br><span class="hljs-meta">agent_foo.channels</span> = <span class="hljs-string">mem-channel-1</span><br><br><span class="hljs-comment"># set channel for source</span><br><span class="hljs-meta">agent_foo.sources.avro-appserver-src-1.channels</span> = <span class="hljs-string">mem-channel-1</span><br><br><span class="hljs-comment"># set channel for sink</span><br><span class="hljs-meta">agent_foo.sinks.hdfs-sink-1.channel</span> = <span class="hljs-string">mem-channel-1</span><br></code></pre></td></tr></table></figure></p><p>这将使事件通过 Memory Channel <code>mem-channel-1</code> 从 <code>avro-AppSrv-source</code> 流到<code>hdfs-Cluster1-sink</code>。当 Agent 以 <code>weblog.config</code> 作为其配置文件启动时，它将实例化该流。</p><h3 id="Configuring-individual-components-配置单个组件"><a href="#Configuring-individual-components-配置单个组件" class="headerlink" title="Configuring individual components 配置单个组件"></a>Configuring individual components 配置单个组件</h3><p>定义流之后，需要设置每个Source、Sink和Channel 的属性。<br>这是以相同的分层命名空间方式完成的，您可以在其中为每个组件特定的属性设置组件类型和其他值：<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># properties for sources</span><br><span class="hljs-meta">&lt;Agent&gt;.sources.&lt;Source&gt;.&lt;someProperty&gt;</span> = <span class="hljs-string">&lt;someValue&gt;</span><br><br><span class="hljs-comment"># properties for channels</span><br><span class="hljs-meta">&lt;Agent&gt;.channels.&lt;Channel&gt;.&lt;someProperty&gt;</span> = <span class="hljs-string">&lt;someValue&gt;</span><br><br><span class="hljs-comment"># properties for sinks</span><br><span class="hljs-meta">&lt;Agent&gt;.sinks.&lt;Sink&gt;.&lt;someProperty&gt;</span> = <span class="hljs-string">&lt;someValue&gt;</span><br></code></pre></td></tr></table></figure></p><p>Flume需要为每个组件设置属性“type”，以了解它需要什么样的对象。每个Source、Sink和Channel 类型都有自己的一组属性，这些属性是它按预期运行所需的。所有这些都需要根据需要进行设置。<br>在前面的示例中，我们有一个通过Memory Channel <code>mem-channel-1</code> 从 <code>avro-AppSrv-source</code> 流到<code>hdfs-Cluster1-sink</code>的流。下面是一个示例，显示了每个组件的配置：<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">agent_foo.sources</span> = <span class="hljs-string">avro-AppSrv-source</span><br><span class="hljs-meta">agent_foo.sinks</span> = <span class="hljs-string">hdfs-Cluster1-sink</span><br><span class="hljs-meta">agent_foo.channels</span> = <span class="hljs-string">mem-channel-1</span><br><br><span class="hljs-comment"># set channel for sources, sinks</span><br><br><span class="hljs-comment"># properties of avro-AppSrv-source</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source.bind</span> = <span class="hljs-string">localhost</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source.port</span> = <span class="hljs-string">10000</span><br><br><span class="hljs-comment"># properties of mem-channel-1</span><br><span class="hljs-meta">agent_foo.channels.mem-channel-1.type</span> = <span class="hljs-string">memory</span><br><span class="hljs-meta">agent_foo.channels.mem-channel-1.capacity</span> = <span class="hljs-string">1000</span><br><span class="hljs-meta">agent_foo.channels.mem-channel-1.transactionCapacity</span> = <span class="hljs-string">100</span><br><br><span class="hljs-comment"># properties of hdfs-Cluster1-sink</span><br><span class="hljs-meta">agent_foo.sinks.hdfs-Cluster1-sink.type</span> = <span class="hljs-string">hdfs</span><br><span class="hljs-meta">agent_foo.sinks.hdfs-Cluster1-sink.hdfs.path</span> = <span class="hljs-string">hdfs://namenode/flume/webdata</span><br><br><span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure></p><h3 id="Adding-multiple-flows-in-an-agent-在Agent中添加多个流"><a href="#Adding-multiple-flows-in-an-agent-在Agent中添加多个流" class="headerlink" title="Adding multiple flows in an agent 在Agent中添加多个流"></a>Adding multiple flows in an agent 在Agent中添加多个流</h3><p>单个Flume Agent可以包含多个独立的流。您可以在一个配置中列出多个Source、Sink和Channel。这些组件可以链接以形成多个流：<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># list the sources, sinks and channels for the agent</span><br><span class="hljs-meta">&lt;Agent&gt;.sources</span> = <span class="hljs-string">&lt;Source1&gt; &lt;Source2&gt;</span><br><span class="hljs-meta">&lt;Agent&gt;.sinks</span> = <span class="hljs-string">&lt;Sink1&gt; &lt;Sink2&gt;</span><br><span class="hljs-meta">&lt;Agent&gt;.channels</span> = <span class="hljs-string">&lt;Channel1&gt; &lt;Channel2&gt;</span><br></code></pre></td></tr></table></figure></p><p>然后，您可以将 Source 和 Sink 链接到它们对应的 Channel（对于 Source）或 Channel（对于Sink），以设置两个不同的流。例如，如果你需要在一个 Flume Agent 中设置两个流，一个从外部avro客户端到外部HDFS，另一个从文件尾部 输出到avro sink，那么这里有一个配置：<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># list the sources, sinks and channels in the agent</span><br><span class="hljs-meta">agent_foo.sources</span> = <span class="hljs-string">avro-AppSrv-source1 exec-tail-source2</span><br><span class="hljs-meta">agent_foo.sinks</span> = <span class="hljs-string">hdfs-Cluster1-sink1 avro-forward-sink2</span><br><span class="hljs-meta">agent_foo.channels</span> = <span class="hljs-string">mem-channel-1 file-channel-2</span><br><br><span class="hljs-comment"># flow #1 configuration</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.channels</span> = <span class="hljs-string">mem-channel-1</span><br><span class="hljs-meta">agent_foo.sinks.hdfs-Cluster1-sink1.channel</span> = <span class="hljs-string">mem-channel-1</span><br><br><span class="hljs-comment"># flow #2 configuration</span><br><span class="hljs-meta">agent_foo.sources.exec-tail-source2.channels</span> = <span class="hljs-string">file-channel-2</span><br><span class="hljs-meta">agent_foo.sinks.avro-forward-sink2.channel</span> = <span class="hljs-string">file-channel-2</span><br></code></pre></td></tr></table></figure></p><h3 id="Configuring-a-multi-agent-flow-配置多Agent流"><a href="#Configuring-a-multi-agent-flow-配置多Agent流" class="headerlink" title="Configuring a multi agent flow 配置多Agent流"></a>Configuring a multi agent flow 配置多Agent流</h3><p>要设置多层流，需要有一个第一跳的 avro/thrift sink 指向下一跳的 avro/thrift source 。这将导致第一个Flume Agent 将事件转发到下一个Flume Agent。例如，如果您使用avro客户端定期向本地Flume代理发送文件（每个事件1个文件），则此本地代理可以将其转发给另一个已装载用于存储的代理。<br>WebLog Agent 配置:<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># list sources, sinks and channels in the agent</span><br><span class="hljs-meta">agent_foo.sources</span> = <span class="hljs-string">avro-AppSrv-source</span><br><span class="hljs-meta">agent_foo.sinks</span> = <span class="hljs-string">avro-forward-sink</span><br><span class="hljs-meta">agent_foo.channels</span> = <span class="hljs-string">file-channel</span><br><br><span class="hljs-comment"># define the flow</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source.channels</span> = <span class="hljs-string">file-channel</span><br><span class="hljs-meta">agent_foo.sinks.avro-forward-sink.channel</span> = <span class="hljs-string">file-channel</span><br><br><span class="hljs-comment"># avro sink properties</span><br><span class="hljs-meta">agent_foo.sinks.avro-forward-sink.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-meta">agent_foo.sinks.avro-forward-sink.hostname</span> = <span class="hljs-string">10.1.1.100</span><br><span class="hljs-meta">agent_foo.sinks.avro-forward-sink.port</span> = <span class="hljs-string">10000</span><br><br><span class="hljs-comment"># configure other pieces</span><br><span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure></p><p>Hdfs Agent 配置:<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># list sources, sinks and channels in the agent</span><br><span class="hljs-meta">agent_foo.sources</span> = <span class="hljs-string">avro-collection-source</span><br><span class="hljs-meta">agent_foo.sinks</span> = <span class="hljs-string">hdfs-sink</span><br><span class="hljs-meta">agent_foo.channels</span> = <span class="hljs-string">mem-channel</span><br><br><span class="hljs-comment"># define the flow</span><br><span class="hljs-meta">agent_foo.sources.avro-collection-source.channels</span> = <span class="hljs-string">mem-channel</span><br><span class="hljs-meta">agent_foo.sinks.hdfs-sink.channel</span> = <span class="hljs-string">mem-channel</span><br><br><span class="hljs-comment"># avro source properties</span><br><span class="hljs-meta">agent_foo.sources.avro-collection-source.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-meta">agent_foo.sources.avro-collection-source.bind</span> = <span class="hljs-string">10.1.1.100</span><br><span class="hljs-meta">agent_foo.sources.avro-collection-source.port</span> = <span class="hljs-string">10000</span><br><br><span class="hljs-comment"># configure other pieces</span><br><span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure></p><p>在这里，我们将来自weblog agent 的 <code>avro-forward-sink</code> 链接到hdfs agent的<code>avro-collection-source</code>。这将导致来自外部 appserver source 的 events 最终存储在HDFS中。</p><h3 id="Fan-out-flow"><a href="#Fan-out-flow" class="headerlink" title="Fan out flow"></a>Fan out flow</h3><p>如前一节所述，Flume支持将流从一个 Source 扇出到多个 Channel。扇出有<code>复制</code>和<code>多路复用</code>两种模式。<br>在复制流中，事件被发送到所有配置的 Channel。<br>在多路复用的情况下，事件只发送到符合条件的 qualifying channels 的子集。<br>要扇出流，需要为 Source 指定一个 channels 列表，并指定扇出流的策略。<br>这是通过添加一个可以复制或多路复用的通道“selector”(选择器)来实现的。<br>如果是多路复用器，则进一步指定选择规则。<br>如果您没有指定选择器，那么默认情况下它正在复制:<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># List the sources, sinks and channels for the agent</span><br><span class="hljs-meta">&lt;Agent&gt;.sources</span> = <span class="hljs-string">&lt;Source1&gt;</span><br><span class="hljs-meta">&lt;Agent&gt;.sinks</span> = <span class="hljs-string">&lt;Sink1&gt; &lt;Sink2&gt;</span><br><span class="hljs-meta">&lt;Agent&gt;.channels</span> = <span class="hljs-string">&lt;Channel1&gt; &lt;Channel2&gt;</span><br><br><span class="hljs-comment"># set list of channels for source (separated by space)</span><br><span class="hljs-meta">&lt;Agent&gt;.sources.&lt;Source1&gt;.channels</span> = <span class="hljs-string">&lt;Channel1&gt; &lt;Channel2&gt;</span><br><br><span class="hljs-comment"># set channel for sinks</span><br><span class="hljs-meta">&lt;Agent&gt;.sinks.&lt;Sink1&gt;.channel</span> = <span class="hljs-string">&lt;Channel1&gt;</span><br><span class="hljs-meta">&lt;Agent&gt;.sinks.&lt;Sink2&gt;.channel</span> = <span class="hljs-string">&lt;Channel2&gt;</span><br><br><span class="hljs-meta">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.type</span> = <span class="hljs-string">replicating</span><br></code></pre></td></tr></table></figure></p><p>多路复用选择具有另一组属性以将流分开。<br>这需要指定一个事件属性到 channel 集合的映射。<br>selector(选择器)检查event header 中的每个配置属性。<br>如果它与指定的值匹配，那么该事件将发送到映射到该值的所有 channel。<br>如果不匹配，则将事件发送到配置为默认的 channel 集合, 配置如下<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># Mapping for multiplexing selector</span><br><span class="hljs-meta">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.type</span> = <span class="hljs-string">multiplexing</span><br><span class="hljs-meta">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.header</span> = <span class="hljs-string">&lt;someHeader&gt;</span><br><span class="hljs-meta">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.mapping.&lt;Value1&gt;</span> = <span class="hljs-string">&lt;Channel1&gt;</span><br><span class="hljs-meta">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.mapping.&lt;Value2&gt;</span> = <span class="hljs-string">&lt;Channel1&gt; &lt;Channel2&gt;</span><br><span class="hljs-meta">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.mapping.&lt;Value3&gt;</span> = <span class="hljs-string">&lt;Channel2&gt;</span><br><span class="hljs-comment">#...</span><br><br><span class="hljs-meta">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.default</span> = <span class="hljs-string">&lt;Channel2&gt;</span><br></code></pre></td></tr></table></figure></p><p>映射允许每个值的 channel 重叠。</p><p>以下示例具有一个多路复用到两个路径的单个流。名为 <code>agent_foo</code> 的 Agent 有一个avro Source和 两个分别链接到两个Sink 的 Channel：<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># list the sources, sinks and channels in the agent</span><br><span class="hljs-meta">agent_foo.sources</span> = <span class="hljs-string">avro-AppSrv-source1</span><br><span class="hljs-meta">agent_foo.sinks</span> = <span class="hljs-string">hdfs-Cluster1-sink1 avro-forward-sink2</span><br><span class="hljs-meta">agent_foo.channels</span> = <span class="hljs-string">mem-channel-1 file-channel-2</span><br><br><span class="hljs-comment"># set channels for source</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.channels</span> = <span class="hljs-string">mem-channel-1 file-channel-2</span><br><br><span class="hljs-comment"># set channel for sinks</span><br><span class="hljs-meta">agent_foo.sinks.hdfs-Cluster1-sink1.channel</span> = <span class="hljs-string">mem-channel-1</span><br><span class="hljs-meta">agent_foo.sinks.avro-forward-sink2.channel</span> = <span class="hljs-string">file-channel-2</span><br><br><span class="hljs-comment"># channel selector configuration</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.type</span> = <span class="hljs-string">multiplexing</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.header</span> = <span class="hljs-string">State</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.mapping.CA</span> = <span class="hljs-string">mem-channel-1</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.mapping.AZ</span> = <span class="hljs-string">file-channel-2</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.mapping.NY</span> = <span class="hljs-string">mem-channel-1 file-channel-2</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.default</span> = <span class="hljs-string">mem-channel-1</span><br></code></pre></td></tr></table></figure></p><p>上述配置 图示如下:<br>![[multiplexed-example-1.excalidraw]]</p><p>selector(选择器) 检查一个名为“State”的 header。<br>如果值为“CA”，则将其发送到 <code>mem-channel-1</code><br>如果值为“AZ”，则发送到 <code>file-channel-2</code><br>如果值为“NY”，那么两者都发送。<br>如果“State”标头未设置或与这三个标头中的任何一个都不匹配，则它将转到指定为“default”的<code>mem-channel-1</code>。</p><p>selector(选择器)还支持可选 channel。要为 header 指定可选通道，配置参数“optional”按以下方式使用：<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># channel selector configuration</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.type</span> = <span class="hljs-string">multiplexing</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.header</span> = <span class="hljs-string">State</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.mapping.CA</span> = <span class="hljs-string">mem-channel-1</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.mapping.AZ</span> = <span class="hljs-string">file-channel-2</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.mapping.NY</span> = <span class="hljs-string">mem-channel-1 file-channel-2</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.optional.CA</span> = <span class="hljs-string">mem-channel-1 file-channel-2</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.mapping.AZ</span> = <span class="hljs-string">file-channel-2</span><br><span class="hljs-meta">agent_foo.sources.avro-AppSrv-source1.selector.default</span> = <span class="hljs-string">mem-channel-1</span><br></code></pre></td></tr></table></figure></p><p>选择器将首先尝试写入 required channels<br>如果其中一个 Channel 无法使用事件，则会使事务失败。在所有 Channel 上重新尝试该事务。<br>一旦所有 required channels 都消耗了事件，选择器将尝试写入 optional channel。任何optional channel 使用事件的失败都将被忽略，并且不会重试。</p><p>如果特定 header 的 optional channels 和 required channels 之间存在重叠，则认为该 channel 是必需的，并且 channel 中的故障将导致 required channels 的整个集合被重试。例如，在上面的例子中，对于 header “CA”，mem-channel-1被认为是一个 required channels，即使它被标记为 required 和 optional，并且如果无法写入该 channel，则会导致在为选择器配置的所有 channel 上重试该事件。</p><p>请注意:<br>如果 header 没有任何 required channels，则事件将被写入默认 channels，并尝试写入该 header 的 optional channels。<br>如果未指定 required channels，即使指定  optional channels 仍会将事件写入默认 channel。<br>如果没有 channel 被指定为默认 channel，也没有required channels，选择器将尝试将事件写入 optional channels。在这种情况下，任何故障都会被忽略。</p><h3 id="SSL-TLS-support"><a href="#SSL-TLS-support" class="headerlink" title="SSL/TLS support"></a>SSL/TLS support</h3><p>几个Flume组件支持SSL/TLS协议，以便安全地与其他系统通信。</p><div class="table-container"><table><thead><tr><th>组件</th><th>SSL server or client</th></tr></thead><tbody><tr><td>Avro Source</td><td>server</td></tr><tr><td>Avro Sink</td><td>client</td></tr><tr><td>Thrift Source</td><td>server</td></tr><tr><td>Thrift Sink</td><td>client</td></tr><tr><td>Kafka Source</td><td>client</td></tr><tr><td>Kafka Channel</td><td>client</td></tr><tr><td>Kafka Sink</td><td>client</td></tr><tr><td>HTTP Source</td><td>server</td></tr><tr><td>JMS Source</td><td>client</td></tr><tr><td>Syslog TCP Source</td><td>server</td></tr><tr><td>Multiport Syslog TCP Source</td><td>server</td></tr></tbody></table></div><p>SSL兼容组件有几个配置参数来设置SSL，如启用SSL标志、keystore / truststore 参数(location, password, type) 和其他SSL参数（例如 disabled protocols）。</p><p>在代理配置文件中，始终在组件级别指定启用 SSL。因此，有些组件可能被配置为使用 SSL，而其他组件则不使用（即使它们是相同的组件类型）。</p><p>keystore / truststore 设置可以在组件级别指定，也可以全局指定。<br>在组件级别设置的情况下，通过特定于组件的参数在 Agent 配置文件中配置 keystore / truststore。<br>这种方法的优点是组件可以使用不同的 keystore（如果需要的话）。缺点是必须为Agent 配置文件中的每个组件复制 keystore 参数。<br>组件级设置是可选的，但如果定义了它，它的优先级将高于全局参数。<br>通过全局设置，只需定义一次 keystore / truststore 参数，并对所有组件使用相同的设置就足够了，这意味着配置越来越集中。<br>全局设置可以通过系统属性或环境变量进行配置。</p><div class="table-container"><table><thead><tr><th>System property系统属性</th><th>Environment variable环境变量</th><th>描述</th></tr></thead><tbody><tr><td>javax.net.ssl.keyStore</td><td>FLUME_SSL_KEYSTORE_PATH</td><td>Keystore location</td></tr><tr><td>javax.net.ssl.keyStorePassword</td><td>FLUME_SSL_KEYSTORE_PASSWORD</td><td>Keystore password</td></tr><tr><td>javax.net.ssl.keyStoreType</td><td>FLUME_SSL_KEYSTORE_TYPE</td><td>Keystore type (by default JKS)</td></tr><tr><td>javax.net.ssl.trustStore</td><td>FLUME_SSL_TRUSTSTORE_PATH</td><td>Truststore location</td></tr><tr><td>javax.net.ssl.trustStorePassword</td><td>FLUME_SSL_TRUSTSTORE_PASSWORD</td><td>Truststore password</td></tr><tr><td>javax.net.ssl.trustStoreType</td><td>FLUME_SSL_TRUSTSTORE_TYPE</td><td>Truststore type (by default JKS)</td></tr><tr><td>flume.ssl.include.protocols</td><td>FLUME_SSL_INCLUDE_PROTOCOLS</td><td>计算启用的协议时要包括的协议。以逗号（，）分隔的列表。排除的协议将从该列表中排除（如果提供）。</td></tr><tr><td>flume.ssl.exclude.protocols</td><td>FLUME_SSL_EXCLUDE_PROTOCOLS</td><td>计算启用的协议时要排除的协议。以逗号（，）分隔的列表。</td></tr><tr><td>flume.ssl.include.cipherSuites</td><td>FLUME_SSL_INCLUDE_CIPHERSUITES</td><td>计算启用的密码套件时要包括的密码套件。以逗号（，）分隔的列表。排除的密码套件将从该列表中排除（如果提供）。</td></tr><tr><td>flume.ssl.exclude.cipherSuites</td><td>FLUME_SSL_EXCLUDE_CIPHERSUITES</td><td>计算启用的密码套件时要排除的密码套件。以逗号（，）分隔的列表。</td></tr></tbody></table></div><p>SSL系统属性可以在命令行上传递，也可以通过在<code>conf/flume-env.sh</code>中设置 <code>JAVA_OPTS</code> 环境变量来传递(尽管如此，使用命令行是不可取的，因为包括密码在内的命令将保存到命令历史记录中。)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_OPTS=&quot;$JAVA_OPTS -Djavax.net.ssl.keyStore=/path/to/keystore.jks&quot;<br>export JAVA_OPTS=&quot;$JAVA_OPTS -Djavax.net.ssl.keyStorePassword=password&quot;<br></code></pre></td></tr></table></figure></p><p>Flume使用在JSSE(Java Secure Socket Extension)中定义的系统属性，因此这是设置SSL的标准方法。另一方面，在系统属性中指定密码意味着可以在进程列表中看到密码。对于不可接受的情况，也可以在环境变量中定义参数。在这种情况下，Flume在内部从相应的环境变量初始化JSSE系统属性。</p><p>SSL 环境变量可以在启动 Flume 之前在 shell 环境中设置，也可以在 <code>conf/flume-env.sh</code> 文件中设置。（尽管使用命令行是不可取的，因为包括密码在内的命令将保存到命令历史记录中。）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export FLUME_SSL_KEYSTORE_PATH=/path/to/keystore.jks<br>export FLUME_SSL_KEYSTORE_PASSWORD=password<br></code></pre></td></tr></table></figure></p><p><strong>请注意:</strong></p><ul><li>必须在组件级别启用SSL。单独指定全局SSL参数不会有任何效果。</li><li>如果在多个级别指定全局SSL参数，则优先级如下(从高到低):<ul><li>component parameters in agent config代理配置中的组件参数</li><li>system properties系统属性</li><li>environment variables环境变量</li></ul></li><li>如果为组件启用了SSL，但没有以上述任何方式指定SSL参数，则<ul><li>对于keystores密钥库：配置错误</li><li>对于truststores信任库：将使用默认的信任库（Oracle JDK中的<code>jssecacerts / cacerts</code>）</li></ul></li><li>truststores信任库 密码在任何情况下都是可选的。如果未指定，那么当JDK打开 truststores信任库 时，将不会对其执行完整性检查。</li></ul><h3 id="Source-and-sink-batch-sizes-and-channel-transaction-capacities-Source和-Sink-批量大小以及-channel-处理容量"><a href="#Source-and-sink-batch-sizes-and-channel-transaction-capacities-Source和-Sink-批量大小以及-channel-处理容量" class="headerlink" title="Source and sink batch sizes and channel transaction capacities Source和 Sink 批量大小以及 channel 处理容量"></a>Source and sink batch sizes and channel transaction capacities Source和 Sink 批量大小以及 channel 处理容量</h3><p>Source and sink 可以有一个批处理大小参数，该参数确定它们在一个批中处理的最大事件数。这种情况发生在具有称为事务容量的上限的 channel 事务中。批量大小必须小于 channel 的事务处理容量。有一个明确的检查来防止不兼容的设置。每当读取配置时，都会进行此检查。</p><h3 id="Flume-Sources"><a href="#Flume-Sources" class="headerlink" title="Flume Sources"></a>Flume Sources</h3><p>![[Flume Sources]]</p><h3 id="Flume-Sinks"><a href="#Flume-Sinks" class="headerlink" title="Flume Sinks"></a>Flume Sinks</h3><p>![[Flume Sinks]]</p><h3 id="Flume-Channels"><a href="#Flume-Channels" class="headerlink" title="Flume Channels"></a>Flume Channels</h3>]]></content>
    
    
    <categories>
      
      <category>flume</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flume文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flume启动脚本</title>
    <link href="/2022/12/08/flume/flume%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
    <url>/2022/12/08/flume/flume%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义flume启停脚本"><a href="#自定义flume启停脚本" class="headerlink" title="自定义flume启停脚本"></a>自定义flume启停脚本</h2><p>使用 shell 编写一个 flume 启动、停止、重启脚本</p><p>执行 方式 ：</p><p>sh 脚本 (start|stop|restart)</p><p><strong>注意： 需要将该 脚本 放在 flume 的 bin目录下，即 apache-flume-1.9.0-bin/bin/启动脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>function start() &#123;<br>    basepath=$(cd $(dirname $0);cd ..; pwd)<br>    echo $basepath<br>    f_cnt=`ps -ef |grep java|grep flume |grep -v grep| wc -l`<br>    if [ $f_cnt -le 0 ]; then<br>    # 进程不存在<br>        echo &quot;start flume!&quot;<br>    # 注意： 此处命令 需要根据具体配置做出修改, 尤其是  --name    --conf    --conf-file  等参数, 以及输出的 日志<br>        nohup $basepath/bin/flume-ng agent --name a1 --conf $basepath/conf/ --conf-file  $basepath/conf/flume-conf-test.properties &gt; $basepath/logs/flume-start.log 2&gt;&amp;1 &amp;<br>    else<br>    # 进程存在<br>        echo &quot;flume already exists!&quot;<br>    fi<br>&#125;<br> <br>function stop() &#123;<br>    f_cnt=`ps -ef |grep java|grep flume |grep -v grep| wc -l`<br>    if [ $f_cnt -le 0 ]; then<br>    # 进程不存在<br>    echo &quot;no flume running!&quot;<br>    else<br>    # 进程存在<br>        ps -ef|grep java|grep flume|awk &#x27;&#123;print $2;&#125;&#x27;|xargs kill<br>    fi<br>&#125;<br> <br> <br>case &quot;$1&quot; in<br>    start)<br>    echo &quot;Starting flume Now......&quot;<br>    start<br>    echo &quot;Starting flume Finished&quot;<br>    ;;<br>    stop)<br>    echo &quot;Stopping flume Now......&quot;<br>    stop<br>    echo &quot;Stopping flume Finished&quot;<br>    ;;<br>    restart)<br>    echo &quot;Restart flume Now......&quot;<br>    stop<br>    sleep 1<br>    start<br>    echo &quot;Restart flume Finished&quot;<br>    ;;<br>    *)<br>    echo $&quot;usage: $0 &#123;start | stop | restart&#125;&quot;<br>    exit 1<br>esac<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flume</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flume自定义拦截器(Interceptor)</title>
    <link href="/2022/12/08/flume/flume%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8-Interceptor/"/>
    <url>/2022/12/08/flume/flume%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8-Interceptor/</url>
    
    <content type="html"><![CDATA[<p>自定义Interceptor是Flume中一个非常有用的功能，它允许用户在Flume中添加自己的拦截器，以实现自定义的日志处理逻辑。</p><p>要创建一个自定义的Interceptor，需要实现Flume的<code>Interceptor</code>接口，并实现接口中定义的所有方法。然后，可以在Flume的配置文件中添加该拦截器，并指定它的位置。</p><p>拦截器将在Flume中的数据流中执行，并可以对数据进行处理、修改、过滤或转换。拦截器的处理逻辑取决于实现。</p><p>比如 拦截 超过100K 的消息</p><p>新建一个 maven 项目 在 <code>pom.xml</code> 中添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flume<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flume-ng-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后 实现 Interceptor 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_MESSAGE_SIZE = <span class="hljs-number">100</span> * <span class="hljs-number">1024</span>; <span class="hljs-comment">// 100KB</span><br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化拦截器</span><br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Event <span class="hljs-title">intercept</span><span class="hljs-params">(Event event)</span> </span>&#123;<br>    <span class="hljs-comment">// 拦截事件，并处理</span><br>    <span class="hljs-keyword">if</span> (event.getBody().length &gt; MAX_MESSAGE_SIZE) &#123;<br>      <span class="hljs-comment">// 如果日志消息过大，则丢弃该事件</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> event;<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Event&gt; <span class="hljs-title">intercept</span><span class="hljs-params">(List&lt;Event&gt; events)</span> </span>&#123;<br>    <span class="hljs-comment">// 拦截一组事件，并处理</span><br>    List&lt;Event&gt; intercepted = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Event event : events) &#123;<br>      Event interceptedEvent = intercept(event);<br>      <span class="hljs-keyword">if</span> (interceptedEvent != <span class="hljs-keyword">null</span>) &#123;<br>        intercepted.add(interceptedEvent);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> intercepted;<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 关闭拦截器</span><br>  &#125;<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span>.<span class="hljs-title">Builder</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Interceptor <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyInterceptor();<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>      <span class="hljs-comment">// 从配置文件读取配置参数</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将 项目打成 jar 包以后 上传到 flume 的 lib 目录下</p><p>如果想使用自定义的 拦截器 ，只需要在配置中设置即可</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 设置拦截器</span><br><span class="hljs-meta">a1.sources.r1.interceptors</span> = <span class="hljs-string">i1</span><br><span class="hljs-meta">a1.sources.r1.interceptors.i1.type</span> = <span class="hljs-string">com.example.MyInterceptor$Builder</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flume</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop使用distcp数据迁移</title>
    <link href="/2022/12/02/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop%E4%BD%BF%E7%94%A8distcp%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"/>
    <url>/2022/12/02/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop%E4%BD%BF%E7%94%A8distcp%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><blockquote><p>命令 hadoop distcp:</p><p>hadoop distcp -log ~/distcp_stage.log   hdfs://192.168.1.1:9000/user/hive/warehouse/ods hdfs://192.168.1.2:8020/user/hive/warehouse/</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>这里的 source hdfs 和 target hdfs 必须得是 <strong>namenode</strong> 所在节点</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="1-数据迁移后-hive表-count-0"><a href="#1-数据迁移后-hive表-count-0" class="headerlink" title="1.数据迁移后 hive表 count(*) = 0"></a>1.数据迁移后 hive表 count(*) = 0</h3><p>可能是同步过来的数据在hive的 <strong>metastore</strong> 里没有行数信息,执行一次 <strong>insert overwirte</strong> 后就有数据了</p><p>也有可能是应用程序权限问题</p><h3 id="2-分区表无数据"><a href="#2-分区表无数据" class="headerlink" title="2.分区表无数据"></a>2.分区表无数据</h3><p>分区表还需要手动添加分区，<code>alter table xxx add if not exists partition(key1=&quot;value1&quot;, key2=&quot;value2&quot;) partition(key1=&quot;value3&quot;, key2=&quot;value4&quot;)</code></p><p>hive shell 通过 <code>msck repair table xxx</code> 可以自动去读取hdfs下文件信息，来添加元数据中不存在的分区信息，但是存在jdbc连接时不识别 msck 指令的情况</p><h3 id="3-客户端工具无法执行insert-overwrite"><a href="#3-客户端工具无法执行insert-overwrite" class="headerlink" title="3.客户端工具无法执行insert overwrite"></a>3.客户端工具无法执行insert overwrite</h3><p>datagrip执行insertoverwrite 报 return code 2 from <a href="http://org.apache.hadoop.hive.ql.exec.mr/">org.apache.hadoop.hive.ql.exec.mr</a>.MapRedTask</p><p>查询yarn日志发现: 找不到或无法加载主类 org.apache.hadoop.mapreduce.v2.app.MRAppMaster</p><p>但是在hive命令行中可以执行</p><p>有可能是hadoop目录权限问题</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hdfs</tag>
      
      <tag>数据迁移</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jetbrains-ide使用的vmoptions文件位置</title>
    <link href="/2022/12/02/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/jetbrains-ide%E4%BD%BF%E7%94%A8%E7%9A%84vmoptions%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/"/>
    <url>/2022/12/02/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/jetbrains-ide%E4%BD%BF%E7%94%A8%E7%9A%84vmoptions%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="IDE使用了哪个vmoptions文件"><a href="#IDE使用了哪个vmoptions文件" class="headerlink" title="IDE使用了哪个vmoptions文件?"></a>IDE使用了哪个vmoptions文件?</h1><p>IDE依次检查下面各项,若满足,则使用相应的文件</p><h2 id="1-环境变量指向的vmoptions文件"><a href="#1-环境变量指向的vmoptions文件" class="headerlink" title="1.环境变量指向的vmoptions文件"></a>1.环境变量指向的vmoptions文件</h2><p>如果<code>&lt;IDE&gt;_VM_OPTIONS</code>环境变量存在且指向的vmoptions文件也存在, 则使用该文件.其中<IDE>是jetbrains IDE的代号,比如 IDEA / PYCHARM 等</p><p>环境变量里找到 以 _VM_OPTIONS 结尾的环境变量, 如下, 对应的值就是相应IDE使用的vmoptions文件了</p><p><img src="https://raw.githubusercontent.com/xxzuo/pic_host/main/image2022-12-1_11-12-53.png" alt=""></p><h2 id="2-配置目录"><a href="#2-配置目录" class="headerlink" title="2.配置目录"></a>2.配置目录</h2><h3 id="2-1-如果当前IDE是Toolbox安装的-则使用IDE安装目录下的-vmoptions-文件-其中是IDE的版本号"><a href="#2-1-如果当前IDE是Toolbox安装的-则使用IDE安装目录下的-vmoptions-文件-其中是IDE的版本号" class="headerlink" title="2.1 如果当前IDE是Toolbox安装的,则使用IDE安装目录下的 .vmoptions 文件,其中是IDE的版本号"></a>2.1 如果当前IDE是Toolbox安装的,则使用IDE安装目录下的 <version>.vmoptions 文件,其中<version>是IDE的版本号</h3><h3 id="2-2-如果不是通过toolbox安装-而是独立安装的IDE-则使用配置目录下的文件"><a href="#2-2-如果不是通过toolbox安装-而是独立安装的IDE-则使用配置目录下的文件" class="headerlink" title="2.2 如果不是通过toolbox安装,而是独立安装的IDE, 则使用配置目录下的文件"></a>2.2 如果不是通过toolbox安装,而是独立安装的IDE, 则使用配置目录下的文件</h3><p><strong>常见的配置目录</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">操作系统</th><th style="text-align:left">配置目录</th></tr></thead><tbody><tr><td style="text-align:left">操作系统</td><td style="text-align:left">配置目录</td></tr><tr><td style="text-align:left">Windows</td><td style="text-align:left">%APPDATA%\JetBrains\<product><version></td></tr><tr><td style="text-align:left">示例:</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">C:\Users\JohnS\AppData\Roaming\JetBrains\IntelliJIdea2022.1</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">MacOS</td><td style="text-align:left">~/Library/Application Support/JetBrains/<product><version></td></tr><tr><td style="text-align:left">示例:</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">~/Library/Application Support/JetBrains/IntelliJIdea2022.1</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Linux</td><td style="text-align:left">~/.config/JetBrains/<product><version></td></tr><tr><td style="text-align:left">示例:</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">~/.config/JetBrains/IntelliJIdea2022.1</td></tr></tbody></table></div><h2 id="3-默认位置下-即bin目录"><a href="#3-默认位置下-即bin目录" class="headerlink" title="3. 默认位置下 [即bin目录]"></a>3. 默认位置下 [即bin目录]</h2><p>如果以上位置都没有vmoptions文件, 则使用默认位置下 [即bin目录]的文件</p><p>以 idea为例</p><div class="table-container"><table><thead><tr><th style="text-align:left">操作系统</th><th style="text-align:left">默认位置</th></tr></thead><tbody><tr><td style="text-align:left">Windows</td><td style="text-align:left"><IDE_HOME>\bin\idea64.exe.vmoptions</td></tr><tr><td style="text-align:left">macOS</td><td style="text-align:left">IntelliJ IDEA.app/Contents/bin/idea.vmoptions</td></tr><tr><td style="text-align:left">Linux</td><td style="text-align:left"><IDE_HOME>/bin/idea64.vmoptions</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jetbrains</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flume-sink-kafka多分区</title>
    <link href="/2022/11/17/flume/flume-sink-kafka%E5%A4%9A%E5%88%86%E5%8C%BA/"/>
    <url>/2022/11/17/flume/flume-sink-kafka%E5%A4%9A%E5%88%86%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>如果不做任何设置，flume 在写 kafka时只会写到一个分区，由于kafka 的一个分区 对于一个 消费者组来说只能有一个消费者</p><p>这样会影响消费速度，所以想flume 在 写 kafka 时就写到多个分区中</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>官方文档中说明 flume 写 kafka的分区 是根据 FlumeEvent 的 headers 的key 来判断写入哪个分区的，如果 key 为 null 会随机分区</p><p>所以 我们需要 添加拦截器，给headers 中添加一个 key</p><p>设置 flume 配置文件如下</p><blockquote><p>a1.sources.r1.interceptors = i1</p><p>a1.sources.r1.interceptors.i1.type = org.apache.flume.sink.solr.morphline.UUIDInterceptor$Builder<br>a1.sources.r1.interceptors.i1.headerName=key<br>a1.sources.r1.interceptors.i1.preserveExisting=false</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>flume</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flume</tag>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>anaconda配置国内镜像</title>
    <link href="/2022/11/15/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/anaconda%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
    <url>/2022/11/15/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/anaconda%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Anaconda配置国内镜像"><a href="#Anaconda配置国内镜像" class="headerlink" title="Anaconda配置国内镜像"></a>Anaconda配置国内镜像</h1><ul><li>查看已有镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --show channels<br><br>channels:<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br>  - defaults<br><br></code></pre></td></tr></table></figure><ul><li>删除配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除所有镜像</span><br>conda config --remove-key channels<br><br><span class="hljs-comment"># 删除指定镜像</span><br>conda config --remove channels [urls]<br></code></pre></td></tr></table></figure><ul><li>配置国内镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --add channels http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/<br><br>conda config --<span class="hljs-built_in">set</span> show_channel_urls yes<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>List&lt;Integer&gt;添加一个String</title>
    <link href="/2022/08/30/%E5%85%B6%E4%BB%96/List-Integer-%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAString/"/>
    <url>/2022/08/30/%E5%85%B6%E4%BB%96/List-Integer-%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAString/</url>
    
    <content type="html"><![CDATA[<p>利用反射魔法 就可以在 ArrayList<Integer> 中添加一个 String类型的元素了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            List&lt;Integer&gt; test = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            test.add(<span class="hljs-number">1</span>);<br>            Method method = test.getClass().getMethod(<span class="hljs-string">&quot;add&quot;</span>, Object.class);<br>            method.invoke(test, <span class="hljs-string">&quot;t&quot;</span>);<br>            <span class="hljs-keyword">for</span> (Object num : test) &#123;<br>                System.out.println(num);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span><br><span class="hljs-built_in">t</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>picgo上传图片到github</title>
    <link href="/2022/08/09/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/picgo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0github/"/>
    <url>/2022/08/09/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/picgo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0github/</url>
    
    <content type="html"><![CDATA[<p>写博客的时候有很多图片需要插入，这些博客在本地的时候，可以预览到图片，但是因为图片在本地没有上传，所以一发布就看不到图片了。因为博客是部署在 <strong>github</strong> 上的，所以同样也用 <strong>github</strong> 来做图床。</p><p><strong>PicGo</strong> 是一个用于快速上传图片并获取图片 URL 链接的工具，支持多个图床进行使用</p><h3 id="下载picgo"><a href="#下载picgo" class="headerlink" title="下载picgo"></a>下载picgo</h3><p>下载picgo 2.3.0版本</p><p><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0">Release 2.3.0 · Molunerfinn/PicGo (github.com)</a></p><p>windows 选择如下版本：</p><p><img src="https://raw.githubusercontent.com/xxzuo/pic_host/main/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220809225734.png" alt=""></p><h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><p>在 <strong>github</strong> 主页点击自己头像后，依次选择【Settings】-&gt;【Developer settings】-&gt;【Personal access tokens】-&gt;【Generate new token】</p><p><img src="https://raw.githubusercontent.com/xxzuo/pic_host/main/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220809230614.png" alt=""></p><p><img src="https://raw.githubusercontent.com/xxzuo/pic_host/main/5136655b521491ac2bce1a586f08ac5.png" alt=""></p><p><img src="https://raw.githubusercontent.com/xxzuo/pic_host/main/0cb3b7117972d880a65957e2d976622.png" alt=""></p><h3 id="设置图床"><a href="#设置图床" class="headerlink" title="设置图床"></a>设置图床</h3><p>选择 【GitHub图床】</p><p><img src="https://raw.githubusercontent.com/xxzuo/pic_host/main/61f59a429ad79346f5224f045ba22c7.png" alt=""></p><p>仓库是 你自己 github 上的 仓库</p><p>token就是刚才获取的token</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>picgo</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>合并flink写入hive产生的小文件</title>
    <link href="/2022/08/04/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%90%88%E5%B9%B6flink%E5%86%99%E5%85%A5hive%E4%BA%A7%E7%94%9F%E7%9A%84%E5%B0%8F%E6%96%87%E4%BB%B6/"/>
    <url>/2022/08/04/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%90%88%E5%B9%B6flink%E5%86%99%E5%85%A5hive%E4%BA%A7%E7%94%9F%E7%9A%84%E5%B0%8F%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>flink 写入数据到 hdfs 时，会产生很多的小文件，因为每个文件均按块存储,每个块的元数据存储在NameNode的内存中,因此<em>HDFS</em>存储<em>小文件</em>会非常低效。因为大量的<em>小文件</em>会耗尽NameNode中的大部分内存。</p><p>因为我们需要将 小文件合并。</p><p>只需要利用 HIVE 的 MR 即可，也就是执行 这条SQL </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> hive_table<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hive_table <span class="hljs-keyword">where</span> partition_col <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>其中 <strong>partition_col</strong>是表的分区字段，这样，该分区内的小文件会自动合并</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hive</tag>
      
      <tag>flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flink读kafka数据写入hive</title>
    <link href="/2022/08/04/%E5%A4%A7%E6%95%B0%E6%8D%AE/flink%E8%AF%BBkafka%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5hive/"/>
    <url>/2022/08/04/%E5%A4%A7%E6%95%B0%E6%8D%AE/flink%E8%AF%BBkafka%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5hive/</url>
    
    <content type="html"><![CDATA[<h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xxzuo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scala.binary.version</span>&gt;</span>2.11<span class="hljs-tag">&lt;/<span class="hljs-name">scala.binary.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hadoop.version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">hadoop.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hive.version</span>&gt;</span>3.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">hive.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">flink.version</span>&gt;</span>1.14.4<span class="hljs-tag">&lt;/<span class="hljs-name">flink.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.20<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-clients_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ververica<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-mysql-cdc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-csv<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-base<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-jdbc_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-table-planner_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-kafka_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-table-api-java-bridge_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-sql-connector-kafka_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-hive_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-math3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hive<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hive-exec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.thrift<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>libfb303<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.antlr<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>antlr-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.58<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 编译插件 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 打jar包插件(会包含所有依赖) --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 可以设置jar包的入口类(可选) --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="kafka-source"><a href="#kafka-source" class="headerlink" title="kafka source"></a>kafka source</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">String bootstrapServers = <span class="hljs-string">&quot;192.168.1.1:9092,192.168.1.2:9092&quot;</span>;<br>KafkaSource&lt;String&gt; source = KafkaSource.&lt;String&gt;builder()<br>        .setBootstrapServers(bootstrapServers)<br>        .setTopics(<span class="hljs-string">&quot;kafka_topic&quot;</span>)<br>        .setGroupId(<span class="hljs-string">&quot;consumer_group&quot;</span>)<br>        .setStartingOffsets(OffsetsInitializer.committedOffsets(OffsetResetStrategy.EARLIEST))<br>        .setValueOnlyDeserializer(<span class="hljs-keyword">new</span> SimpleStringSchema())<br>        .build();<br>DataStreamSource&lt;String&gt; stream = env.fromSource(source, WatermarkStrategy.forMonotonousTimestamps(), <span class="hljs-string">&quot;kafka_source&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="hive-sink"><a href="#hive-sink" class="headerlink" title="hive sink"></a>hive sink</h3><h4 id="设置hiveCatalog"><a href="#设置hiveCatalog" class="headerlink" title="设置hiveCatalog"></a>设置hiveCatalog</h4><p>hiveCatalog作用是：使用 hive 的 metastore去管理 flink元数据 ，持久化元数据，避免每次使用时都要重新注册<br>代码中使用 hive catalog<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置 catalog</span><br>String catalogName = <span class="hljs-string">&quot;flinkHive&quot;</span>;<br><span class="hljs-comment">// 路径为 hive 配置文件路径</span><br>HiveCatalog catalog = <span class="hljs-keyword">new</span> HiveCatalog(<br>        catalogName,<br>        <span class="hljs-string">&quot;flink&quot;</span>,<br>        <span class="hljs-string">&quot;/usr/local/hive/apache-hive-3.1.2-bin/conf/&quot;</span><br>);<br>tableEnv.registerCatalog(catalogName, catalog);<br><span class="hljs-comment">// 使用注册的catalog</span><br>tableEnv.useCatalog(catalogName);<br></code></pre></td></tr></table></figure></p><h4 id="将-kafka-stream-映射为临时表"><a href="#将-kafka-stream-映射为临时表" class="headerlink" title="将 kafka stream 映射为临时表"></a>将 kafka stream 映射为临时表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 建立临时视图 映射 kafka source</span><br>tableEnv.createTemporaryView(<span class="hljs-string">&quot;flink.kafka_table&quot;</span>, stream);<br></code></pre></td></tr></table></figure><h4 id="创建-hive-表"><a href="#创建-hive-表" class="headerlink" title="创建 hive 表"></a>创建 hive 表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// hive 建表时 需要切换 方言为 HIVE</span><br>tableEnv.getConfig().setSqlDialect(SqlDialect.HIVE);<br>tableEnv.executeSql(<span class="hljs-string">&quot; CREATE TABLE if not exists flink.hive_table (\n&quot;</span> +<br>                        <span class="hljs-string">&quot;hive_col1 STRING,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;hive_col2 STRING,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;           ) &quot;</span> +<br>                        <span class="hljs-string">&quot;PARTITIONED BY (\n&quot;</span> +<br>                        <span class="hljs-string">&quot;                     day STRING\n&quot;</span> +<br>                        <span class="hljs-string">&quot;           ) &quot;</span> +<br>                        <span class="hljs-string">&quot;STORED AS PARQUET\n&quot;</span> +<br>                        <span class="hljs-string">&quot;             TBLPROPERTIES (\n&quot;</span> +<br>                        <span class="hljs-comment">// partition-commit.trigger 触发分区提交</span><br>                        <span class="hljs-comment">// process-time 根据处理时间触发</span><br>                        <span class="hljs-comment">// partition-time 根据从事件时间中提取的分区时间触发</span><br>                        <span class="hljs-string">&quot;                    &#x27;sink.partition-commit.trigger&#x27; = &#x27;process-time&#x27;,\n&quot;</span> +<br>                        <span class="hljs-comment">// partition-commit.delay 提交的延迟时间</span><br>                        <span class="hljs-string">&quot;                    &#x27;sink.partition-commit.delay&#x27; = &#x27;0s&#x27;,\n&quot;</span> +<br>                        <span class="hljs-comment">// partition-commit.policy.kind 分区提交策略</span><br>                        <span class="hljs-comment">// metastore 提交到元数据</span><br>                        <span class="hljs-comment">// success-file 写入_success文件到分区目录中</span><br>                        <span class="hljs-string">&quot;                    &#x27;sink.partition-commit.policy.kind&#x27; = &#x27;metastore,success-file&#x27;,\n&quot;</span> +<br>                        <span class="hljs-comment">// time-extractor.timestamp-pattern 指定分区提取器提取时间戳的格式 </span><br>                        <span class="hljs-string">&quot;                    &#x27;partition.time-extractor.timestamp-pattern&#x27;=&#x27;$day 00:00:00&#x27;&quot;</span> +<br>                        <span class="hljs-string">&quot;           )&quot;</span><br>        );<br>        <span class="hljs-comment">// hive 建表完 把方言切换回 DEFAULT</span><br>        tableEnv.getConfig().setSqlDialect(SqlDialect.DEFAULT);<br></code></pre></td></tr></table></figure><h4 id="sink数据到-hive"><a href="#sink数据到-hive" class="headerlink" title="sink数据到 hive"></a>sink数据到 hive</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">TableResult tr = tableEnv.executeSql(<br>                <span class="hljs-string">&quot;INSERT INTO flink.hive_table &quot;</span> +<br>                        <span class="hljs-string">&quot;SELECT &quot;</span> +<br>                        <span class="hljs-string">&quot;col1,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;col2,\n&quot;</span> +<br>                        <span class="hljs-string">&quot;datetime\n&quot;</span> +<br>                        <span class="hljs-string">&quot; from flink.kafka_table A &quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
      <tag>hive</tag>
      
      <tag>flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tkinter</title>
    <link href="/2022/08/03/%E5%85%B6%E4%BB%96/tkinter/"/>
    <url>/2022/08/03/%E5%85%B6%E4%BB%96/tkinter/</url>
    
    <content type="html"><![CDATA[<p>由于会用到 <code>python</code>写一些小工具，使用 <code>tkinter</code>画一些简单的界面</p><p>在此记录一下 <code>tkinter</code> 的一些用法</p><p>一个简单的 <code>tkinter</code>程序至少应包含以下四个部分：</p><ul><li><code>import  tkinter</code></li><li>创建窗口</li><li>添加控件，以及相应的事件函数</li><li>通过<code>mainloop</code>来显示主窗口</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入 tk 包</span><br><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-comment"># 调用Tk()创建主窗口</span><br>root =tk.Tk()<br><span class="hljs-comment">#开启主循环，让窗口处于显示状态</span><br>root.mainloop()<br></code></pre></td></tr></table></figure><h1 id="tkinter窗口"><a href="#tkinter窗口" class="headerlink" title="tkinter窗口"></a>tkinter窗口</h1><p>创建窗口之后</p><p>可以自定义窗口属性</p><p>常见的属性有下面几个:</p><p>我们可以定义 窗口的 标题 Title</p><blockquote><p>root.title()</p></blockquote><p>也可以定义窗口的 大小(长 * 宽) 以及 窗口的位置 （x 坐标 y 坐标）</p><blockquote><p>root.geometry(“400x200+900+200”)</p></blockquote><p>或者 允许<code>tkinter</code>根窗口根据用户需要更改其大小</p><blockquote><p>root.resizable(height = None, width = None)</p></blockquote><p>窗口的属性如下</p><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>window.title(“my title”)</td><td>接受一个字符串参数，为窗口起一个标题</td></tr><tr><td>window.resizable()</td><td>否允许用户拉伸主窗口大小，默认为可更改，当设置为 resizable(0,0)或者resizable(False,False)时不可更改</td></tr><tr><td>window.geometry()</td><td>设定主窗口的大小以及位置，当参数值为 None 时表示获取窗口的大小和位置信息。</td></tr><tr><td>window.quit()</td><td>关闭当前窗口</td></tr><tr><td>window.update()</td><td>刷新当前窗口</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tkinter</tag>
      
      <tag>python-gui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell获取进程pid</title>
    <link href="/2022/08/03/shell%E8%84%9A%E6%9C%AC/shell%E8%8E%B7%E5%8F%96%E8%BF%9B%E7%A8%8Bpid/"/>
    <url>/2022/08/03/shell%E8%84%9A%E6%9C%AC/shell%E8%8E%B7%E5%8F%96%E8%BF%9B%E7%A8%8Bpid/</url>
    
    <content type="html"><![CDATA[<h3 id="查看进程pid"><a href="#查看进程pid" class="headerlink" title="查看进程pid"></a>查看进程pid</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef|grep 进程名 |grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;<br></code></pre></td></tr></table></figure><h3 id="判断进程是否存在"><a href="#判断进程是否存在" class="headerlink" title="判断进程是否存在"></a>判断进程是否存在</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">p_cnt=ps -ef|grep queue |grep -v grep| wc -l<br>if [ $p_cnt -le 0 ]; then<br><span class="hljs-meta">#</span><span class="bash"> 进程不存在</span><br>else<br><span class="hljs-meta">#</span><span class="bash"> 进程存在</span><br>fi<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>shell脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop常用命令</title>
    <link href="/2022/08/01/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/08/01/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="hdfs常用命令"><a href="#hdfs常用命令" class="headerlink" title="hdfs常用命令"></a>hdfs常用命令</h2><p>查看文件列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -ls &lt;path&gt;<br></code></pre></td></tr></table></figure><p>递归查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -ls -R &lt;path&gt;<br></code></pre></td></tr></table></figure><p>上传文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -put &lt;localFile&gt; &lt;hdfsPath&gt;<br></code></pre></td></tr></table></figure><p>创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -mkdir &lt;path&gt;<br></code></pre></td></tr></table></figure><p>递归删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -rm -r &lt;path&gt;<br></code></pre></td></tr></table></figure><p>查看空间使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -df -h<br></code></pre></td></tr></table></figure><p>查看文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -cat &lt;file&gt;<br></code></pre></td></tr></table></figure><h2 id="yarn常用命令"><a href="#yarn常用命令" class="headerlink" title="yarn常用命令"></a>yarn常用命令</h2><p>查看yarn job</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn application -list<br></code></pre></td></tr></table></figure><p>kill yarn job</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn application -<span class="hljs-built_in">kill</span> &lt;applicationId&gt;<br></code></pre></td></tr></table></figure><p>查看job状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn application -status &lt;applicationId&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>datanode</title>
    <link href="/2022/07/31/%E5%A4%A7%E6%95%B0%E6%8D%AE/datanode/"/>
    <url>/2022/07/31/%E5%A4%A7%E6%95%B0%E6%8D%AE/datanode/</url>
    
    <content type="html"><![CDATA[<h1 id="DATANODE工作机制"><a href="#DATANODE工作机制" class="headerlink" title="DATANODE工作机制"></a>DATANODE工作机制</h1><h3 id="DataNode启动流程"><a href="#DataNode启动流程" class="headerlink" title="DataNode启动流程"></a>DataNode启动流程</h3><ol><li>DataNode 启动后主动向 NameNode 注册</li><li>注册成功后，NameNode会把DataNode注册在元数据中</li><li>注册成功以后每周期(默认6小时)，DataNode向NameNode上报信息(块完好)</li><li>心跳每3秒一次，心跳返回结果带有NameNode给DataNode的命令,比如复制数据块到另一台机器，或者删除某个数据块等等(DataNode没挂)</li><li>超过10分钟+30秒 收到DataNode 的心跳，则认为该节点不可用，此时NameNode 就不会对该文件块进行读写</li></ol><h3 id="DataNode数据存储"><a href="#DataNode数据存储" class="headerlink" title="DataNode数据存储"></a>DataNode数据存储</h3><p>一个数据块在DataNode上以文件形式存储在磁盘上，包括两个文件</p><ul><li>数据本身</li><li>元数据：数据块的长度、数据块的校验、时间戳</li></ul><h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><p>DN向NN汇报当前解读信息的时间间隔，默认6小时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">dfs.blockreport.intervalMsec<br></code></pre></td></tr></table></figure><p>DN扫描自己节点块信息列表的时间，默认6小时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">dfs.datanode.directoryscan.interval<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hdfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>azkaban接口</title>
    <link href="/2022/07/23/%E8%B0%83%E5%BA%A6-azkaban/azkaban%E6%8E%A5%E5%8F%A3/"/>
    <url>/2022/07/23/%E8%B0%83%E5%BA%A6-azkaban/azkaban%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="azkaban接口列表"><a href="#azkaban接口列表" class="headerlink" title="azkaban接口列表"></a>azkaban接口列表</h2><div class="table-container"><table><thead><tr><th>接口</th><th>说明</th></tr></thead><tbody><tr><td><a href="#login">/manager?action=login</a></td><td>登录接口</td></tr></tbody></table></div><hr><h2 id="接口详情"><a href="#接口详情" class="headerlink" title="接口详情"></a>接口详情</h2><ul><li><p><span id = "login">登录接口</span></p><ul><li><p>接口地址：/manager</p></li><li><p>返回格式：Json</p></li><li><p>请求方式：Post</p></li><li><p>请求示例：<a href="https://localhost:8443/manager">https://localhost:8443/manager</a></p></li><li><p>接口备注：This API helps authenticate a user and provides a session.id in response.</p></li><li><p>请求参数说明：</p><p>| 名称         | 类型   | 必填 | 说明     |<br>| —————— | ——— | —— | ———— |<br>| action=login | string | true | 登录参数 |<br>| username     | string | true | 用户名   |<br>| password     | string | true | 用户密码 |</p></li><li><p>返回参数说明：</p><p>| 名称       | 类型   | 说明   |<br>| ————— | ——— | ——— |<br>| status     | int    | 状态码 |<br>| session.id | string | 会话ID |</p></li><li><p>JSON返回示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;status&quot;</span> : <span class="hljs-string">&quot;success&quot;</span>,<br>  <span class="hljs-attr">&quot;session.id&quot;</span> : <span class="hljs-string">&quot;c001aba5-a90f-4daf-8f11-62330d034c0a&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>调度-azkaban</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql-date_format()函数</title>
    <link href="/2022/07/23/mysql/mysql-date-format-%E5%87%BD%E6%95%B0/"/>
    <url>/2022/07/23/mysql/mysql-date-format-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p><strong>DATE_FORMAT()</strong> 函数可以用不同的格式显示日期/时间</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select DATE_FORMAT(date,format);<br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>date</td><td>合法的日期</td></tr><tr><td>format</td><td>规定的日期/时间输出格式</td></tr></tbody></table></div><h3 id="format-格式"><a href="#format-格式" class="headerlink" title="format 格式"></a>format 格式</h3><div class="table-container"><table><thead><tr><th>格式</th><th>说明</th><th>样例</th></tr></thead><tbody><tr><td>%a</td><td>缩写星期名</td><td></td></tr><tr><td>%b</td><td>缩写月名</td><td></td></tr><tr><td>%c</td><td>月,数值</td><td></td></tr><tr><td>%D</td><td>带有英文前缀的月中的天</td><td></td></tr><tr><td>%d</td><td>月的天,数值(00-31)</td><td></td></tr><tr><td>%e</td><td>月的天,数值(0-31)</td><td></td></tr><tr><td>%f</td><td>微秒</td><td></td></tr><tr><td>%H</td><td>小时(00-23)</td><td></td></tr><tr><td>%h</td><td>小时(01-12)</td><td></td></tr><tr><td>%I</td><td>小时(01-12)</td><td></td></tr><tr><td>%i</td><td>分钟(00-59)</td><td></td></tr><tr><td>%j</td><td>年的天(001-366)</td><td></td></tr><tr><td>%k</td><td>小时(0-23)</td><td></td></tr><tr><td>%l</td><td>小时(1-12)</td><td></td></tr><tr><td>%M</td><td>月名</td><td></td></tr><tr><td>%m</td><td>月,数值(00-12)</td><td></td></tr><tr><td>%p</td><td>AM或者PM</td><td></td></tr><tr><td>%r</td><td>时间,12-小时(hh:mm:ss AM 或 PM)</td><td></td></tr><tr><td>%S</td><td>秒(00-59)</td><td></td></tr><tr><td>%s</td><td>秒(00-59)</td><td></td></tr><tr><td>%T</td><td>时间, 24-小时 (hh:mm:ss)</td><td></td></tr><tr><td>%U</td><td>周 (00-53) 星期日是一周的第一天</td><td></td></tr><tr><td>%u</td><td>周 (00-53) 星期一是一周的第一天</td><td></td></tr><tr><td>%V</td><td>周 (01-53) 星期日是一周的第一天，与 %X 使用</td><td></td></tr><tr><td>%v</td><td>周 (01-53) 星期一是一周的第一天，与 %x 使用</td><td></td></tr><tr><td>%W</td><td>星期名</td><td></td></tr><tr><td>%w</td><td>周的天 （0=星期日, 6=星期六）</td><td></td></tr><tr><td>%X</td><td>年，其中的星期日是周的第一天，4 位，与 %V 使用</td><td></td></tr><tr><td>%x</td><td>年，其中的星期一是周的第一天，4 位，与 %v 使用</td><td></td></tr><tr><td>%Y</td><td>年，4 位</td><td></td></tr><tr><td>%y</td><td>年，2 位</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>azkaban重启 webserver报没有激活的执行器</title>
    <link href="/2022/07/22/%E8%B0%83%E5%BA%A6-azkaban/azkaban%E9%87%8D%E5%90%AF-webserver%E6%8A%A5%E6%B2%A1%E6%9C%89%E6%BF%80%E6%B4%BB%E7%9A%84%E6%89%A7%E8%A1%8C%E5%99%A8/"/>
    <url>/2022/07/22/%E8%B0%83%E5%BA%A6-azkaban/azkaban%E9%87%8D%E5%90%AF-webserver%E6%8A%A5%E6%B2%A1%E6%9C%89%E6%BF%80%E6%B4%BB%E7%9A%84%E6%89%A7%E8%A1%8C%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>azkaban 重启后 webserver报错</p><p>azkaban重启时</p><p>先重启执行器<br>在 /usr/local/azkaban/azkaban-exec-server 目录下执行 bin/start-exec.sh</p><p>在 /usr/local/azkaban/azkaban-web-server 目录下执行 bin/start-exec.sh</p><p>报 :ERROR [ExecutorManager] [main] [Azkaban] No activee executors found</p><p>需要去 Azkaban配置数据库中更新 port=12321的执行器激活数量为1</p><p>update executors set active = 1 where port = 12321</p><p>并且使用接口启用</p><p>curl -G “<a href="http://localhost:12321/executor?action=activate">http://localhost:12321/executor?action=activate</a>“ &amp;&amp; echo</p>]]></content>
    
    
    <categories>
      
      <category>调度-azkaban</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>azkaban任务一直preparing</title>
    <link href="/2022/07/22/%E8%B0%83%E5%BA%A6-azkaban/azkaban%E4%BB%BB%E5%8A%A1%E4%B8%80%E7%9B%B4preparing/"/>
    <url>/2022/07/22/%E8%B0%83%E5%BA%A6-azkaban/azkaban%E4%BB%BB%E5%8A%A1%E4%B8%80%E7%9B%B4preparing/</url>
    
    <content type="html"><![CDATA[<p>内存问题：<br>过滤器会检查 executor 主机空余内存是否会大于 6G，如果不足 6G，则 web-server 会认为 集群资源不够， 不会将任务交由该主机执行，需要修改 azkaban-web下的azkaban.properties配置文件，去掉MinimumFreeMemory</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 原来</span><br><span class="hljs-meta">azkaban.executorselector.filters</span>=<span class="hljs-string">StaticRemainingFlowSize,MinimumFreeMemory,CpuStatus</span><br><br><span class="hljs-comment"># 新</span><br><span class="hljs-meta">azkaban.executorselector.filters</span>=<span class="hljs-string">StaticRemainingFlowSize,CpuStatus</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>调度-azkaban</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ssh远程登陆时一些命令无法使用</title>
    <link href="/2022/07/22/shell%E8%84%9A%E6%9C%AC/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E6%97%B6%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/07/22/shell%E8%84%9A%E6%9C%AC/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E6%97%B6%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>在180 ssh 到另一台服务器179 执行命令时报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@180 sbin]<span class="hljs-comment"># ssh 179 -p 60022 &quot;mapred --help&quot;</span><br>bash: mapred: 未找到命令<br></code></pre></td></tr></table></figure><br>但实际在179 可以执行该命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@179 sbin]<span class="hljs-comment"># mapred --help</span><br>Usage: mapred [OPTIONS] SUBCOMMAND [SUBCOMMAND OPTIONS]<br>or mapred [OPTIONS] CLASSNAME [CLASSNAME OPTIONS]<br><span class="hljs-built_in">where</span> CLASSNAME is a user-provided Java class<br><br>OPTIONS is none or any of:<br><br>--config dir Hadoop config directory<br>--debug turn on shell script debug mode<br>--<span class="hljs-built_in">help</span> usage information<br><br>SUBCOMMAND is one of:<br><br><br>Admin Commands:<br><br>frameworkuploader mapreduce framework upload<br>hsadmin job <span class="hljs-built_in">history</span> server admin interface<br><br>Client Commands:<br><br>classpath prints the class path needed <span class="hljs-keyword">for</span> running mapreduce subcommands<br>envvars display computed Hadoop environment variables<br>job manipulate MapReduce <span class="hljs-built_in">jobs</span><br>minicluster CLI MiniCluster<br>pipes run a Pipes job<br>queue get information regarding JobQueues<br>sampler sampler<br>version <span class="hljs-built_in">print</span> the version<br><br>Daemon Commands:<br><br>historyserver run job <span class="hljs-built_in">history</span> servers as a standalone daemon<br><br>SUBCOMMAND may <span class="hljs-built_in">print</span> <span class="hljs-built_in">help</span> when invoked w/o parameters or with -h.<br></code></pre></td></tr></table></figure></p><p>这是 ssh 在登录远程的环境变量中不包含可执行文件的路径, 所以要自己加上路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@180 sbin]<span class="hljs-comment"># ssh 179 -p 60022 &quot;/usr/local/hadoop/hadoop-3.2.2/bin/mapred --help&quot;</span><br>Usage: mapred [OPTIONS] SUBCOMMAND [SUBCOMMAND OPTIONS]<br>or mapred [OPTIONS] CLASSNAME [CLASSNAME OPTIONS]<br><span class="hljs-built_in">where</span> CLASSNAME is a user-provided Java class<br><br>OPTIONS is none or any of:<br><br>tput: No value <span class="hljs-keyword">for</span> <span class="hljs-variable">$TERM</span> and no -T specified<br>--config dir Hadoop config directory<br>--debug turn on shell script debug mode<br>--<span class="hljs-built_in">help</span> usage information<br><br>SUBCOMMAND is one of:<br><br><br>Admin Commands:<br><br>tput: No value <span class="hljs-keyword">for</span> <span class="hljs-variable">$TERM</span> and no -T specified<br>frameworkuploader mapreduce framework upload<br>hsadmin job <span class="hljs-built_in">history</span> server admin interface<br><br>Client Commands:<br><br>tput: No value <span class="hljs-keyword">for</span> <span class="hljs-variable">$TERM</span> and no -T specified<br>classpath prints the class path needed <span class="hljs-keyword">for</span> running mapreduce<br>subcommands<br>envvars display computed Hadoop environment variables<br>job manipulate MapReduce <span class="hljs-built_in">jobs</span><br>minicluster CLI MiniCluster<br>pipes run a Pipes job<br>queue get information regarding JobQueues<br>sampler sampler<br>version <span class="hljs-built_in">print</span> the version<br><br>Daemon Commands:<br><br>tput: No value <span class="hljs-keyword">for</span> <span class="hljs-variable">$TERM</span> and no -T specified<br>historyserver run job <span class="hljs-built_in">history</span> servers as a standalone daemon<br><br>SUBCOMMAND may <span class="hljs-built_in">print</span> <span class="hljs-built_in">help</span> when invoked w/o parameters or with -h.<br></code></pre></td></tr></table></figure><p>这样就可以执行了</p>]]></content>
    
    
    <categories>
      
      <category>shell脚本</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hdfs组成架构</title>
    <link href="/2022/07/18/%E5%A4%A7%E6%95%B0%E6%8D%AE/hdfs%E7%BB%84%E6%88%90%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/07/18/%E5%A4%A7%E6%95%B0%E6%8D%AE/hdfs%E7%BB%84%E6%88%90%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h3 id="HDFS组成架构"><a href="#HDFS组成架构" class="headerlink" title="HDFS组成架构"></a>HDFS组成架构</h3><ul><li>NameNode(nn): 就是Master, 它是一个主管，管理者<ul><li>管理 HDFS 的名称空间(namespace)</li><li>配置副本策略</li><li>管理数据块(block)映射信息</li><li>处理客户端读写请求</li></ul></li><li>DataNode():就是 Slave.NameNode 下达命令，DataNode执行操作<ul><li>存储实际数据</li><li>执行数据块 读/写 操作‘</li></ul></li><li>Client<ul><li>文件切分,文件上传到 HDFS 的时候，客户端将文件切分成一个一个的 Block</li><li>和 NameNode 交互 获取文件位置信息</li><li>和 DataNode交互，读取或者写入数据</li><li>提供HDFS 管理命令</li></ul></li><li>Secondary NameNode: 并非 NameNode 的热备。当NameNode 挂掉的时候，，并不能马上替换 NameNode并提供服务<ul><li>辅助NameNode ，分担工作量，比如定期合并 Fsimage和 Edits,并推送给NameNode</li><li>紧急情况下，可以辅助恢复 NameNode</li></ul></li></ul><h3 id="HDFS文件块大小"><a href="#HDFS文件块大小" class="headerlink" title="HDFS文件块大小"></a>HDFS文件块大小</h3><p>HDFS 文件在物理上是分块存储(block)，块的大小可以通过配置参数(dfs.blocksize)来规定，默认为 128M</p><h4 id="HDFS块不能设置的太大也不能太小"><a href="#HDFS块不能设置的太大也不能太小" class="headerlink" title="HDFS块不能设置的太大也不能太小"></a>HDFS块不能设置的太大也不能太小</h4><ul><li>如果设置太小，会增加寻址时间，程序一直在找块的开始位置</li><li>如果设置的太大，从磁盘传输数据的时间会明显大于定位这个块开始位置所需的时间，导致程序处理数据会变慢</li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hdfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>346-数据流中的移动平均值</title>
    <link href="/2022/07/16/%E7%AE%97%E6%B3%95/346-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%9D%87%E5%80%BC/"/>
    <url>/2022/07/16/%E7%AE%97%E6%B3%95/346-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%9D%87%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode.cn/problems/moving-average-from-data-stream/">346. 数据流中的移动平均值 - 力扣（LeetCode）</a></p><p>给定一个整数数据流和一个窗口大小，根据该滑动窗口的大小，计算其所有整数的移动平均值。</p><p>实现<code>MovingAverage</code> 类：</p><ul><li><code>MovingAverage(int size)</code> 用窗口大小 <code>size</code> 初始化对象。</li><li><code>double next(int val)</code> 计算并返回数据流中最后 <code>size</code> 个值的移动平均值。</li></ul><p>示例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">输入：<br>[<span class="hljs-string">&quot;MovingAverage&quot;</span>, <span class="hljs-string">&quot;next&quot;</span>, <span class="hljs-string">&quot;next&quot;</span>, <span class="hljs-string">&quot;next&quot;</span>, <span class="hljs-string">&quot;next&quot;</span>]<br>[[<span class="hljs-number">3</span>], [<span class="hljs-number">1</span>], [<span class="hljs-number">10</span>], [<span class="hljs-number">3</span>], [<span class="hljs-number">5</span>]]<br>输出：<br>[null, <span class="hljs-number">1.0</span>, <span class="hljs-number">5.5</span>, <span class="hljs-number">4.66667</span>, <span class="hljs-number">6.0</span>]<br><br>解释：<br>MovingAverage movingAverage = new MovingAverage(<span class="hljs-number">3</span>);<br>movingAverage.<span class="hljs-keyword">next</span>(<span class="hljs-number">1</span>); <span class="hljs-regexp">//</span> 返回 <span class="hljs-number">1.0</span> = <span class="hljs-number">1</span> / <span class="hljs-number">1</span><br>movingAverage.<span class="hljs-keyword">next</span>(<span class="hljs-number">10</span>); <span class="hljs-regexp">//</span> 返回 <span class="hljs-number">5.5</span> = (<span class="hljs-number">1</span> + <span class="hljs-number">10</span>) / <span class="hljs-number">2</span><br>movingAverage.<span class="hljs-keyword">next</span>(<span class="hljs-number">3</span>); <span class="hljs-regexp">//</span> 返回 <span class="hljs-number">4.66667</span> = (<span class="hljs-number">1</span> + <span class="hljs-number">10</span> + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span><br>movingAverage.<span class="hljs-keyword">next</span>(<span class="hljs-number">5</span>); <span class="hljs-regexp">//</span> 返回 <span class="hljs-number">6.0</span> = (<span class="hljs-number">10</span> + <span class="hljs-number">3</span> + <span class="hljs-number">5</span>) / <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>提示:</p><ul><li><code>1 &lt;= size &lt;= 1000</code></li><li>$ -10^5 $<code>&lt;=val&lt;=</code> $ 10^5 $</li><li>最多调用<code>next</code>方法  $10^4$ 次</li></ul><p>基于数组的循环队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MovingAverage</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr;<br><span class="hljs-comment">// 调用次数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tempSize;<br><span class="hljs-comment">// 窗口内数据和</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sum;<br><br>    <span class="hljs-comment">/** Initialize your data structure here. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MovingAverage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-comment">// 初始化</span><br>        <span class="hljs-keyword">this</span>.arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">next</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        tempSize++;<br>        sum += val;<br>        <span class="hljs-comment">// 计算游标</span><br>        <span class="hljs-keyword">int</span> index = (tempSize - <span class="hljs-number">1</span>) % arr.length;<br>        <span class="hljs-comment">// 将原数据从窗口中排除</span><br>        <span class="hljs-keyword">if</span>(tempSize &gt; arr.length)&#123;<br>            sum -= arr[index];<br>        &#125;<br>        <span class="hljs-comment">// 游标更新为新数据</span><br>        arr[index] = val;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">double</span>) sum / (tempSize &gt; arr.length ? arr.length : tempSize);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MovingAverage object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MovingAverage obj = new MovingAverage(size);</span><br><span class="hljs-comment"> * double param_1 = obj.next(val);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flink无法用stop-cluster.sh停止</title>
    <link href="/2022/07/16/%E5%A4%A7%E6%95%B0%E6%8D%AE/flink%E6%97%A0%E6%B3%95%E7%94%A8stop-cluster-sh%E5%81%9C%E6%AD%A2/"/>
    <url>/2022/07/16/%E5%A4%A7%E6%95%B0%E6%8D%AE/flink%E6%97%A0%E6%B3%95%E7%94%A8stop-cluster-sh%E5%81%9C%E6%AD%A2/</url>
    
    <content type="html"><![CDATA[<p>使用 <a href="http://stop-cluster.sh/">stop-cluster.sh</a> 关闭 flink 时失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./stop-cluster.sh<br><span class="hljs-comment"># No taskexecutor daemon to stop on host beideng-nj-prod-hadoop-02.</span><br><span class="hljs-comment"># No standalonesession daemon to stop on host beideng-nj-prod-hadoop-02.</span><br></code></pre></td></tr></table></figure><p>但是 ps -ef|grep flink 可以看到 flink 进程<br>访问flink web 界面也正常</p><p>和 hadoop 一样，flink 在启动的时候会将 PID 存放到一个目录中。默认是 /tmp 目录<br>由于 /tmp 目录会定期删除，所以找不到 PID 文件，集群停止失败</p><p>更改 PID 目录即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi flink/bin/config.sh<br><br><span class="hljs-comment"># WARNING !!! , these values are only used if there is nothing else is specified in</span><br><span class="hljs-comment"># conf/flink-conf.yaml</span><br><br>DEFAULT_ENV_PID_DIR=<span class="hljs-string">&quot;/tmp&quot;</span>                          <span class="hljs-comment"># Directory to store *.pid files to</span><br>DEFAULT_ENV_LOG_MAX=10                              <span class="hljs-comment"># Maximum number of old log files to keep</span><br>DEFAULT_ENV_JAVA_OPTS=<span class="hljs-string">&quot;&quot;</span>                            <span class="hljs-comment"># Optional JVM args</span><br>DEFAULT_ENV_JAVA_OPTS_JM=<span class="hljs-string">&quot;&quot;</span>                         <span class="hljs-comment"># Optional JVM args (JobManager)</span><br>DEFAULT_ENV_JAVA_OPTS_TM=<span class="hljs-string">&quot;&quot;</span>                         <span class="hljs-comment"># Optional JVM args (TaskManager)</span><br>DEFAULT_ENV_JAVA_OPTS_HS=<span class="hljs-string">&quot;&quot;</span>                         <span class="hljs-comment"># Optional JVM args (HistoryServer)</span><br>DEFAULT_ENV_JAVA_OPTS_CLI=<span class="hljs-string">&quot;&quot;</span>                        <span class="hljs-comment"># Optional JVM args (Client)</span><br>DEFAULT_ENV_SSH_OPTS=<span class="hljs-string">&quot;&quot;</span>                             <span class="hljs-comment"># Optional SSH parameters running in cluster mode</span><br>DEFAULT_YARN_CONF_DIR=<span class="hljs-string">&quot;&quot;</span>                            <span class="hljs-comment"># YARN Configuration Directory, if necessary</span><br>DEFAULT_HADOOP_CONF_DIR=<span class="hljs-string">&quot;&quot;</span>                          <span class="hljs-comment"># Hadoop Configuration Directory, if necessary</span><br>DEFAULT_HBASE_CONF_DIR=<span class="hljs-string">&quot;&quot;</span>                           <span class="hljs-comment"># HBase Configuration Directory, if necessary</span><br><br> <span class="hljs-comment"># 修改 DEFAULT_ENV_PID_DIR=&quot;/tmp&quot; 地址</span><br> <span class="hljs-comment"># 改为自己指定的地址 如 DEFAULT_ENV_PID_DIR=“/var/run/flink/$USER”</span><br> <span class="hljs-comment"># 再次启动 flink</span><br> ./start-cluster.sh<br> <br> <span class="hljs-comment"># 进入刚才修改的目录</span><br> <span class="hljs-built_in">cd</span> /var/run/flink/<span class="hljs-variable">$USER</span><br> <br> <span class="hljs-comment"># 发现已经生成 PID 文件</span><br> ls<br> <span class="hljs-comment"># flink-root-standalonesession.pid</span><br> <span class="hljs-comment"># flink-root-taskexecutor.pid</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu20.04切换阿里源</title>
    <link href="/2022/07/14/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/ubuntu20-04%E5%88%87%E6%8D%A2%E9%98%BF%E9%87%8C%E6%BA%90/"/>
    <url>/2022/07/14/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/ubuntu20-04%E5%88%87%E6%8D%A2%E9%98%BF%E9%87%8C%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h3 id="ubuntu20-04-切换阿里源"><a href="#ubuntu20-04-切换阿里源" class="headerlink" title="ubuntu20.04 切换阿里源"></a>ubuntu20.04 切换阿里源</h3><p>执行</p><blockquote><p>sudo apt install libopencv-dev libeigen3-dev</p></blockquote><p>报错</p><blockquote><p>Err:1 <a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> focal/universe amd64 libfyba0 amd64 4.1.1-6build1<br>  Connection failed [IP: 185.125.190.39 80]<br>Err:2 <a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> focal/universe amd64 libfreexl1 amd64 1.0.5-3<br>  Connection failed [IP: 185.125.190.36 80]<br>E: Failed to fetch <a href="http://archive.ubuntu.com/ubuntu/pool/universe/f/fyba/libfyba0_4.1.1-6build1_amd64.deb">http://archive.ubuntu.com/ubuntu/pool/universe/f/fyba/libfyba0_4.1.1-6build1_amd64.deb</a>  Connection failed [IP: 185.125.190.39 80]<br>E: Failed to fetch <a href="http://archive.ubuntu.com/ubuntu/pool/universe/f/freexl/libfreexl1_1.0.5-3_amd64.deb">http://archive.ubuntu.com/ubuntu/pool/universe/f/freexl/libfreexl1_1.0.5-3_amd64.deb</a>  Connection failed [IP: 185.125.190.36 80]<br>E: Unable to fetch some archives, maybe run apt-get update or try with —fix-missing?</p></blockquote><p>怀疑可能是源的问题，因此考虑换成阿里源再试试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 首先进入目录 备份相关文件</span><br><span class="hljs-built_in">cd</span> /etc/apt<br><br>cp sources.list sources.list.bak<br><br></code></pre></td></tr></table></figure><p>开始准备换源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看系统信息</span><br>lsb_release -a |grep Codename<br><span class="hljs-comment"># 结果如下</span><br><span class="hljs-comment"># No LSB modules are available.</span><br><span class="hljs-comment"># Codename:       focal</span><br></code></pre></td></tr></table></figure><blockquote><p>注意: Codename  :  focal </p></blockquote><p>阿里源配置模板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.aliyun.com/ubuntu/ $Codename main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ $Codename main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ $Codename-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ $Codename-security main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ $Codename-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ $Codename-updates main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ $Codename-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ $Codename-proposed main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ $Codename-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ $Codename-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>我们需要将 <strong>$Codename</strong> 替换为上面的 focal</p><p>替换后如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>替换完成后</p><blockquote><p> sudo apt-get update</p></blockquote><p>再执行</p><blockquote><p>sudo apt install libopencv-dev libeigen3-dev</p></blockquote><p>成功安装</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>513-找树左下角的值</title>
    <link href="/2022/06/22/%E7%AE%97%E6%B3%95/513-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/"/>
    <url>/2022/06/22/%E7%AE%97%E6%B3%95/513-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">513. 找树左下角的值 - 力扣（LeetCode）</a></p><p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，请找出该二叉树的 <strong>最底层 最左边</strong> 节点的值。</p><p>假设二叉树中至少有一个节点。</p><h3 id="1-层序遍历"><a href="#1-层序遍历" class="headerlink" title="1.层序遍历"></a>1.层序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for a binary tree node.</span><br><span class="hljs-comment">     * public class TreeNode &#123;</span><br><span class="hljs-comment">     * int val;</span><br><span class="hljs-comment">     * TreeNode left;</span><br><span class="hljs-comment">     * TreeNode right;</span><br><span class="hljs-comment">     * TreeNode() &#123;&#125;</span><br><span class="hljs-comment">     * TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment">     * TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment">     * this.val = val;</span><br><span class="hljs-comment">     * this.left = left;</span><br><span class="hljs-comment">     * this.right = right;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        Queue&lt;TreeNode&gt; treeNodeQueue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        treeNodeQueue.offer(root);<br>        <span class="hljs-keyword">int</span> res = root.val;<br>        <span class="hljs-keyword">while</span> (!treeNodeQueue.isEmpty()) &#123;<br>            <span class="hljs-comment">// 记录每层数量</span><br>            <span class="hljs-keyword">int</span> size = treeNodeQueue.size();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                TreeNode curNode = treeNodeQueue.poll();<br>                <span class="hljs-comment">// 取每层第一个</span><br>                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;<br>                    res = curNode.val;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (curNode.left != <span class="hljs-keyword">null</span>) &#123;<br>                    treeNodeQueue.offer(curNode.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (curNode.right != <span class="hljs-keyword">null</span>) &#123;<br>                    treeNodeQueue.offer(curNode.right);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 最后一层的第一个就是结果</span><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建hive-udf</title>
    <link href="/2022/06/22/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%88%9B%E5%BB%BAhive-udf/"/>
    <url>/2022/06/22/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%88%9B%E5%BB%BAhive-udf/</url>
    
    <content type="html"><![CDATA[<h3 id="1-自定义-UDF-函数"><a href="#1-自定义-UDF-函数" class="headerlink" title="1.自定义 UDF 函数"></a>1.自定义 UDF 函数</h3><p>pom 中添加下面依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hive<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hive-exec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 不需要打入jar包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></p><blockquote><p>由于  hive  环境中已经有了  hive-exec jar包 所以打包时，不需要将hive-exec 打入</p></blockquote><p>新建一个类 继承 UDF 即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 继承UDF类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUDF</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UDF</span> </span>&#123;<br><span class="hljs-comment">// 实现evaluate方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">evaluate</span><span class="hljs-params">(String str)</span> </span>&#123;<br>        <span class="hljs-comment">// 自定义逻辑</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在这个类中，方法名一定要为 <strong>evaluate</strong></p><h3 id="2-打包上传"><a href="#2-打包上传" class="headerlink" title="2.打包上传"></a>2.打包上传</h3><p>在 maven 中打包<br>找到刚才的 jar 包<br>上传到 hive 所在服务器</p><p>将jar包移动到  hive目录下的auxlib目录</p><p>然后重启hiveserver2</p><h3 id="3-注册函数"><a href="#3-注册函数" class="headerlink" title="3.注册函数"></a>3.注册函数</h3><p>将jar包注册到hive中后，就可以注册刚才自己编写的udf函数了</p><p>一般需要先注册临时函数，因为UDF开发完成后，需要进过一些测试才能确认代码是否没有问题。在测试UDF代码时，务必使用临时函数进行测试。这样即使代码出现了问题，也不会把函数真正的注册到Hive。代码测试完毕并且确认无误后，再将函数注册为永久函数</p><p>HIVE 函数相关<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建临时函数<br><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">FUNCTION</span> <span class="hljs-operator">&lt;</span>函数名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">AS</span> <span class="hljs-operator">&lt;</span>class全路径<span class="hljs-operator">&gt;</span>;<br># 删除临时函数<br><span class="hljs-keyword">DROP</span> TEMPORARY <span class="hljs-keyword">FUNCTION</span> [IF <span class="hljs-keyword">EXISTS</span>] <span class="hljs-operator">&lt;</span>函数名<span class="hljs-operator">&gt;</span>;<br><br><br># 创建永久函数<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> [db_name.]function_name <span class="hljs-keyword">AS</span> class_name<br>  [<span class="hljs-keyword">USING</span> JAR<span class="hljs-operator">|</span>FILE<span class="hljs-operator">|</span>ARCHIVE <span class="hljs-string">&#x27;file_uri&#x27;</span> [, JAR<span class="hljs-operator">|</span>FILE<span class="hljs-operator">|</span>ARCHIVE <span class="hljs-string">&#x27;file_uri&#x27;</span>] ];<br># 删除永久函数<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> [IF <span class="hljs-keyword">EXISTS</span>] function_name;<br><br><br># 查看函数<br><span class="hljs-keyword">show</span>  functions;<br><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive权限相关命令</title>
    <link href="/2022/06/22/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/06/22/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看当前用户</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">current_user</span>();<br> <br> <br><span class="hljs-comment">-- 查看当前角色</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">current</span> roles;<br> <br> <br><span class="hljs-comment">-- 切换 admin 角色</span><br><span class="hljs-keyword">set</span> role admin;<br> <br><span class="hljs-comment">-- 查看所有角色</span><br><span class="hljs-keyword">show</span> roles;<br> <br> <br> <br><span class="hljs-comment">--  查看用户的角色</span><br>show role grant user &#123;userName&#125;;<br> <br> <br> <br> <br><span class="hljs-comment">-- 把角色授权给某个用户</span><br>grant role &#123;roleName&#125; to user &#123;userName&#125;;<br> <br> <br> <br> <br><span class="hljs-comment">-- 撤销某个用户的角色授权</span><br>revoke role &#123;roleName&#125; from user &#123;userName&#125;;<br> <br> <br> <br> <br> <br> <br><span class="hljs-comment">-- 创建角色</span><br>create role &#123;roleName&#125;;<br> <br> <br> <br> <br><span class="hljs-comment">-- 删除角色</span><br>drop role &#123;roleName&#125;;<br> <br> <br><span class="hljs-comment">-- 授予某个库的权限给某个用户</span><br>grant select on database &#123;dbName&#125; to user &#123;userName&#125;;<br>grant insert on database &#123;dbName&#125; to user &#123;userName&#125;;<br>grant update on database &#123;dbName&#125; to user &#123;userName&#125;;<br>grant delete on database &#123;dbName&#125; to user &#123;userName&#125;;<br> <br><span class="hljs-comment">-- 回收某个库的权限给某个用户</span><br>revoke select on database &#123;dbName&#125; from user &#123;userName&#125;;<br>revoke insert on database &#123;dbName&#125; from user &#123;userName&#125;;<br>revoke update on database &#123;dbName&#125; from user &#123;userName&#125;;<br>revoke delete on database &#123;dbName&#125; from user &#123;userName&#125;;<br> <br><span class="hljs-comment">-- 查看指定用户在所有库下面的权限</span><br>show grant user &#123;userName&#125;;<br><span class="hljs-comment">-- 查看指定用户在某个库的权限</span><br>show grant user &#123;userName&#125; on database &#123;dbName&#125;;<br> <br> <br> <br> <br> <br> <br><span class="hljs-comment">-- 授予表的权限给某个用户</span><br>grant select on table &#123;dbName&#125;.tableName to user &#123;userName&#125;;<br>grant insert on table &#123;dbName&#125;.tableName to user &#123;userName&#125;;<br>grant update on table &#123;dbName&#125;.tableName to user &#123;userName&#125;;<br>grant delete on table &#123;dbName&#125;.tableName to user &#123;userName&#125;;<br> <br> <br><span class="hljs-comment">-- 回收某个用户的表的权限</span><br>revoke create on table &#123;dbName&#125;.tableName from user &#123;userName&#125;;<br>revoke select on table &#123;dbName&#125;.tableName from user &#123;userName&#125;;<br>revoke insert on table &#123;dbName&#125;.tableName from user &#123;userName&#125;;<br>revoke update on table &#123;dbName&#125;.tableName from user &#123;userName&#125;;<br>revoke delete on table &#123;dbName&#125;.tableName from user &#123;userName&#125;;<br> <br><span class="hljs-comment">-- 查看指定用户在指定表的权限</span><br>show grant user &#123;userName&#125; on table &#123;dbName&#125;.&#123;tableName&#125;;<br> <br> <br> <br> <br> <br><span class="hljs-comment">-- 权限类别</span><br><span class="hljs-comment">-- ALTER  更改表结构，创建分区</span><br><span class="hljs-comment">-- CREATE  创建表</span><br><span class="hljs-comment">-- DROP  删除表，或分区</span><br><span class="hljs-comment">-- INDEX  创建和删除索引</span><br><span class="hljs-comment">-- LOCK  锁定表，保证并发</span><br><span class="hljs-comment">-- SELECT  查询表权限</span><br><span class="hljs-comment">-- SHOW_DATABASE  查看数据库权限</span><br><span class="hljs-comment">-- UPDATE  为表加载本地数据的权限</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yarn配置</title>
    <link href="/2022/06/21/%E5%A4%A7%E6%95%B0%E6%8D%AE/yarn%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/06/21/%E5%A4%A7%E6%95%B0%E6%8D%AE/yarn%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="Capacity-Scheduler（容量调度器）"><a href="#Capacity-Scheduler（容量调度器）" class="headerlink" title="Capacity Scheduler（容量调度器）"></a>Capacity Scheduler（容量调度器）</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.capacity.maximum-am-resource-percent<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>0.8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p> maximum-am-resource-percent：集群中用于运行应用程序ApplicationMaster的资源比例上限，该参数通常用于限制处于活动状态的应用程序数目。所有队列的ApplicationMaster资源比例上限可通过参数yarn.scheduler.capacity.maximum-am-resource-percent设置，而单个队列可通过参数yarn.scheduler.capacity.<queue-path>.maximum-am-resource-percent设置适合自己的值</p></blockquote><h3 id="节点级别"><a href="#节点级别" class="headerlink" title="节点级别"></a>节点级别</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：每个节点可用的最大内存，RM中的两个值不应该超过此值。此数值可以用于计算container最大数目，即：用此值除以RM中的最小容器内存。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.resource.cpu-vcores<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>每个节点总的可用虚拟CPU个数。 默认值：8</p><blockquote><p>目前推荐将该值设值为与物理CPU核数数目相同。如果你的节点CPU核数不够8个，则需要调减小这个值，而YARN不会智能的探测节点的物理CPU总数</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-pmem-ratio<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>Ratio between virtual memory to physical memory when setting memory limits for containers. Container allocations are expressed in terms of physical memory, and virtual memory usage is allowed to exceed this allocation by this ratio.</p><p>每单位的物理内存总量对应的虚拟内存量，默认是2.1，表示每使用1MB的物理内存，最多可以使用2.1MB的虚拟内存总量。</p></blockquote><h3 id="容器级别"><a href="#容器级别" class="headerlink" title="容器级别"></a>容器级别</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>8192<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1024<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：单个容器可申请的最小与最大内存，应用在运行申请内存时不能超过最大值，小于最小值则分配最小值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-vcores<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-vcores<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>yarn-default.xml<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：单个容器可申请的最小/最大虚拟CPU个数。比如设置为1和4，则运行MapRedce作业时，每个Task最少可申请1个虚拟CPU，最多可申请4个虚拟CPU。</p></blockquote><p>AM内存配置相关参数，此处以MapReduce为例进行说明（这两个值是AM特性，应在mapred-site.xml中配置），如下：</p><blockquote><p>mapreduce.map.memory.mb<br>mapreduce.reduce.memory.mb</p></blockquote><p>说明：这两个参数指定用于MapReduce的两个任务（Map and Reduce task）的内存大小，其值应该在RM中的最大最小container之间。如果没有配置则通过如下简单公式获得：</p><blockquote><p>max(MIN_CONTAINER_SIZE, (Total Available RAM) / containers))</p></blockquote><p>一般的reduce应该是map的2倍。注：这两个值可以在应用启动时通过参数改变；</p><p>AM中其它与内存相关的参数，还有JVM相关的参数，这些参数可以通过，如下选项配置：</p><blockquote><p>mapreduce.map.java.opts<br>mapreduce.reduce.java.opts</p></blockquote><p>说明：这两个参主要是为需要运行JVM程序（java、scala等）准备的，通过这两个设置可以向JVM中传递参数的，与内存有关的是，-Xmx，-Xms等选项。此数值大小，应该在AM中的map.mb和reduce.mb之间。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yarn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell输出重定向</title>
    <link href="/2022/06/21/shell%E8%84%9A%E6%9C%AC/shell%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <url>/2022/06/21/shell%E8%84%9A%E6%9C%AC/shell%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h2 id="Shell输出重定向"><a href="#Shell输出重定向" class="headerlink" title="Shell输出重定向"></a>Shell输出重定向</h2><blockquote><p>/dev/null</p></blockquote><p>是一个特殊的设备文件，这个文件接收到任何数据都会被丢弃。因此，null 这个设备通常也被称为位桶（bit bucket）或黑洞。</p><p>常见的 重定向</p><blockquote><p>/dev/null 2&gt;&amp;1</p></blockquote><p>含义为 :<br>将 <strong>标准输出</strong> 和 <strong>错误输出</strong> 都 输出到 <strong>黑洞</strong><br>其实质是 </p><blockquote><p>1  &gt;  /dev/null  2&gt;&amp;1</p></blockquote><ul><li>1 代表 标准输出 </li><li>2 代表 错误输出</li><li>/dev/null 2&gt;&amp;1 这里省略了 开头的1</li></ul><p>表示为:</p><ol><li>原本 <strong>1(标准输出)</strong> 输出到 <strong>屏幕</strong></li><li><strong>1&gt;/dev/null</strong> 将 <strong>1(标准输出)</strong> 输出到 <strong>黑洞</strong></li><li><strong>2&gt;&amp;1</strong> 将 <strong>2(错误输出)</strong> 输出到 <strong>1(标准输出)</strong>,此时因为 <strong>1(标准输出)</strong>  输出到 <strong>黑洞</strong> 了，所以 <strong>2(错误输出)</strong> 也输出到了 <strong>黑洞</strong></li></ol><p>以此类推</p><blockquote><p>2&gt;/dev/null</p></blockquote><p>把 <strong>2(错误输出)</strong> 输出到 <strong>黑洞</strong>，<strong>1(标准输出)</strong> 打印到 <strong>屏幕</strong></p><blockquote><p>2&gt;&amp;1 &gt;/dev/null</p></blockquote><p>把 <strong>2(错误输出)</strong> 输出到 <strong>屏幕</strong>，<strong>1(标准输出)</strong> 打印到 <strong>黑洞</strong> </p>]]></content>
    
    
    <categories>
      
      <category>shell脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库连接工具类</title>
    <link href="/2022/06/21/java%E5%B7%A5%E5%85%B7%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2022/06/21/java%E5%B7%A5%E5%85%B7%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="mysql数据库连接类"><a href="#mysql数据库连接类" class="headerlink" title="mysql数据库连接类"></a>mysql数据库连接类</h2><p>首先在maven项目的 pom 文件添加以下依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>java 代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 数据库连接工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xxzuo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span>: 1293378490@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/17 14:42</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbUtils</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DruidDataSource dataSource;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/xxxxx&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-comment">//设置初始化连接数，最大连接数，最小闲置数</span><br>        dataSource.setInitialSize(<span class="hljs-number">10</span>);<br>        dataSource.setMaxActive(<span class="hljs-number">50</span>);<br>        dataSource.setMinIdle(<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">//返回连接</span><br>        <span class="hljs-keyword">return</span>  dataSource.getConnection();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">(String jdbc, String userName, String password)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(jdbc);<br>        dataSource.setUsername(userName);<br>        dataSource.setPassword(password);<br>        <span class="hljs-comment">//设置初始化连接数，最大连接数，最小闲置数</span><br>        dataSource.setInitialSize(<span class="hljs-number">10</span>);<br>        dataSource.setMaxActive(<span class="hljs-number">50</span>);<br>        dataSource.setMinIdle(<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">//返回连接</span><br>        <span class="hljs-keyword">return</span>  dataSource.getConnection();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>调用方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> (Connection connection = DbUtils.getConnection()) &#123;<br>        String sql = <span class="hljs-string">&quot;SELECT COL_NAME FROM TABLE_NAME&quot;</span>;<br>        PreparedStatement preparedStatement = connection.prepareStatement(sql);<br>        ResultSet rs = preparedStatement.executeQuery();<br>        <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>            rs.getString(<span class="hljs-string">&quot;COL_NAME&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>java工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive-ip地理信息查询</title>
    <link href="/2022/06/20/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive-ip%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/"/>
    <url>/2022/06/20/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive-ip%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="HIVE-UDF-IP查询"><a href="#HIVE-UDF-IP查询" class="headerlink" title="HIVE UDF IP查询"></a>HIVE UDF IP查询</h1><p>利用 hive-udf 自定义 IP 查询函数</p><p>借助 ipip 提供的 ipdb</p><p><a href="https://www.ipip.net/product/ip.html#ipv4city">https://www.ipip.net/product/ip.html#ipv4city</a><br>将 .ipdb 文件放在 resources 目录下</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> net.ipip.ipdb.City;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentException;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.metadata.HiveException;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.udf.generic.GenericUDF;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector;<br> <br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: ip查询城市</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xxzuo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span>: 1293378490@qq.com</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IpLocationCity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GenericUDF</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> City IPDB;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> StringObjectInspector allCgi;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Initialize this GenericUDF. This will be called once and only once per</span><br><span class="hljs-comment">     * GenericUDF instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arguments The ObjectInspector for the arguments</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The ObjectInspector for the return value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> UDFArgumentException Thrown when arguments have wrong types, wrong length, etc.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ObjectInspector <span class="hljs-title">initialize</span><span class="hljs-params">(ObjectInspector[] arguments)</span> <span class="hljs-keyword">throws</span> UDFArgumentException </span>&#123;<br>        ObjectInspector arg = arguments[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (arguments.length != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UDFArgumentLengthException(<br>                    <span class="hljs-string">&quot;The operator &#x27;SubstrCgi&#x27; accepts one arguments.&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            IPDB = <span class="hljs-keyword">new</span> City(<span class="hljs-keyword">this</span>.getClass().getResourceAsStream(<span class="hljs-string">&quot;/ipipfree.ipdb&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        &#125;<br>        <span class="hljs-keyword">this</span>.allCgi = (StringObjectInspector) arg;<br>        <span class="hljs-keyword">return</span> PrimitiveObjectInspectorFactory.javaStringObjectInspector;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Evaluate the GenericUDF with the arguments.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arguments The arguments as DeferedObject, use DeferedObject.get() to get the</span><br><span class="hljs-comment">     *                  actual argument Object. The Objects can be inspected by the</span><br><span class="hljs-comment">     *                  ObjectInspectors passed in the initialize call.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">evaluate</span><span class="hljs-params">(GenericUDF.DeferredObject[] arguments)</span> <span class="hljs-keyword">throws</span> HiveException </span>&#123;<br>        String cgi = allCgi.getPrimitiveJavaObject(arguments[<span class="hljs-number">0</span>].get());<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> == cgi) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        String ipInfo = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ipInfo = IPDB.find(cgi.toString(), <span class="hljs-string">&quot;CN&quot;</span>)[<span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ipInfo;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get the String to be displayed in explain.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> children</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDisplayString</span><span class="hljs-params">(String[] children)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Usage: SubstrCgi(String cgi)&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python按行切割文件</title>
    <link href="/2022/06/20/%E5%85%B6%E4%BB%96/python%E6%8C%89%E8%A1%8C%E5%88%87%E5%89%B2%E6%96%87%E4%BB%B6/"/>
    <url>/2022/06/20/%E5%85%B6%E4%BB%96/python%E6%8C%89%E8%A1%8C%E5%88%87%E5%89%B2%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="利用python-按行分割文件"><a href="#利用python-按行分割文件" class="headerlink" title="利用python 按行分割文件"></a>利用python 按行分割文件</h1><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> filedialog<br><span class="hljs-keyword">from</span> tkinter.messagebox <span class="hljs-keyword">import</span> showinfo, showwarning, showerror<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mkSubFile</span>(<span class="hljs-params">lines, head, srcName, sub</span>):</span><br>    [des_filename, extname] = os.path.splitext(srcName)<br>    filename = des_filename + <span class="hljs-string">&#x27;_&#x27;</span> + <span class="hljs-built_in">str</span>(sub) + extname<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;make file: %s&#x27;</span> % filename)<br>    fout = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>)<br> <br>    <span class="hljs-keyword">try</span>:<br>        fout.writelines([head])<br>        fout.writelines(lines)<br>        <span class="hljs-keyword">return</span> sub + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">finally</span>:<br>        fout.close()<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">splitByLineCount</span>(<span class="hljs-params">filename, count</span>):</span><br>    fin = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        head = fin.readline()<br>        buf = []<br>        sub = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fin:<br>            buf.append(line)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(buf) == count:<br>                sub = mkSubFile(buf, head, filename, sub)<br>                buf = []<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(buf) != <span class="hljs-number">0</span>:<br>            sub = mkSubFile(buf, head, filename, sub)<br>    <span class="hljs-keyword">finally</span>:<br>        fin.close()<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init</span>():</span><br>    entryNum[<span class="hljs-string">&#x27;state&#x27;</span>] = <span class="hljs-string">&quot;disable&quot;</span><br>    btnConfirm[<span class="hljs-string">&#x27;state&#x27;</span>] = <span class="hljs-string">&quot;normal&quot;</span><br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">confirm</span>():</span><br>    f_path = filedialog.askopenfilename()<br>    inputFilePath.<span class="hljs-built_in">set</span>(f_path)<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clear</span>():</span><br>    inputFilePath.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    row.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;&quot;</span>)<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">startSplitFile</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(inputFilePath.get()) == <span class="hljs-number">0</span>:<br>        showwarning(title=<span class="hljs-string">&quot;警告&quot;</span>,<br>                    message=<span class="hljs-string">&quot;未选择文件路径!&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(row.get()) &lt;= <span class="hljs-number">0</span>:<br>            showwarning(title=<span class="hljs-string">&quot;警告&quot;</span>,<br>                        message=<span class="hljs-string">&quot;输入的不是正整数!&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">except</span>:<br>        showwarning(title=<span class="hljs-string">&quot;警告&quot;</span>,<br>                    message=<span class="hljs-string">&quot;输入的不是整数!&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    count = <span class="hljs-built_in">int</span>(row.get())<br>    begin = time.time()<br>    splitByLineCount(inputFilePath.get(), count)<br>    end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;time is %d seconds &#x27;</span> % (end - begin))<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">closeWindow</span>():</span><br>    root.destroy()<br> <br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    root = tk.Tk()<br>    root.title(<span class="hljs-string">&quot;File Split&quot;</span>)<br>    root.resizable(<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>)<br>    root.geometry(<span class="hljs-string">&quot;600x100+480+320&quot;</span>)<br> <br>    mess = tk.Label(root, text=<span class="hljs-string">&quot;请选择要切分的文件：&quot;</span>)<br>    mess.place(x=<span class="hljs-number">20</span>, y=<span class="hljs-number">10</span>, width=<span class="hljs-number">200</span>, height=<span class="hljs-number">20</span>)<br> <br>    inputFilePath = tk.StringVar(root, value=<span class="hljs-string">&#x27;&#x27;</span>)<br>    entryNum = tk.Entry(root, width=<span class="hljs-number">80</span>, textvariable=inputFilePath)<br>    entryNum.place(x=<span class="hljs-number">220</span>, y=<span class="hljs-number">10</span>, width=<span class="hljs-number">260</span>, height=<span class="hljs-number">20</span>)<br> <br>    btnConfirm = tk.Button(root, text=<span class="hljs-string">&#x27;选择文件&#x27;</span>, command=confirm)<br>    btnConfirm.place(x=<span class="hljs-number">500</span>, y=<span class="hljs-number">10</span>, width=<span class="hljs-number">70</span>, height=<span class="hljs-number">20</span>)<br> <br>    mess1 = tk.Label(root, text=<span class="hljs-string">&quot;请输入切分的文件行数：&quot;</span>)<br>    mess1.place(x=<span class="hljs-number">20</span>, y=<span class="hljs-number">40</span>, width=<span class="hljs-number">200</span>, height=<span class="hljs-number">20</span>)<br> <br>    row = tk.StringVar(root, value=<span class="hljs-string">&#x27;&#x27;</span>)<br>    entryNum1 = tk.Entry(root, width=<span class="hljs-number">80</span>, textvariable=row)<br>    entryNum1.place(x=<span class="hljs-number">220</span>, y=<span class="hljs-number">40</span>, width=<span class="hljs-number">200</span>, height=<span class="hljs-number">20</span>)<br> <br>    btnStart = tk.Button(root, text=<span class="hljs-string">&#x27;清空&#x27;</span>, command=clear)<br>    btnStart.place(x=<span class="hljs-number">260</span>, y=<span class="hljs-number">70</span>, width=<span class="hljs-number">70</span>, height=<span class="hljs-number">20</span>)<br> <br>    btnSet = tk.Button(root, text=<span class="hljs-string">&#x27;开始切分&#x27;</span>, command=startSplitFile)<br>    btnSet.place(x=<span class="hljs-number">125</span>, y=<span class="hljs-number">70</span>, width=<span class="hljs-number">70</span>, height=<span class="hljs-number">20</span>)<br> <br>    init()<br>    root.protocol(<span class="hljs-string">&quot;WM_DELETE_WINDOW&quot;</span>, closeWindow)<br>    root.mainloop()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop磁盘空间清理</title>
    <link href="/2022/06/20/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%B8%85%E7%90%86/"/>
    <url>/2022/06/20/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%B8%85%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>查看linux磁盘空间大文件</p><blockquote><p>du -h / —max-depth=5 | sort -hr | head -n 10</p></blockquote><p>查看hadoop大文件</p><blockquote><p>hdfs dfs -du -h  /</p></blockquote><p>分析其中占用空间过多的文件是否可以删除</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop作业查询与关闭</title>
    <link href="/2022/06/20/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop%E4%BD%9C%E4%B8%9A%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%85%B3%E9%97%AD/"/>
    <url>/2022/06/20/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop%E4%BD%9C%E4%B8%9A%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%85%B3%E9%97%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="hadoop作业的查询和关闭"><a href="#hadoop作业的查询和关闭" class="headerlink" title="hadoop作业的查询和关闭"></a>hadoop作业的查询和关闭</h1><ul><li><h3 id="hadoop-version-lt-2-3-0"><a href="#hadoop-version-lt-2-3-0" class="headerlink" title="hadoop version &lt;   2.3.0"></a>hadoop version &lt;   2.3.0</h3></li></ul><p>查看正在运行的 Hadoop 任务：</p><blockquote><p>hadoop job -list </p></blockquote><p>关闭Hadoop 任务进程：</p><blockquote><p>hadoop job -kill $jobId </p></blockquote><p>组合以上两条命令就可以实现 kill 掉指定用户的 job</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in `hadoop job -list | grep -w username| awk &#x27;&#123;print $1&#125;&#x27; | grep job_`; <br>do <br>hadoop job -kill $i; <br>done<br></code></pre></td></tr></table></figure><p>username 就是你希望关闭 Hadoop 任务的用户</p><ul><li><h3 id="hadoop-version-gt-2-3-0"><a href="#hadoop-version-gt-2-3-0" class="headerlink" title="hadoop version &gt;= 2.3.0"></a>hadoop version &gt;= 2.3.0</h3></li></ul><p>查看正在运行的 Hadoop 任务：</p><blockquote><p>yarn application -list </p></blockquote><p>关闭 Hadoop 任务进程：</p><blockquote><p>yarn application -kill $ApplicationId</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hadoop</tag>
      
      <tag>yarn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive 中文乱码</title>
    <link href="/2022/06/16/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <url>/2022/06/16/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="hive-中文乱码"><a href="#hive-中文乱码" class="headerlink" title="hive 中文乱码"></a>hive 中文乱码</h1><h2 id="修改元数据库字符集"><a href="#修改元数据库字符集" class="headerlink" title="修改元数据库字符集"></a>修改元数据库字符集</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改表字段 注解 和 表 注解</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> COLUMNS_V2 MODIFY <span class="hljs-keyword">COLUMN</span> COMMENT <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 ;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TABLE_PARAMS MODIFY <span class="hljs-keyword">COLUMN</span> PARAM_VALUE <span class="hljs-type">varchar</span>(<span class="hljs-number">4000</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 ;<br><span class="hljs-comment">-- 修改分区字段注解</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> PARTITION_PARAMS MODIFY <span class="hljs-keyword">COLUMN</span> PARAM_VALUE <span class="hljs-type">varchar</span>(<span class="hljs-number">4000</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 ;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> PARTITION_KEYS MODIFY <span class="hljs-keyword">COLUMN</span> PKEY_COMMENT <span class="hljs-type">varchar</span>(<span class="hljs-number">4000</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 ;<br><span class="hljs-comment">-- 修改索引注解</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> INDEX_PARAMS MODIFY <span class="hljs-keyword">COLUMN</span> PARAM_VALUE <span class="hljs-type">varchar</span>(<span class="hljs-number">4000</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 ;<br><span class="hljs-comment">-- 修改 数据库 注解</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> DBS MODIFY <span class="hljs-keyword">COLUMN</span> `<span class="hljs-keyword">DESC</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">4000</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 ;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es on hive</title>
    <link href="/2022/06/16/%E5%A4%A7%E6%95%B0%E6%8D%AE/es-on-hive/"/>
    <url>/2022/06/16/%E5%A4%A7%E6%95%B0%E6%8D%AE/es-on-hive/</url>
    
    <content type="html"><![CDATA[<h1 id="es-on-hive"><a href="#es-on-hive" class="headerlink" title="es on hive"></a>es on hive</h1><p>参考<a href="https://www.elastic.co/guide/en/elasticsearch/hadoop/current/hive.html">https://www.elastic.co/guide/en/elasticsearch/hadoop/current/hive.html</a></p><p>1.首先在官网下载jar包，解压到hive/lib目录下 <a href="https://www.elastic.co/cn/downloads/hadoop">Download Elasticsearch for Hadoop Free | Elastic</a> </p><p>2.hive server执行时，添加参数 </p><blockquote><p>hive.aux.jars.path=/path/elasticsearch-hadoop.jar </p></blockquote><p>或者修改 hive-site.xml 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hive.aux.jars.path<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/path/elasticsearch-hadoop.jar<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>A comma separated list (with no spaces) of the jar files<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.创建hive表，用于映射 es</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">external</span> <span class="hljs-keyword">table</span> test.es_msg <br>(     <br>    column1     string,     <br>    column2  string,     <br>    column3 <span class="hljs-type">int</span><br>)    stored <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;org.elasticsearch.hadoop.hive.EsStorageHandler&#x27;</span>    <br>tblproperties (         <br>    <span class="hljs-string">&#x27;es.resource&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;chat/_doc&#x27;</span>,         <br>    <span class="hljs-string">&#x27;es.nodes&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;192.168.x.x&#x27;</span>,        <br>    &quot;es.nodes.wan.only&quot; <span class="hljs-operator">=</span> &quot;true&quot;,         <br>    <span class="hljs-string">&#x27;es.transport.port&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;9200&#x27;</span>,         <br>    <span class="hljs-string">&#x27;es.mapping.names&#x27;</span> <span class="hljs-operator">=</span>                <br>    <span class="hljs-string">&#x27;column1:column1 ,column2:column2, column3:column3&#x27;</span>         <br>);<br></code></pre></td></tr></table></figure><p>4.取出es数据</p><p>对hive表进行 </p><p>insert overwrite table xxx </p><p>select * from xxx;即可取出数据</p><p>hive表配置</p><p>tblproperties</p><p>参考<a href="https://www.elastic.co/guide/en/elasticsearch/hadoop/current/configuration.html">Configuration | Elasticsearch for Apache Hadoop [7.13] | Elastic</a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hive</tag>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索技巧1</title>
    <link href="/2022/05/23/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A71/"/>
    <url>/2022/05/23/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A71/</url>
    
    <content type="html"><![CDATA[<h1 id="利用数组确定搜索方向"><a href="#利用数组确定搜索方向" class="headerlink" title="利用数组确定搜索方向"></a>利用数组确定搜索方向</h1><p>我们可以新建方向数组，这样 dfs 里不用自己手写搜索方向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] dx = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span>[] dy = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>; n&lt; <span class="hljs-number">4</span>; n++)&#123;<br>    <span class="hljs-keyword">int</span> nx = i + dx[n];<br>    <span class="hljs-keyword">int</span> ny = j + dy[n];<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer-03-数组中重复的数字</title>
    <link href="/2021/06/17/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer-03-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2021/06/17/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer-03-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>找出数组中重复的数字。</p><p>在一个长度为<code>n</code> 的数组 <code>nums</code>里的所有数字都在 <code>0</code>～<code>n-1</code> 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例1：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：<br><span class="hljs-string">[2, 3, 1, 0, 2, 5, 3]</span><br>输出：<span class="hljs-number">2</span> 或 <span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure><p>需要考虑到时间复杂度和空间复杂度的要求</p><p>如果要求时间复杂度，可以考虑用hash table.(时间复杂度 <code>O(N)</code>   空间复杂度 <code>O(N)</code>)</p><p>如果要求空间复杂度，可以先排序，再看前后有无重复数字.(时间复杂度 <code>O(Nlog(N))</code>   空间复杂度 <code>O(1)</code>)</p><p>如果都有要求，考虑原地置换法 .(时间复杂度 <code>O(N)</code>   空间复杂度 <code>O(1)</code>)</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>hash-table</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160.相交链表</title>
    <link href="/2021/06/06/%E7%AE%97%E6%B3%95/160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/06/06/%E7%AE%97%E6%B3%95/160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">160. 相交链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" alt="img"></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p>示例 1：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png" alt="img"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：intersectVal = <span class="hljs-number">8</span>, listA = [<span class="hljs-number">4,1,8,4</span>,<span class="hljs-number">5</span>], listB = [<span class="hljs-number">5,0,1,8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], skipA = <span class="hljs-number">2</span>, skipB = <span class="hljs-number">3</span><br><br>输出：Intersected at &#x27;<span class="hljs-number">8</span>&#x27;<br><br>解释：相交节点的值为 <span class="hljs-number">8</span> （注意，如果两个链表相交则不能为 <span class="hljs-number">0</span>）。<br>从各自的表头开始算起，链表 <span class="hljs-keyword">A</span> 为 [<span class="hljs-number">4,1,8,4</span>,<span class="hljs-number">5</span>]，链表 B 为 [<span class="hljs-number">5,0,1,8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]。<br>在 <span class="hljs-keyword">A</span> 中，相交节点前有 <span class="hljs-number">2</span> 个节点；在 B 中，相交节点前有 <span class="hljs-number">3</span> 个节点。<br><br></code></pre></td></tr></table></figure><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>使用双指针，创建两个指针pa和pb，分别指向两个头节点<code>headA</code>和<code>headB</code></p><p>依次遍历两个链表的每个节点</p><ul><li>如果pa不为空，则将pa移到下一个节点。如果pa为空，将pa指向<code>headB</code>的头节点</li><li>如果pb不为空，则将pb移到下一个节点。如果pb为空，将pb指向<code>headA</code>的头节点</li><li>当pa和pb都指向同一个节点，或者两者都为空的时候，返回指向的节点或者null</li><li>如果两个链表有交点，在第二次循环的时候，会返回交点</li><li>如果两个链表没有交点，在第二次遍历的时候会返回<code>null</code> == <code>null</code>,移动的距离就是两个链表的长度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(headA == <span class="hljs-keyword">null</span> || headB == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        ListNode pa = headA;<br>        ListNode pb = headB;<br>        <span class="hljs-keyword">while</span>(pa != pb)&#123;<br>            pa = pa == <span class="hljs-keyword">null</span> ? headB : pa.next;<br>            pb = pb == <span class="hljs-keyword">null</span> ? headA : pb.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pa;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>linked-list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13-罗马数字转整数</title>
    <link href="/2021/05/19/%E7%AE%97%E6%B3%95/13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <url>/2021/05/19/%E7%AE%97%E6%B3%95/13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/roman-to-integer/">13. 罗马数字转整数 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>罗马数字包含以下七种字符: <code>I</code>，<code>V</code>，<code>X</code>，<code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 X + II 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code>+<code>V</code>+<code>II</code>。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做<code>IIII</code>，而是<code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><p><code>I</code> 可以放在 <code>V</code>(5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。<br><code>X</code>可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。<br><code>C</code> 可以放在<code>D</code>(500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p>方法:</p><p>首先对符号和数字建立一个映射关系。</p><p>然后逆序遍历字符串，判断当前字符和前一个字符代表的数字大小，如果当前字符代表的数字小于后面一个字符，就减去当前字符代表的数值，如果当前字符代表的数字大等于于后面一个字符，就加上当前字符的数字</p><p>比如字符串<code>LVIII</code>对该字符串逆序遍历</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">L</span>  <span class="hljs-variable">V</span>   <span class="hljs-built_in">I</span>   <span class="hljs-built_in">I</span>   <span class="hljs-built_in">I</span><br><br>逆序遍历<br>假设初始值<span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>先到<span class="hljs-built_in">I</span> <span class="hljs-operator">,</span><span class="hljs-built_in">I</span>没有后面字符，所以 <span class="hljs-variable">sum</span><span class="hljs-operator">+</span><span class="hljs-number">1</span><br>然后继续到<span class="hljs-built_in">I</span> 这个时候不比后面字符小 所以再 <span class="hljs-variable">sum</span><span class="hljs-operator">+</span><span class="hljs-number">1</span><br>继续到 <span class="hljs-built_in">I</span>  仍然 <span class="hljs-variable">sum</span><span class="hljs-operator">+</span><span class="hljs-number">1</span><br>之后到 <span class="hljs-variable">V</span><span class="hljs-operator">,</span> <span class="hljs-variable">V</span>的后面一个字符是<span class="hljs-built_in">I</span><span class="hljs-operator">,</span><span class="hljs-variable">V</span>比<span class="hljs-built_in">I</span>大<span class="hljs-operator">,</span>所以<span class="hljs-variable">sum</span><span class="hljs-operator">+</span><span class="hljs-number">5</span><br>最后到 <span class="hljs-variable">L</span><span class="hljs-operator">,</span> <span class="hljs-variable">L</span>的后一个字符是<span class="hljs-variable">V</span><span class="hljs-operator">,</span> <span class="hljs-variable">L</span>比<span class="hljs-variable">V</span>大<span class="hljs-operator">,</span>所以<span class="hljs-variable">sum</span><span class="hljs-operator">+</span><span class="hljs-number">50</span><br>最终结果就是 <span class="hljs-number">0</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">5</span> <span class="hljs-operator">+</span> <span class="hljs-number">50</span> <span class="hljs-operator">=</span> <span class="hljs-number">58</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">romanToInt</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span>||s.length() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        Map&lt;Character,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Character,Integer&gt;();<br>        map.put(<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-number">1</span>);<br>        map.put(<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-number">5</span>);<br>        map.put(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">10</span>);<br>        map.put(<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-number">50</span>);<br>        map.put(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">100</span>);<br>        map.put(<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">500</span>);<br>        map.put(<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> last = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">int</span> num = map.get(s.charAt(s.length()-<span class="hljs-number">1</span>-i));<span class="hljs-comment">//逆序查找</span><br>            <span class="hljs-keyword">if</span>(num &lt; last)&#123;<span class="hljs-comment">//如果当前值比前一个小则减</span><br>                sum -= num;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//否则则加</span><br>                sum += num;<br>            &#125;<br>            last = num;<span class="hljs-comment">//将当前值赋给last</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos配置单机zookeeper</title>
    <link href="/2021/05/07/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/centos%E9%85%8D%E7%BD%AE%E5%8D%95%E6%9C%BAzookeeper/"/>
    <url>/2021/05/07/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/centos%E9%85%8D%E7%BD%AE%E5%8D%95%E6%9C%BAzookeeper/</url>
    
    <content type="html"><![CDATA[<h3 id="1-下载zookeeper"><a href="#1-下载zookeeper" class="headerlink" title="1.下载zookeeper"></a>1.下载zookeeper</h3><p><a href="https://mirrors.bfsu.edu.cn/apache/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz">下载地址</a></p><p>2.上传到服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入上传zookeeper的目录</span><br>cd /usr/local<br><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar -zxvf apache-zookeeper-3.6.3-bin.tar.gz<br><span class="hljs-meta">#</span><span class="bash"> 进入zookeeper解压目录</span><br>cd apache-zookeeper-3.6.3-bin/<br><span class="hljs-meta">#</span><span class="bash"> 新建data文件夹，路径根据个人习惯</span><br>mkdir data<br><span class="hljs-meta">#</span><span class="bash"> 新建日志文件夹，路径根据个人习惯</span><br>mkdir logs<br><span class="hljs-meta">#</span><span class="bash"> 进入配置文件夹</span><br>cd conf<br><span class="hljs-meta">#</span><span class="bash"> 复制给的模板配置文件</span><br>cp zoo_sample.cfg zoo.cfg<br><span class="hljs-meta">#</span><span class="bash"> 修改给配置文件 zoo.cfg</span><br>vi zoo.cfg<br></code></pre></td></tr></table></figure><p>主要关注</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">三个属性</span><br><span class="hljs-meta">#</span><span class="bash"> 数据目录 刚才新建的data</span><br>dataDir<br><span class="hljs-meta">#</span><span class="bash"> 日志目录 刚才新建的logs</span><br>dataLogDir<br><span class="hljs-meta">#</span><span class="bash"> 端口</span><br>clientPort <br><br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs she">sh zkServer.sh start<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>config</tag>
      
      <tag>zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jdk源码阅读环境搭建</title>
    <link href="/2021/05/04/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/jdk%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/05/04/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/jdk%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h3><p>首先新建一个普通的java项目</p><p><img src="/img/jdk阅读环境/1.jpg"></p><h3 id="2-导入jdk源码"><a href="#2-导入jdk源码" class="headerlink" title="2.导入jdk源码"></a>2.导入jdk源码</h3><ul><li>在java的安装目录下找到<code>src.zip</code>这个压缩包</li><li>然后我们将这个压缩包复制到刚才新建的项目目录下</li></ul><p><img src="/img/jdk阅读环境/2.jpg"></p><ul><li>右键解压缩到src目录下</li></ul><p><img src="/img/jdk阅读环境/3.jpg"></p><h3 id="3-替换jdk关联源码"><a href="#3-替换jdk关联源码" class="headerlink" title="3.替换jdk关联源码"></a>3.替换jdk关联源码</h3><p>首先我们打开项目设置<code>open moudle settings</code></p><p>点击SDKs将Sourcepath中原来关联的src给删掉</p><p><img src="/img/jdk阅读环境/4.jpg"></p><p>然后将项目中的jdk源码关联进来</p><p><img src="/img/jdk阅读环境/5.jpg"></p><p>设置项目jdk为刚才关联的jdk</p><p><img src="/img/jdk阅读环境/6.jpg"></p><h3 id="4-其他配置"><a href="#4-其他配置" class="headerlink" title="4.其他配置"></a>4.其他配置</h3><ul><li>在<code>settings</code>中搜索compiler </li></ul><p>​       修改<code>build project automatically</code>为1500 (用于解决系统资源不足)</p><p>​      <img src="/img/jdk阅读环境/11.jpg"></p><ul><li><p>在<code>settings</code>中搜索stepping</p><p>取消勾选</p></li></ul><p>​      <img src="/img/jdk阅读环境/7.jpg"></p><ul><li>删除<code>java.swing.plaf</code>下的<code>gtk</code>包</li></ul><p>​       <img src="/img/jdk阅读环境/8.jpg"></p><ul><li><p>引入jdk运行jar包</p><p>打开项目设置<code>open moudle settings</code>，在<code>Libraries</code>里新增lib</p><p><img src="/img/jdk阅读环境/9.jpg"></p><p>选择本机jdk安装路径下的lib文件夹</p><p><img src="/img/jdk阅读环境/10.jpg"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15-三数之和</title>
    <link href="/2021/05/04/%E7%AE%97%E6%B3%95/15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2021/05/04/%E7%AE%97%E6%B3%95/15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你一个包含 <code>n</code> 个整数的数组<code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <script type="math/tex">a</script>，<script type="math/tex">b</script>，<script type="math/tex">c</script> ，使得 <script type="math/tex">a + b + c = 0 ?</script>请你找出所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意</strong>：答案中不可以包含重复的三元组。</p><p>示例1：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：nums = [<span class="hljs-string">-1</span>,0,1,2,<span class="hljs-string">-1</span>,<span class="hljs-string">-4</span>]<br>输出：[[<span class="hljs-string">-1</span>,<span class="hljs-string">-1</span>,2],[<span class="hljs-string">-1</span>,0,1]]<br></code></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p>示例3：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[0]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p><strong>提示</strong>:</p><ul><li>$0 \le nums.length \le 3000$</li><li>$-10^5 \le nums[i] \le 10^5$</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>two-pointers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-两数之和</title>
    <link href="/2021/05/04/%E7%AE%97%E6%B3%95/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2021/05/04/%E7%AE%97%E6%B3%95/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给定一个整数数组 <code>nums</code>和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> 的那<strong>两个</strong>整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例1：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,7,11,15]</span>, target = 9<br>输出：<span class="hljs-comment">[0,1]</span><br>解释：因为 nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[1]</span> == 9 ，返回 <span class="hljs-comment">[0, 1]</span> 。<br></code></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,2,4]</span>, target = 6<br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></td></tr></table></figure><p><strong>提示</strong>：</p><ul><li>$2 \le nums.length \le 10^3$</li><li>$-10^9 \le nums[i] \le 10^9$</li><li>$-10^9 \le target \le 10^9$</li><li><strong>只会存在一个有效答案</strong></li></ul><p>方法一:</p><p>利用hash table记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">int</span> len = nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>            <span class="hljs-keyword">if</span>(map.containsKey(target - nums[i]))&#123;<br>                res[<span class="hljs-number">0</span>] = i;<br>                res[<span class="hljs-number">1</span>] = map.get(target - nums[i]);<br>                <span class="hljs-keyword">return</span> res;<br>            &#125;<br>            map.put(nums[i],i);           <br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>hash-table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos配置java</title>
    <link href="/2021/05/03/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/centos%E9%85%8D%E7%BD%AEjava/"/>
    <url>/2021/05/03/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/centos%E9%85%8D%E7%BD%AEjava/</url>
    
    <content type="html"><![CDATA[<h2 id="tar-gz包安装"><a href="#tar-gz包安装" class="headerlink" title="tar.gz包安装"></a>tar.gz包安装</h2><h4 id="1-jdk下载"><a href="#1-jdk下载" class="headerlink" title="1.jdk下载"></a>1.jdk下载</h4><p>关于jdk历史版本的下载，可以在这里找到<a href="https://github.com/frekele/oracle-java/releases">Releases · frekele/oracle-java (github.com)</a></p><p><img src="/img/centos_config_java/1.jpg"></p><p>我们选择<a href="https://github.com/frekele/oracle-java/releases/download/8u202-b08/jdk-8u202-linux-x64.tar.gz"><code>jdk-8u202-linux-x64.tar.gz</code></a></p><p>2.服务器配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在服务器上新建目录</span><br>cd /usr/local<br>mkdir java<br></code></pre></td></tr></table></figure><p>利用<a href="[SSH工具 客户端 (hostbuf.com">finalshell</a>](<a href="http://www.hostbuf.com/">http://www.hostbuf.com/</a>)) 将 <code>jdk-8u202-linux-x64.tar.gz</code> 上传到该目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar -zxvf jdk-8u202-linux-x64.tar.gz <br><br><span class="hljs-meta">#</span><span class="bash"> 配置环境变量</span><br>vi /etc/profile<br><br><span class="hljs-meta">#</span><span class="bash"> 在文件底部 输入</span><br>export JAVA_HOME=/usr/local/java/jdk1.8.0_202<br>export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>export PATH=$JAVA_HOME/bin:$PATH<br><br><span class="hljs-meta">#</span><span class="bash"> 刷新配置</span><br>source /etc/profile<br><br></code></pre></td></tr></table></figure><p><img src="/img/centos_config_java/2.jpg"></p><p>配置好后，输入如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure><p>出现</p><p><img src="/img/centos_config_java/3.jpg"></p><p>就表示安装成功</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>centos</tag>
      
      <tag>config</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-整数反转</title>
    <link href="/2021/05/03/%E7%AE%97%E6%B3%95/7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    <url>/2021/05/03/%E7%AE%97%E6%B3%95/7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/reverse-integer/">7. 整数反转 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 $[−{2^{31}},  {2^{31}} − 1]$ ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p><p>示例1:</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：x </span>=<span class="hljs-string"> 123</span><br><span class="hljs-string">输出：321</span><br></code></pre></td></tr></table></figure><p>示例2:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：x = <span class="hljs-string">-123</span><br>输出：<span class="hljs-string">-321</span><br></code></pre></td></tr></table></figure><p>示例3:</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：x </span>=<span class="hljs-string"> 120</span><br><span class="hljs-string">输出：21</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(x != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 取出x的末尾数字   x % 10       </span><br>            res = res * <span class="hljs-number">10</span> + x % <span class="hljs-number">10</span>;<br>            x /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) res == res ? (<span class="hljs-keyword">int</span>) res : <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>554-砖墙</title>
    <link href="/2021/05/02/%E7%AE%97%E6%B3%95/554-%E7%A0%96%E5%A2%99/"/>
    <url>/2021/05/02/%E7%AE%97%E6%B3%95/554-%E7%A0%96%E5%A2%99/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/brick-wall/">554. 砖墙 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。</p><p>你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。</p><p>给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 。</p><p>示例1:</p><p><img src="https://assets.leetcode.com/uploads/2021/04/24/cutwall-grid.jpg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：wall = <span class="hljs-comment">[<span class="hljs-comment">[1,2,2,1]</span>,<span class="hljs-comment">[3,1,2]</span>,<span class="hljs-comment">[1,3,2]</span>,<span class="hljs-comment">[2,4]</span>,<span class="hljs-comment">[3,1,2]</span>,<span class="hljs-comment">[1,3,1,1]</span>]</span><br>输出：2<br></code></pre></td></tr></table></figure><p>题目中要求，通过的砖块最少。可以反过来考虑，如果垂线经过间隔则不通过砖块，所以求通过的砖块最少，可以转化为通过的间隔最多。</p><p>如第一个例子</p><p>砖块分别为:</p><ul><li><p>砖块<code>[1,2,2,1]</code>             间隔 <code>[1,3,5]</code></p></li><li><p>砖块<code>[3,1,2]</code>                 间隔<code>[3,4]</code></p></li><li><p>砖块<code>[1,3,2]</code>                 间隔<code>[1,4]</code></p></li><li><p>砖块<code>[2,4]</code>                     间隔<code>[2]</code></p></li><li><p>砖块<code>[3,1,2]</code>                 间隔<code>[3,4]</code></p></li><li><p>砖块<code>[1,3,1,1]</code>             间隔<code>[1,4,5]</code></p></li></ul><p>此时，垂线从间隔4处通过的砖块最少</p><p>可以考虑使用hash table来计算，先对间隔计数，然后遍历hash table找到间隔出现最多的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">leastBricks</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; wall)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> height = wall.size();<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; height; i++) &#123;<br>            <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// 获取每个砖块的长度，计算出间隔的长度</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> brick : wall.get(i)) &#123;<br>                sum += brick;<br>                map.put(sum, map.getOrDefault(sum, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">// 只计算中间的间隔，不能从两边穿过，需要 remove 掉最后一个</span><br>            map.remove(sum); <br>        &#125;<br>        <span class="hljs-keyword">int</span> res = height;<br>        <span class="hljs-comment">// 遍历 获取每个间隔出现的次数，用高度相减，就是通过砖块的数量</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> space : map.keySet()) &#123;<br>            <span class="hljs-keyword">int</span> count = map.get(space);<br>            res = Math.min(res, height - count);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>hash-table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo部署问题</title>
    <link href="/2021/04/29/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/hexo%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/"/>
    <url>/2021/04/29/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/hexo%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="使用hexo-d-命令部署之后-访问页面不显示"><a href="#使用hexo-d-命令部署之后-访问页面不显示" class="headerlink" title="使用hexo d 命令部署之后 访问页面不显示"></a>使用hexo d 命令部署之后 访问页面不显示</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>因为之前看的网上教程，在<code>_config.yml</code>文件中设置的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>中将branch 设置为了 master,这是因为github现在新建仓库的主分支为main <a href="https://github.com/github/renaming">github/renaming: Guidance for changing the default branch name for GitHub repositories</a></p><p>所以现在github pages 调用的分支为maIn分支</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>打开博客仓库的settings</p><p><img src="/img/hexo配置/hexo1.jpg"></p><p>拉到最下面看到github pages配置</p><p><img src="/img/hexo配置/hexo2.jpg"></p><p>然后将分支改为master即可</p><p><img src="/img/hexo配置/hexo3.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>206-反转链表</title>
    <link href="/2021/04/29/%E7%AE%97%E6%B3%95/206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/04/29/%E7%AE%97%E6%B3%95/206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p>示例1:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span><br>输出：<span class="hljs-string">[5,4,3,2,1]</span><br></code></pre></td></tr></table></figure><p>示例2:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1,2]</span><br>输出：<span class="hljs-comment">[2,1]</span><br></code></pre></td></tr></table></figure><p>示例3:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p>提示:</p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>假设链表为 <script type="math/tex">1 \rightarrow 2 \rightarrow 3 \rightarrow \varnothing</script>，我们想要把它改成 <script type="math/tex">\varnothing \leftarrow 1 \leftarrow 2 \leftarrow 3</script>。</p><p>在遍历链表时，将当前节点的 <script type="math/tex">\textit{next}</script> ​ 指针改为指向前一个节点。由于节点没有引用其前一个节点，因此必须事先存储其前一个节点。在更改引用之前，还需要存储后一个节点。最后返回新的头引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode pre = <span class="hljs-keyword">null</span>;<br>        ListNode cur = head;<br>        ListNode next = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>) &#123;<br>            next = cur.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        ListNode node = reverseList(head.next);<br>        head.next.next = head;<br>        head.next = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>linked-list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>94-二叉树的中序遍历</title>
    <link href="/2021/04/26/%E7%AE%97%E6%B3%95/94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2021/04/26/%E7%AE%97%E6%B3%95/94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给定一个二叉树的根节点 <code>root</code> ，返回它的 <strong>中序</strong> 遍历。</p><p>中序遍历是先遍历左子树，然后访问根节点，然后遍历右子树。</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        inorder(root, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; list)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> != root)&#123;<br>            <span class="hljs-comment">//递归左子树</span><br>            inorder(root.left, list);<br>            <span class="hljs-comment">//访问根节点</span><br>            list.add(root.val);<br>            <span class="hljs-comment">//递归右子树</span><br>            inorder(root.right, list);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ol><li>先遍历到当前结点，但不求值，入栈</li><li>接着遍历左结点，入栈，往下遍历</li><li>当前结点没有左结点了，则出栈，求值</li><li>当前结点有右结点，重复步骤1</li><li>遍历直到栈为空为止</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">//初始化一个栈</span><br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        TreeNode cur = root;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">null</span> != cur || !stack.isEmpty())&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">null</span> != cur)&#123;<br>                stack.push(cur);<br>                <span class="hljs-comment">//不断压入左子树</span><br>                cur = cur.left;<br>            &#125;<br>            <span class="hljs-comment">//栈顶节点出栈</span><br>            cur = stack.pop();<br>            <span class="hljs-comment">//取值</span><br>            res.add(cur.val);<br>            <span class="hljs-comment">//压入右子树</span><br>            cur = cur.right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>897-递增顺序搜索树</title>
    <link href="/2021/04/25/%E7%AE%97%E6%B3%95/897-%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2021/04/25/%E7%AE%97%E6%B3%95/897-%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接:<a href="https://leetcode-cn.com/problems/increasing-order-search-tree/">897. 递增顺序搜索树 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你一棵二叉搜索树，请你 <strong>按中序遍历</strong> 将其重新排列为一棵递增顺序搜索树，使树中最左边的节点成为树的根节点，并且每个节点没有左子节点，只有一个右子节点。</p><p>示例1:</p><p><img src="https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg" alt="img"></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">5</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">6</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">8</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>示例2:</p><p><img src="https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg" alt="img"></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">5</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><ul><li>树中节点数的取值范围是 <code>[1, 100]</code></li><li><code>0 &lt;= Node.val &lt;= 1000</code></li></ul><h2 id="方法一-中序遍历-用list保存记录"><a href="#方法一-中序遍历-用list保存记录" class="headerlink" title="方法一 中序遍历 用list保存记录"></a>方法一 中序遍历 用list保存记录</h2><ul><li>首先对题目给出的二叉搜索树进行中序遍历，并用list保存</li><li>然后根据链表，创建一个只含右节点的二叉搜索树</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">increasingBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        List&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        inOrder(root, list);<br>        <span class="hljs-keyword">int</span> len = list.size();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-comment">//获取当前节点</span><br>            TreeNode cur = list.get(i);<br>            <span class="hljs-comment">//获取下一节点</span><br>            TreeNode next = list.get(i + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//当前节点左节点置空</span><br>            cur.left = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-comment">//当前节点的右节点就是下一节点</span><br>            cur.right = next;<br>        &#125;<br>        <span class="hljs-comment">//获取最后一个节点</span><br>        TreeNode last = list.get(len - <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//将最后一个节点的左右节点置空</span><br>        last.left = <span class="hljs-keyword">null</span>;<br>        last.right = <span class="hljs-keyword">null</span>; <br>        <span class="hljs-keyword">return</span> list.get(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">//中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">(TreeNode root, List&lt;TreeNode&gt; list)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root != <span class="hljs-keyword">null</span>)&#123;<br>            inOrder(root.left, list);<br>            list.add(root);<br>            inOrder(root.right, list);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>tree</tag>
      
      <tag>depth-first-search</tag>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
